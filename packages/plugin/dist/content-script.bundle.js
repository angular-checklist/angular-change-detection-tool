!function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=151)}({151:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)},o=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))(function(o,i){function a(e){try{c(r.next(e))}catch(e){i(e)}}function u(e){try{c(r.throw(e))}catch(e){i(e)}}function c(e){e.done?o(e.value):new n(function(t){t(e.value)}).then(a,u)}c((r=r.apply(e,t||[])).next())})},i=this&&this.__generator||function(e,t){var n,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function u(i){return function(u){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],r=0}finally{n=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,u])}}};Object.defineProperty(t,"__esModule",{value:!0});var a=n(152),u=n(153),c=a.promisePostMessage("ngProfilerDevtoolsContentScript","ngProfilerDevtoolsInjectedScript");u.injectScript("ng-devtools.bundle.js",function(){chrome.storage.local.get("ngTraceEnabled",function(e){var t=e.ngTraceEnabled;c.postMessage("toggleTracing",{enabled:t})})}),window.addEventListener("ContentScriptEvent",function(e){var t=e.detail;chrome.runtime.sendMessage({message:r({},t)})}),chrome.runtime.onMessage.addListener(function(e,t,n){return o(this,void 0,void 0,function(){return i(this,function(n){return console.log("received message",e,t),s[e.action]?(s[e.action](e.payload),[2]):(window.postMessage(e,"*"),[2])})})});var s={isAngularApp:function(){return function(){return o(this,void 0,void 0,function(){var e,t;return i(this,function(n){switch(n.label){case 0:return console.log("sending to popup"),e=function(e){chrome.runtime.sendMessage({type:"isAngularApp",source:"ngProfilerDevtoolsContentScript",payload:e})},[4,c.postMessage("isAngularApp",{})];case 1:return t=n.sent(),e(t),[2]}})})}()},toggleTracing:function(e){return t=e,void c.postMessage("toggleTracing",{enabled:t});var t}}},152:function(e,t,n){"use strict";var r=this&&this.__read||function(e,t){var n="function"==typeof Symbol&&e[Symbol.iterator];if(!n)return e;var r,o,i=n.call(e),a=[];try{for(;(void 0===t||t-- >0)&&!(r=i.next()).done;)a.push(r.value)}catch(e){o={error:e}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(o)throw o.error}}return a};Object.defineProperty(t,"__esModule",{value:!0});var o=1;t.promisePostMessage=function(e,t){var n={};return window.addEventListener("message",function(e){if(Array.isArray(e.data)){var o=r(e.data,3),i=o[0],a=o[1],u=o[2],c=n[i];c&&a&&a.source===t&&(c(a.payload,u),delete n[i])}}),{postMessage:function(t,r){var i=o++,a=[i,{source:e,action:t,payload:r}];return new Promise(function(e,t){n[i]=function(n,r){r&&t(new Error(r)),e(n)},window.postMessage(a,"*")})}}}},153:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=new Set;t.injectScript=function(e,t){r.has(e)||(!function(e){var t=document.createElement("script");e(t),document.documentElement.appendChild(t),t.parentNode.removeChild(t)}(function(n){n.src=chrome.extension.getURL(e),t&&(n.onload=t)}),r.add(e))}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,