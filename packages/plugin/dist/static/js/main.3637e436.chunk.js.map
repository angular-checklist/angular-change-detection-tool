{"version":3,"sources":["../../lib/dist/visualisation/graph.js","../../lib/dist/index.js","../../lib/dist/devtool.js","../../lib/dist/visualisation/tracing.js","../../lib/dist/l-view-state-manager.js","../../lib/dist/zone-handler.js","../../lib/dist/types/angular_core.js","../../lib/dist/visualisation/index.js","components/sidebar/Sidebar.tsx","components/tree-per-cycle/TreePerCycle.tsx","components/entire-tree/EntireTree.tsx","components/app-content/AppContent.tsx","App.tsx","serviceWorker.ts","models/serialized-tree-view-item.ts","models/updated-tree.ts","models/entire-tree.ts","index.tsx","../../lib/dist/constants.js","../../lib/dist/util.js","../../lib/dist/tree-view-builder.js","../../lib/dist/visualisation/update-pool-manager.js","../../lib/dist/tree-traversal.js"],"names":["__extends","this","_extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__","constructor","prototype","create","exports","__esModule","dagreD3","__webpack_require__","d3_selection_1","d3_zoom_1","constants_1","update_pool_manager_1","renderTree","id","treeViewItem","updates","g","graphlib","Graph","setGraph","setDefaultEdgeLabel","walkTreeAndAddNodes","svg","select","inner","firstRender","node","children","length","zoom","on","attr","event","transform","call","render","root","bounds","getBBox","parent","parentElement","fullWidth","clientWidth","fullHeight","clientHeight","width","height","midX","x","midY","y","scale","Math","max","translate","zoomIdentity","transition","duration","zoomFit","parentIdentifier","uuid","has","data","get","setNode","label","tagName","class","hit","COLORS_CLASSES","NOT_UPDATED_NODE_CLASS_NAME","forEach","childTreeViewItem","childIdentifier","setEdge","GraphRender","_super","_this","setUpdates","serializedTreeViewItem","addAll","drawImpl","pool","UpdatePoolManager","__export","m","util_1","devtool_1","angular_core_1","startTracing","console","log","setTimeout","angularRootNode","findAngularRootNode","document","body","monkeyPatchRootNode","CONTEXT","stopTracing","undoMonkeyPatch","isAngularApp","undefined","__read","o","n","Symbol","iterator","r","e","i","ar","next","done","push","value","error","__spread","arguments","concat","tracing_1","l_view_state_manager_1","tree_traversal_1","zone_handler_1","graph_1","tree_view_builder_1","tracer","Tracer","lViewStateManager","LViewStateManager","patchedTemplateFns","cdCycleCountInCurrentLoop","monkeyPatchTemplate","tView","rootLView","template","__template_patched__","origTemplate","args","_i","apply","resetState","scheduleOutsideOfZone","updatedTree","serialiseTreeViewItem","getTree","entireTree","traverseTreeAndCreateTreeStructure","updatedTreeAsInstructions","transformTreeToInstructions","window","dispatchEvent","CustomEvent","detail","type","payload","instructions","mapToObject","getNextLView","currentLView","predictedNextLView","HOST","DEVTOOLS_IDENTIFIER","monkeyPatchDirectChildren","present","createMeasurement","getBoundingClientRect","lView","isRoot","whenChildComponentFound","childLView","TVIEW","loopChildComponents","work","loopDynamicEmbeddedViews","dynamicLView","rootContext","components","rootComponent","readPatchedLView","__values","measurement","add","e_1","_a","ensureCanvas","canvas","ctx","getContext","clearRect","_b","entries","_c","_d","color","COLORS","HOTTEST_COLOR","drawBorder","e_1_1","getElementById","createElement","screen","availWidth","availHeight","style","cssText","parentNode","documentElement","insertBefore","firstChild","borderWidth","borderColor","lineWidth","strokeStyle","OUTLINE_COLOR","strokeRect","left","top","setLineDash","floor","rect","rootTreeViewItem","createInitialTreeViewState","treeViewBuilder","TreeViewBuilder","addTreeViewItem","currentTreeViewItem","dynamicEmbeddedViewsChecked","lastViewRef","currentViewRefIndex","nextLContainer","nextCurrent","nextCurrentLContainer","nextViewRefIndex","exitLoopPrematurely","currentIndex","potentialLView","shouldLViewBeChecked","getRealParent","scheduledFn","Zone","run","Promise","then","MONKEY_PATCH_KEY_NAME","FLAGS","PARENT","NEXT","CHILD_HEAD","CHILD_TAIL","DECLARATION_VIEW","ACTIVE_INDEX","NATIVE","VIEW_REFS","CONTAINER_HEADER_OFFSET","HEADER_OFFSET","TYPE","Sidebar","_React$Component","props","classCallCheck","possibleConstructorReturn","getPrototypeOf","onMenuItemClick","menuItem","onMenuItemSelected","bind","assertThisInitialized","inherits","createClass","key","react_default","a","className","onClick","index_esm","React","Component","TreePerCycle","observer","_class","state","selectedCycle","EntireTree","EntireTree_class","treeGraph","_this2","_this$props$store","store","test","AppContent","stores","entireTreeStore","appContent","EntireTree_EntireTree","TreePerCycle_TreePerCycle","updatedTreesStore","App","count","menuItemSelected","setupConnection","setState","backgroundPageConnection","chrome","runtime","connect","onMessage","addListener","message","setTreeUpdate","updatedTreeStore","addUpdatedTree","clearData","postMessage","tabId","devtools","inspectedWindow","Sidebar_Sidebar","AppContent_AppContent","Boolean","location","hostname","match","SerializedTreeViewItemModel","types","model","string","array","late","onPush","boolean","updatedTrees","actions","self","maybe","map","Map","ReactDOM","src_App_0","navigator","serviceWorker","ready","registration","unregister","UPDATED_NODE_CLASS_NAME","DURATION","isLView","isArray","readPatchedData","target","isCreationMode","view","monkeyPatchFunction","obj","property","monkeyPatchFn","getComponentViewByIndex","nodeIndex","hostView","slotValue","isLContainer","childNodes","childNode","potentialRootNode","map_1","map_1_1","parentTreeViewItem","loopTreeViewItem","__assign","assign","t","s","drawing","items","dataToAdd","expiration","Date","now","set","scheduleDraw","firstExpirationDate","e_2","minExpiration","Number","MAX_VALUE","temp","min","e_2_1","draw","size","clearTimer","clearTimeout","redraw","requestAnimationFrame","current","traverseTreeToStructure","traverseTreeAndCreateInstructions","addElement","accumulator","traverseTree","inputTreeViewItem","walkTree"],"mappings":"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","file":"static/js/main.3637e436.chunk.js","sourcesContent":["\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nexports.__esModule = true;\n\nvar dagreD3 = require(\"dagre-d3\");\n\nvar d3_selection_1 = require(\"d3-selection\");\n\nvar d3_zoom_1 = require(\"d3-zoom\");\n\nvar constants_1 = require(\"../constants\");\n\nvar update_pool_manager_1 = require(\"./update-pool-manager\");\n/**\n * Renders a tree\n *\n * @param id - selector of the id in the html\n * @param treeViewItem - the item to visualise\n * @param updates - Map of all items that need to be highlighted\n */\n\n\nfunction renderTree(id, treeViewItem, updates) {\n  // Create the input graph\n  var g = new dagreD3.graphlib.Graph().setGraph({}).setDefaultEdgeLabel(function () {\n    return {};\n  });\n  walkTreeAndAddNodes(g, treeViewItem, updates);\n  var svg = d3_selection_1.select(\"svg#\" + id),\n      inner = svg.select('g');\n  var firstRender = inner.node().children.length === 0;\n  var zoom = d3_zoom_1.zoom().on('zoom', function () {\n    inner.attr('transform', d3_selection_1.event.transform);\n  });\n  svg.call(zoom);\n  var render = new dagreD3.render();\n  render(inner, g);\n\n  if (firstRender) {\n    zoomFit(svg, inner, zoom);\n  }\n}\n\nexports.renderTree = renderTree;\n\nfunction zoomFit(root, inner, zoom) {\n  var bounds = root.node().getBBox();\n  var parent = root.node().parentElement;\n  var fullWidth = parent.clientWidth,\n      fullHeight = parent.clientHeight;\n  var width = bounds.width,\n      height = bounds.height;\n  var midX = bounds.x + width / 2,\n      midY = bounds.y + height / 2;\n  if (width === 0 || height === 0) return; // nothing to fit\n\n  var scale = 0.75 / Math.max(width / fullWidth, height / fullHeight);\n  var translate = [fullWidth / 2 - scale * midX, fullHeight / 2 - scale * midY];\n  var transform = d3_zoom_1.zoomIdentity.translate(translate[0], translate[1]).scale(scale);\n  root.transition().duration(0) // milliseconds\n  .call(zoom.transform, transform);\n} // FIXME graph should be unaware of host and stuff\n\n\nfunction walkTreeAndAddNodes(g, treeViewItem, updates) {\n  var parentIdentifier = treeViewItem.uuid;\n\n  if (updates && updates.has(parentIdentifier)) {\n    var data = updates.get(parentIdentifier);\n    g.setNode(parentIdentifier, {\n      label: treeViewItem.tagName,\n      \"class\": data.hit ? constants_1.COLORS_CLASSES[data.hit - 1] : constants_1.COLORS_CLASSES[0]\n    });\n  } else {\n    g.setNode(parentIdentifier, {\n      label: treeViewItem.tagName,\n      \"class\": constants_1.NOT_UPDATED_NODE_CLASS_NAME\n    });\n  }\n\n  treeViewItem.children.forEach(function (childTreeViewItem) {\n    var childIdentifier = childTreeViewItem.uuid;\n    walkTreeAndAddNodes(g, childTreeViewItem, updates);\n    g.setEdge(parentIdentifier, childIdentifier);\n  });\n}\n\nexports.walkTreeAndAddNodes = walkTreeAndAddNodes;\n\nvar GraphRender =\n/** @class */\nfunction (_super) {\n  __extends(GraphRender, _super);\n\n  function GraphRender(id) {\n    var _this = _super.call(this) || this;\n\n    _this.id = id;\n    return _this;\n  }\n\n  GraphRender.prototype.setUpdates = function (serializedTreeViewItem, updates) {\n    this.serializedTreeViewItem = serializedTreeViewItem;\n    this.addAll(updates);\n  };\n\n  GraphRender.prototype.drawImpl = function (pool) {\n    renderTree(this.id, this.serializedTreeViewItem, this.pool);\n  };\n\n  return GraphRender;\n}(update_pool_manager_1.UpdatePoolManager);\n\nexports.GraphRender = GraphRender;","\"use strict\";\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\n\nexports.__esModule = true;\n\nvar util_1 = require(\"./util\");\n\nvar devtool_1 = require(\"./devtool\");\n\nvar angular_core_1 = require(\"./types/angular_core\");\n\n__export(require(\"./tree-view-builder\"));\n\n__export(require(\"./visualisation\"));\n\nfunction startTracing() {\n  console.log('starting tracing');\n  setTimeout(function () {\n    var angularRootNode = util_1.findAngularRootNode(document.body);\n\n    if (angularRootNode) {\n      devtool_1.monkeyPatchRootNode(angularRootNode[angular_core_1.CONTEXT]);\n    }\n  }, 2000);\n}\n\nexports.startTracing = startTracing;\n\nfunction stopTracing() {\n  devtool_1.undoMonkeyPatch();\n}\n\nexports.stopTracing = stopTracing;\n\nfunction isAngularApp() {\n  // console.log('trying to find angular root node', findAngularRootNode(document.body));\n  return util_1.findAngularRootNode(document.body) !== undefined;\n}\n\nexports.isAngularApp = isAngularApp;","\"use strict\";\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nvar __spread = this && this.__spread || function () {\n  for (var ar = [], i = 0; i < arguments.length; i++) {\n    ar = ar.concat(__read(arguments[i]));\n  }\n\n  return ar;\n};\n\nexports.__esModule = true;\n\nvar angular_core_1 = require(\"./types/angular_core\");\n\nvar tracing_1 = require(\"./visualisation/tracing\");\n\nvar l_view_state_manager_1 = require(\"./l-view-state-manager\");\n\nvar util_1 = require(\"./util\");\n\nvar tree_traversal_1 = require(\"./tree-traversal\");\n\nvar zone_handler_1 = require(\"./zone-handler\");\n\nvar graph_1 = require(\"./visualisation/graph\");\n\nvar uuid = require(\"uuid\");\n\nvar constants_1 = require(\"./constants\");\n\nvar tree_view_builder_1 = require(\"./tree-view-builder\");\n\nvar tracer = new tracing_1.Tracer();\nvar treeGraph = new graph_1.GraphRender('liveTree');\nvar lViewStateManager = new l_view_state_manager_1.LViewStateManager();\nvar patchedTemplateFns = []; // In dev mode, there will be two cycles. The second cycle is purely used for making sure the unidirectional data flow is followed and\n// should not be visualised. We opt to not track this second cycle.\n\nvar cdCycleCountInCurrentLoop = 0;\n\nvar monkeyPatchTemplate = function monkeyPatchTemplate(tView, rootLView) {\n  if (tView.template.__template_patched__) {\n    return;\n  }\n\n  var origTemplate = tView.template;\n\n  tView.template = function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    console.log(rootLView, args[0], cdCycleCountInCurrentLoop);\n\n    if (rootLView) {\n      cdCycleCountInCurrentLoop++;\n    } // Mode will be 1 for creation and 2 for update\n\n\n    var mode = args[0]; // Don't get the next lView if we are in creation mode as it will be called immediately in update mode\n\n    if (mode === 1 || cdCycleCountInCurrentLoop !== 1) {\n      console.log('short circuiting');\n      origTemplate.apply(void 0, __spread(args));\n      return;\n    }\n\n    if (rootLView) {\n      // If we have the rootLView, it means that we have started a new cycle\n      lViewStateManager.resetState();\n      console.log('scheduled!');\n      zone_handler_1.scheduleOutsideOfZone(function () {\n        cdCycleCountInCurrentLoop = 0;\n        var updatedTree = tree_view_builder_1.serialiseTreeViewItem(lViewStateManager.getTree());\n        var entireTree = tree_view_builder_1.serialiseTreeViewItem(tree_traversal_1.traverseTreeAndCreateTreeStructure(rootLView, true));\n        var updatedTreeAsInstructions = tree_traversal_1.transformTreeToInstructions(updatedTree); // treeGraph.setUpdates(entireTree, updatedTreeAsInstructions);\n        // renderTree('lastUpdatedTree', entireTree, updatedTreeAsInstructions);\n        // const events = new CustomEvent('PassToBackground', {detail: message});\n        // sendMessage({\n        // \ttype: 'ENTIRE_TREE',\n        // \tpayload: {entireTree, instructions: mapToObject(updatedTreeAsInstructions)}\n        // });\n        // sendMessage({\n        // \ttype: 'UPDATED_TREE',\n        // \tpayload: {updatedTree}\n        // });\n        // window.postMessage('whatever', '*');\n\n        window.dispatchEvent(new CustomEvent('ContentScriptEvent', {\n          detail: {\n            type: 'ENTIRE_TREE',\n            payload: {\n              entireTree: entireTree,\n              instructions: util_1.mapToObject(updatedTreeAsInstructions)\n            }\n          }\n        }));\n        console.log('updatedTree', updatedTree);\n        window.dispatchEvent(new CustomEvent('ContentScriptEvent', {\n          detail: {\n            type: 'UPDATED_TREE',\n            payload: {\n              updatedTree: updatedTree\n            }\n          }\n        }));\n      });\n    } // Set the pointer to the next lView\n\n\n    lViewStateManager.getNextLView(null, rootLView);\n    var currentLView = lViewStateManager.predictedNextLView; // console.log('CD for ', currentLView[HOST].tagName);\n\n    if (!currentLView[angular_core_1.HOST][constants_1.DEVTOOLS_IDENTIFIER]) {\n      currentLView[angular_core_1.HOST][constants_1.DEVTOOLS_IDENTIFIER] = uuid();\n    }\n\n    origTemplate.apply(void 0, __spread(args)); // After executing the template, we need to check if components were added\n    // TODO: check if we need to check child components again (prolly dynamicEmbeddedViews are enough)\n\n    monkeyPatchDirectChildren(currentLView); // Lastly, we need to update the Tracer to show a box. This has to be done in a timeout as the view dimensions have not\n    // been updated at this point yet.\n\n    zone_handler_1.scheduleOutsideOfZone(function () {\n      // console.log(`Tracing for ${currentLView[HOST].tagName}`, currentLView[HOST]);\n      tracer.present(currentLView[angular_core_1.HOST][constants_1.DEVTOOLS_IDENTIFIER], currentLView[angular_core_1.HOST].tagName, tracing_1.createMeasurement(currentLView[0].getBoundingClientRect()));\n    });\n  };\n\n  tView.template.__template_patched__ = true;\n  patchedTemplateFns.push({\n    origTemplate: origTemplate,\n    tView: tView\n  });\n};\n\nfunction monkeyPatchDirectChildren(lView, isRoot) {\n  if (isRoot === void 0) {\n    isRoot = false;\n  } // Patch direct child components\n\n\n  var whenChildComponentFound;\n\n  if (isRoot) {\n    whenChildComponentFound = function whenChildComponentFound(childLView) {\n      return monkeyPatchTemplate(childLView[angular_core_1.TVIEW], childLView);\n    };\n  } else {\n    whenChildComponentFound = function whenChildComponentFound(childLView) {\n      return monkeyPatchTemplate(childLView[angular_core_1.TVIEW]);\n    };\n  }\n\n  tree_traversal_1.loopChildComponents({\n    lView: lView,\n    work: whenChildComponentFound\n  }); // Find components in the dynamicEmbeddedViews to patch\n\n  var whenDynamicEmbeddedViewFound = function whenDynamicEmbeddedViewFound(dynamicLView) {\n    if (dynamicLView[angular_core_1.HOST]) {\n      monkeyPatchTemplate(dynamicLView[angular_core_1.TVIEW]);\n    }\n\n    monkeyPatchDirectChildren(dynamicLView);\n  };\n\n  tree_traversal_1.loopDynamicEmbeddedViews({\n    lView: lView,\n    work: whenDynamicEmbeddedViewFound\n  });\n}\n\nexports.monkeyPatchDirectChildren = monkeyPatchDirectChildren;\n\nfunction monkeyPatchRootNode(rootContext) {\n  for (var i = 0; i < rootContext.components.length; i++) {\n    var rootComponent = rootContext.components[i];\n    var rootComponentLView = util_1.readPatchedLView(rootComponent);\n    monkeyPatchDirectChildren(rootComponentLView, true);\n  }\n}\n\nexports.monkeyPatchRootNode = monkeyPatchRootNode;\n\nfunction undoMonkeyPatch() {\n  patchedTemplateFns.forEach(function (data) {\n    data.tView.template = data.origTemplate;\n  });\n  patchedTemplateFns = [];\n}\n\nexports.undoMonkeyPatch = undoMonkeyPatch;","\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var _extendStatics = function extendStatics(d, b) {\n    _extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) {\n        if (b.hasOwnProperty(p)) d[p] = b[p];\n      }\n    };\n\n    return _extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    _extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nexports.__esModule = true;\n\nvar update_pool_manager_1 = require(\"./update-pool-manager\");\n\nvar constants_1 = require(\"../constants\"); // Id of the canvas node\n\n\nvar CANVAS_NODE_ID = 'TraceUpdatesWebNodePresenter';\n\nvar Tracer =\n/** @class */\nfunction (_super) {\n  __extends(Tracer, _super);\n\n  function Tracer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Tracer.prototype.present = function (uuid, tagName, measurement) {\n    // Add this measurement to the pool of updates\n    this.add(uuid, tagName, measurement);\n  };\n\n  Tracer.prototype.drawImpl = function (pool) {\n    var e_1, _a;\n\n    this.ensureCanvas();\n    var canvas = this.canvas;\n    var ctx = canvas.getContext('2d');\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    try {\n      for (var _b = __values(pool.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = __read(_c.value, 2),\n            uuid = _d[0],\n            data = _d[1];\n\n        var color = constants_1.COLORS[data.hit - 1] || constants_1.HOTTEST_COLOR;\n        drawBorder(ctx, data.data, 1, color);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b[\"return\"])) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n  };\n\n  Tracer.prototype.ensureCanvas = function () {\n    var canvas = this.canvas;\n\n    if (canvas === null || canvas === undefined) {\n      canvas = window.document.getElementById(CANVAS_NODE_ID) || window.document.createElement('canvas');\n      canvas.id = CANVAS_NODE_ID;\n      canvas.width = window.screen.availWidth;\n      canvas.height = window.screen.availHeight;\n      canvas.style.cssText = \"\\n        xx-background-color: red;\\n        xx-opacity: 0.5;\\n        bottom: 0;\\n        left: 0;\\n        pointer-events: none;\\n        position: fixed;\\n        right: 0;\\n        top: 0;\\n        z-index: 1000000000;\\n      \";\n    }\n\n    if (!canvas.parentNode) {\n      var root = window.document.documentElement;\n      root.insertBefore(canvas, root.firstChild);\n    }\n\n    this.canvas = canvas;\n  };\n\n  return Tracer;\n}(update_pool_manager_1.UpdatePoolManager);\n\nexports.Tracer = Tracer;\n\nfunction drawBorder(ctx, measurement, borderWidth, borderColor) {\n  // outline\n  ctx.lineWidth = 1;\n  ctx.strokeStyle = constants_1.OUTLINE_COLOR;\n  ctx.strokeRect(measurement.left - 1, measurement.top - 1, measurement.width + 2, measurement.height + 2); // inset\n\n  ctx.lineWidth = 1;\n  ctx.strokeStyle = constants_1.OUTLINE_COLOR;\n  ctx.strokeRect(measurement.left + borderWidth, measurement.top + borderWidth, measurement.width - borderWidth, measurement.height - borderWidth);\n  ctx.strokeStyle = borderColor;\n  ctx.setLineDash([0]); // border\n\n  ctx.lineWidth = borderWidth;\n  ctx.strokeRect(measurement.left + Math.floor(borderWidth / 2), measurement.top + Math.floor(borderWidth / 2), measurement.width - borderWidth, measurement.height - borderWidth);\n  ctx.setLineDash([0]);\n}\n\nfunction createMeasurement(rect) {\n  return {\n    left: rect.left,\n    top: rect.top,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nexports.createMeasurement = createMeasurement;","\"use strict\";\n\nexports.__esModule = true;\n\nvar angular_core_1 = require(\"./types/angular_core\");\n\nvar util_1 = require(\"./util\");\n\nvar tree_traversal_1 = require(\"./tree-traversal\");\n\nvar tree_view_builder_1 = require(\"./tree-view-builder\");\n/**\n * This class encapsulates the same logic used by the Angular Ivy renderer to determine what the next view is to be checked.\n *\n * Internally, Angular manages a property 'lView' which points to the current view to be checked. Unfortunately, it's impossible\n * to reference this property by using a runtime dependency. We do need this know which view is currently being checked to link\n * the correct lView with the correct template function execution. By linking this info we can figure out which component is checked\n * and which one is not.\n *\n * The class exposes the predictedNextLView property which is the predicted lView to be checked. By calling the getNextLView function\n * the pointer is set to the next predicted one. This is done by mimicking the tree traversal that Angular does internally. Every time this\n * traversal is updated, this file will need to be as well!\n *\n * Call the resetState function to reset the initial state between different loops.\n */\n\n\nvar LViewStateManager =\n/** @class */\nfunction () {\n  function LViewStateManager() {}\n  /**\n   * Function will change the pointer to the predictedNextLView parameter to the one Angular called the template function for.\n   *\n   * EVERY call will change the pointer to the next lView. Meaning, every call will traverse the tree from where it left of and will\n   * try to find the next one\n   *\n   * @param treeViewItem\n   * @param rootLView\n   */\n\n\n  LViewStateManager.prototype.getNextLView = function (treeViewItem, rootLView) {\n    var _this = this; // If there is no current predictedLView it MUST be the current iteration\n\n\n    if (!this.predictedNextLView) {\n      var rootTreeViewItem = tree_view_builder_1.createInitialTreeViewState(rootLView, true);\n      this.treeViewBuilder = new tree_view_builder_1.TreeViewBuilder();\n      this.treeViewBuilder.addTreeViewItem(rootTreeViewItem);\n      this.predictedNextLView = rootLView;\n      return;\n    } // If no treeViewItem was passed, take the last one we were working with\n\n\n    if (!treeViewItem) {\n      treeViewItem = this.treeViewBuilder.currentTreeViewItem;\n    } // Loop over all the dynamicEmbeddedViews\n\n\n    if (!treeViewItem.dynamicEmbeddedViewsChecked) {\n      // When a dynamic embedded view is found\n      var whenDynamicEmbeddedViewFound = function whenDynamicEmbeddedViewFound(dynamicLView, lastViewRef, currentViewRefIndex, nextLContainer) {\n        // if it was the last viewRef for that LContainer, we need to update the pointer so the next loop doesn't revisit it\n        if (lastViewRef) {\n          treeViewItem.nextCurrent = nextLContainer;\n        } else {\n          // If not, we need to update the index of the current viewRef so we don't revisit that one again\n          treeViewItem.currentViewRefIndex = currentViewRefIndex + 1;\n        } // We go deeper into the dynamicEmbeddedView found to find components\n\n\n        _this.getNextLView(tree_view_builder_1.createInitialTreeViewState(dynamicLView, false, treeViewItem));\n      }; // Call the tree traversal for dynamicEmbeddedViews, exit the loop whenever we hit something. We only want to visit the\n      // first node and continue to the next on the next traversal.\n\n\n      var foundADynamicEmbeddedView = tree_traversal_1.loopDynamicEmbeddedViews({\n        lView: treeViewItem.lView,\n        work: whenDynamicEmbeddedViewFound,\n        nextCurrentLContainer: treeViewItem.nextCurrent,\n        nextViewRefIndex: treeViewItem.currentViewRefIndex,\n        exitLoopPrematurely: true\n      }); // If a dynamic view was found, we need to stop looping, if not, we need to check the current lView's child components\n\n      if (foundADynamicEmbeddedView) {\n        return;\n      } // Label this so we don't accidentally loop over all the dynamic embedded views again\n\n\n      treeViewItem.dynamicEmbeddedViewsChecked = true;\n    } // Check the child components\n\n\n    var components = treeViewItem.lView[angular_core_1.TVIEW].components;\n\n    if (!components || treeViewItem.currentIndex >= components.length) {\n      if (!treeViewItem.isRoot) {\n        this.getNextLView(treeViewItem.parent);\n        return;\n      }\n\n      return;\n    } // Pick the one based on the index\n\n\n    var potentialLView = treeViewItem.lView[components[treeViewItem.currentIndex]]; // Check if it is not the root and if the component will be checked during this CD cycle, find the next\n\n    if (!treeViewItem.isRoot && util_1.shouldLViewBeChecked(potentialLView)) {\n      treeViewItem.currentIndex++;\n      this.getNextLView(treeViewItem);\n      return;\n    } // Found the component that will be checked next\n\n\n    this.predictedNextLView = treeViewItem.lView[components[treeViewItem.currentIndex]] || treeViewItem.lView; // Up the index so we don't go over it again\n\n    treeViewItem.currentIndex++; // Create a new treeViewItem entry and add it as a child to the current one\n\n    var childTreeViewItem = tree_view_builder_1.createInitialTreeViewState(this.predictedNextLView, false, treeViewItem);\n    this.treeViewBuilder.addTreeViewItem(childTreeViewItem, tree_traversal_1.getRealParent(treeViewItem));\n  };\n\n  LViewStateManager.prototype.resetState = function () {\n    this.predictedNextLView = null;\n  };\n\n  LViewStateManager.prototype.getTree = function () {\n    return this.treeViewBuilder.rootTreeViewItem;\n  };\n\n  return LViewStateManager;\n}();\n\nexports.LViewStateManager = LViewStateManager;","\"use strict\";\n\nexports.__esModule = true;\n\nfunction scheduleOutsideOfZone(scheduledFn) {\n  Zone.root.run(function () {\n    return new Promise(function (r) {\n      return r();\n    }).then(function () {\n      return scheduledFn();\n    });\n  });\n}\n\nexports.scheduleOutsideOfZone = scheduleOutsideOfZone;","\"use strict\";\n\nexports.__esModule = true;\nexports.MONKEY_PATCH_KEY_NAME = '__ngContext__'; // Below are constants for LView indices to help us look up LView members\n// without having to remember the specific indices.\n// Uglify will inline these when minifying so there shouldn't be a cost.\n\nexports.HOST = 0;\nexports.TVIEW = 1;\nexports.FLAGS = 2;\nexports.PARENT = 3;\nexports.NEXT = 4;\nexports.CONTEXT = 9;\nexports.CHILD_HEAD = 14;\nexports.CHILD_TAIL = 15;\nexports.DECLARATION_VIEW = 17;\n/**\n * Special location which allows easy identification of type. If we have an array which was\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n * `LContainer`.\n */\n\n/**\n * Below are constants for LContainer indices to help us look up LContainer members\n * without having to remember the specific indices.\n * Uglify will inline these when minifying so there shouldn't be a cost.\n */\n\nexports.ACTIVE_INDEX = 2; // PARENT, NEXT, QUERIES and T_HOST are indices 3, 4, 5 and 6.\n// As we already have these constants in LView, we don't need to re-create them.\n\nexports.NATIVE = 7;\nexports.VIEW_REFS = 8;\n/**\n * Size of LContainer's header. Represents the index after which all views in the\n * container will be inserted. We need to keep a record of current views so we know\n * which views are already in the DOM (and don't need to be re-added) and so we can\n * remove views from the DOM when they are no longer required.\n */\n\nexports.CONTAINER_HEADER_OFFSET = 9;\nexports.HEADER_OFFSET = 20;\n/**\n * Special location which allows easy identification of type. If we have an array which was\n * retrieved from the `LView` and that array has `true` at `TYPE` location, we know it is\n * `LContainer`.\n */\n\nexports.TYPE = 1;","\"use strict\";\n\nfunction __export(m) {\n  for (var p in m) {\n    if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n  }\n}\n\nexports.__esModule = true;\n\n__export(require(\"./graph\"));","import React from 'react';\nimport { FaRecycle, FaTree } from 'react-icons/fa';\n\nimport './Sidebar.css';\n\ninterface SidebarProps {\n\tonMenuItemSelected: (menuItem: string) => any;\n}\n\nexport class Sidebar extends React.Component<SidebarProps> {\n\tconstructor(props: SidebarProps) {\n\t\tsuper(props);\n\t\tthis.onMenuItemClick = this.onMenuItemClick.bind(this);\n\t}\n\n\tonMenuItemClick = (menuItem: string) => (e: any) => {\n\t\tthis.props.onMenuItemSelected(menuItem);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"sidebar\">\n\t\t\t\t<ol>\n\t\t\t\t\t<li className=\"header\">\n\t\t\t\t\t\t<span>Profiling</span>\n\t\t\t\t\t\t<ol>\n\t\t\t\t\t\t\t<li onClick={this.onMenuItemClick('entireTree')}>\n\t\t\t\t\t\t\t\t<FaTree className=\"logo\"></FaTree>\n\t\t\t\t\t\t\t\t<span>Entire Tree</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t<li onClick={this.onMenuItemClick('treePerCycle')}>\n\t\t\t\t\t\t\t\t<FaRecycle className=\"logo\"></FaRecycle>\n\t\t\t\t\t\t\t\t<span>Tree per cycle</span>\n\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t</ol>\n\t\t\t\t\t</li>\n\t\t\t\t</ol>\n\t\t\t</div>\n\t\t);\n\t}\n}\n","import React from 'react';\nimport './TreePerCycle.css';\nimport { UpdatedTreesStore } from '../../models/updated-tree';\nimport { observer } from 'mobx-react';\n\nexport interface TreePerCycleProps {\n\tstore: UpdatedTreesStore;\n}\n\nexport interface TreePerCycleState {\n\tselectedCycle: number;\n}\n\n\n@observer\nexport class TreePerCycle extends React.Component<TreePerCycleProps, TreePerCycleState> {\n\tconstructor(props: TreePerCycleProps) {\n\t\tsuper(props);\n\t\tthis.state = {selectedCycle: 0};\n\t}\n\n\t// treeSelected = (index: number) => (e: any) => {\n\t// \t// console.log('e', e, index);\n\t// \tthis.setState({selectedCycle: index});\n\t// };\n\n\trender() {\n\t\treturn <div>Coming soon...</div>;\n\t\t// const {updatedTrees} = this.props.store;\n\t\t// // on first render the svg is not yet added to the page\n\t\t// setTimeout(() => {\n\t\t// \tif (updatedTrees && updatedTrees.length > 0) {\n\t\t// \t\trenderTree('updatedTree', updatedTrees[this.state.selectedCycle]);\n\t\t// \t}\n\t\t// });\n\t\t//\n\t\t// const listItems = updatedTrees.map((tree, index) => {\n\t\t// \treturn <ListItem button key={index} onClick={this.treeSelected(index)}>\n\t\t// \t\t<ListItemText primary={'Cycle number' + index}/>\n\t\t// \t</ListItem>;\n\t\t// });\n\t\t// return (\n\t\t// \t<div className=\"container\">\n\t\t// \t\t<List component=\"nav\" aria-label=\"secondary mailbox folders\">\n\t\t// \t\t\t{listItems}\n\t\t// \t\t</List>\n\t\t// \t\t<svg id=\"updatedTree\" width=\"100%\" height=\"400px\">\n\t\t// \t\t\t<g/>\n\t\t// \t\t</svg>\n\t\t// \t</div>\n\t\t// );\n\t}\n}\n","import React from 'react';\nimport './EntireTree.css';\nimport { GraphRender, renderTree } from '@ng-devtools/lib';\nimport { EntireTreeStore } from '../../models/entire-tree';\nimport { observer } from 'mobx-react';\nimport { updatedTreesStore } from '../../models/updated-tree';\n\ninterface EntireTreeProps {\n\tstore: EntireTreeStore;\n}\n\n\n@observer\nexport class EntireTree extends React.Component<EntireTreeProps> {\n\ttreeGraph: GraphRender;\n\n\tconstructor(props: EntireTreeProps) {\n\t\tsuper(props)\n\t\tthis.treeGraph = new GraphRender('liveTree');\n\t}\n\n\trender() {\n\t\t// console.log('render triggered');\n\t\tconst {entireTree, instructions} = this.props.store;\n\t\tsetTimeout(() => {\n\t\t\t// console.log('triggered');\n\t\t\tthis.treeGraph.setUpdates(entireTree, instructions);\n\t\t});\n\t\tconst test = this.props.store.test;\n\t\treturn (\n\t\t\t<div className=\"entireTree\">\n\t\t\t\t<div className=\"chart-container\">\n\t\t\t\t\t<div className=\"chart\">\n\t\t\t\t\t\t<svg id=\"liveTree\" width=\"100%\" height=\"400px\">\n\t\t\t\t\t\t\t<g/>\n\t\t\t\t\t\t</svg>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\n// {/*<p>The entire component tree visualised. If a component is checked during a CD cycle, the component will light up. If this*/}\n// {/*happens again within a 250ms timeframe, the color will light up in a different color based on the legend.*/}\n// {/*<br/>*/}\n// {/*The graph can be zoomed and panned.*/}\n// {/*</p>*/}\n// {/*<div className=\"legend\">*/}\n// {/*<div className=\"legend-item\">*/}\n// {/*<div className=\"legend-box first\"></div>*/}\n// {/*<span>Color level 1</span>*/}\n// {/*</div>*/}\n// {/*<div className=\"legend-item\">*/}\n// {/*<div className=\"legend-box second\"></div>*/}\n// {/*<span>Color level 2</span>*/}\n// {/*</div>*/}\n// {/*<div className=\"legend-item\">*/}\n// {/*<div className=\"legend-box third\"></div>*/}\n// {/*<span>Color level 3</span>*/}\n// {/*</div>*/}\n// {/*<div className=\"legend-item\">*/}\n// {/*<div className=\"legend-box fourth\"></div>*/}\n// {/*<span>Color level 4</span>*/}\n// {/*</div>*/}\n// {/*<div className=\"legend-item\">*/}\n// {/*<div className=\"legend-box fifth\"></div>*/}\n// {/*<span>Color level 5</span>*/}\n// {/*</div>*/}\n// {/*<div className=\"legend-item\">*/}\n// {/*<div className=\"legend-box sixth\"></div>*/}\n// {/*<span>Color level 6</span>*/}\n// {/*</div>*/}\n// {/*<div className=\"legend-item\">*/}\n// {/*<div className=\"legend-box seventh\"></div>*/}\n// {/*<span>Color level 7</span>*/}\n// {/*</div>*/}\n// {/*</div>*/}\n","import React from 'react';\nimport { TreePerCycle } from '../tree-per-cycle/TreePerCycle';\nimport './AppContent.css';\nimport { UpdatedTreesStore } from '../../models/updated-tree';\nimport { EntireTreeStore } from '../../models/entire-tree';\nimport { EntireTree } from '../entire-tree/EntireTree';\nimport { observer } from 'mobx-react';\n\ninterface AppContentProps {\n\tmenuItem: string;\n\tstores: { updatedTreesStore: UpdatedTreesStore, entireTreeStore: EntireTreeStore };\n}\n\n\nexport const AppContent: React.FC<AppContentProps> = observer((props) => {\n\t// very first render, ask them to trigger a cd cycle\n\tif (!props.stores.entireTreeStore.entireTree) {\n\t\treturn <div>Please trigger a CD cycle :)</div>;\n\t}\n\tlet appContent;\n\tif (props.menuItem === 'entireTree') {\n\t\tappContent = <EntireTree store={props.stores.entireTreeStore}/>;\n\t}\n\tif (props.menuItem === 'treePerCycle') {\n\t\tappContent = <TreePerCycle store={props.stores.updatedTreesStore}/>;\n\t}\n\treturn (\n\t\t<div className=\"appContent\">\n\t\t\t{appContent}\n\t\t</div>\n\t);\n});\n","import React from 'react';\nimport './App.css';\n// import { NG_DEVTOOLS_INIT } from '@ng-devtools/plugin/src/constants';\nimport { SerializedTreeViewItem } from '@ng-devtools/lib';\nimport { entireTree } from './mock-data';\nimport { Sidebar } from './components/sidebar/Sidebar';\nimport { AppContent } from './components/app-content/AppContent';\nimport { UpdatedTreesStore } from './models/updated-tree';\nimport { EntireTreeStore } from './models/entire-tree';\n// import { NG_DEVTOOLS_INIT } from '@ng-devtools/plugin';\n\n// FIXME should come from the plugin package\nconst NG_DEVTOOLS_INIT = 'NG_DEVTOOLS_INIT';\ndeclare const chrome: any;\n\nexport interface AppProps {\n\tupdatedTreeStore: UpdatedTreesStore;\n\tentireTreeStore: EntireTreeStore;\n}\n\nexport interface AppState {\n\tmenuItem: string;\n\tlastEntireTree?: SerializedTreeViewItem;\n\tinstructions?: Object;\n}\n\nclass App extends React.Component<AppProps, AppState> {\n\t// magic variable needed until https://stackoverflow.com/questions/57231566/mobx-state-tree-doesnt-rerender-on-a-new-map-reference\n\tcount = 0;\n\n\tconstructor(props: AppProps) {\n\t\tsuper(props);\n\t\tthis.state = {menuItem: 'entireTree'};\n\t\tthis.menuItemSelected = this.menuItemSelected.bind(this);\n\t}\n\n\tcomponentWillMount(): void {\n\t\tthis.setupConnection();\n\t}\n\n\tmenuItemSelected(menuItem: string) {\n\t\tthis.setState({menuItem: menuItem});\n\t}\n\n\tsetupConnection() {\n\t\tconst backgroundPageConnection = chrome.runtime.connect();\n\t\tbackgroundPageConnection.onMessage.addListener(((message: { type: string, payload: any }) => {\n\t\t\t// console.log('received a message from background', message);\n\t\t\tswitch (message.type) {\n\t\t\t\tcase 'ENTIRE_TREE': {\n\t\t\t\t\t// console.log('received entire tree');\n\t\t\t\t\tthis.count++;\n\t\t\t\t\tthis.props.entireTreeStore.setTreeUpdate(message.payload.entireTree, message.payload.instructions, '' + this.count);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'UPDATED_TREE': {\n\t\t\t\t\tthis.props.updatedTreeStore.addUpdatedTree(message.payload.updatedTree);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tcase 'RESET_DATA': {\n\t\t\t\t\tthis.props.updatedTreeStore.clearData();\n\t\t\t\t\tthis.props.entireTreeStore.clearData();\n\t\t\t\t}\n\t\t\t}\n\t\t}));\n\n\t\t// console.log('Sending to INIT to the background');\n\t\tbackgroundPageConnection.postMessage({\n\t\t\ttype: NG_DEVTOOLS_INIT,\n\t\t\ttabId: chrome.devtools.inspectedWindow.tabId\n\t\t});\n\n\t}\n\n\trender() {\n\t\tconst stores = {updatedTreesStore: this.props.updatedTreeStore, entireTreeStore: this.props.entireTreeStore};\n\n\t\treturn <div className=\"App\">\n\t\t\t<Sidebar onMenuItemSelected={this.menuItemSelected}></Sidebar>\n\t\t\t<AppContent menuItem={this.state.menuItem} stores={stores}></AppContent>\n\t\t</div>;\n\t}\n}\n\n\nexport default App;\n\n\n// // this.setState({lastEntireTree: entireTree, instructions});\n// this.props.entireTreeStore.setTreeUpdate(entireTree, instructions, 'first');\n// this.props.updatedTreeStore.addUpdatedTree(updatedTree);\n// setTimeout(() => {\n// \t// console.log('changed');\n// \tthis.props.updatedTreeStore.addUpdatedTree(updatedTree2);\n// \tthis.props.entireTreeStore.setTreeUpdate(entireTree2, instructions2, 'second');\n// }, 4000);\n// // renderTree('updatedTree', updatedTree);\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n\twindow.location.hostname === 'localhost' ||\n\t\t// [::1] is the IPv6 localhost address.\n\t\twindow.location.hostname === '[::1]' ||\n\t\t// 127.0.0.1/8 is considered localhost for IPv4.\n\t\twindow.location.hostname.match(\n\t\t\t/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n\t\t)\n);\n\ntype Config = {\n\tonSuccess?: (registration: ServiceWorkerRegistration) => void;\n\tonUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n\tif (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n\t\t// The URL constructor is available in all browsers that support SW.\n\t\tconst publicUrl = new URL(\n\t\t\t(process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n\t\t\twindow.location.href\n\t\t);\n\t\tif (publicUrl.origin !== window.location.origin) {\n\t\t\t// Our service worker won't work if PUBLIC_URL is on a different origin\n\t\t\t// from what our page is served on. This might happen if a CDN is used to\n\t\t\t// serve assets; see https://github.com/facebook/create-react-app/issues/2374\n\t\t\treturn;\n\t\t}\n\n\t\t// window.addEventListener('load', () => {\n\t\t// \tconst swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\t\t//\n\t\t// \tif (isLocalhost) {\n\t\t// \t\t// This is running on localhost. Let's check if a service worker still exists or not.\n\t\t// \t\tcheckValidServiceWorker(swUrl, config);\n\t\t//\n\t\t// \t\t// Add some additional logging to localhost, pointing developers to the\n\t\t// \t\t// service worker/PWA documentation.\n\t\t// \t\tnavigator.serviceWorker.ready.then(() => {\n\t\t// \t\t\tconsole.log(\n\t\t// \t\t\t\t'This web app is being served cache-first by a service ' +\n\t\t// \t\t\t\t\t'worker. To learn more, visit https://bit.ly/CRA-PWA'\n\t\t// \t\t\t);\n\t\t// \t\t});\n\t\t// \t} else {\n\t\t// \t\t// Is not localhost. Just register service worker\n\t\t// \t\tregisterValidSW(swUrl, config);\n\t\t// \t}\n\t\t// });\n\t}\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n\tnavigator.serviceWorker\n\t\t.register(swUrl)\n\t\t.then(registration => {\n\t\t\tregistration.onupdatefound = () => {\n\t\t\t\tconst installingWorker = registration.installing;\n\t\t\t\tif (installingWorker == null) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tinstallingWorker.onstatechange = () => {\n\t\t\t\t\tif (installingWorker.state === 'installed') {\n\t\t\t\t\t\tif (navigator.serviceWorker.controller) {\n\t\t\t\t\t\t\t// At this point, the updated precached content has been fetched,\n\t\t\t\t\t\t\t// but the previous service worker will still serve the older\n\t\t\t\t\t\t\t// content until all client tabs are closed.\n\t\t\t\t\t\t\tconsole.log(\n\t\t\t\t\t\t\t\t'New content is available and will be used when all ' +\n\t\t\t\t\t\t\t\t\t'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n\t\t\t\t\t\t\t);\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onUpdate) {\n\t\t\t\t\t\t\t\tconfig.onUpdate(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t// At this point, everything has been precached.\n\t\t\t\t\t\t\t// It's the perfect time to display a\n\t\t\t\t\t\t\t// \"Content is cached for offline use.\" message.\n\t\t\t\t\t\t\t// console.log('Content is cached for offline use.');\n\n\t\t\t\t\t\t\t// Execute callback\n\t\t\t\t\t\t\tif (config && config.onSuccess) {\n\t\t\t\t\t\t\t\tconfig.onSuccess(registration);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t};\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.error('Error during service worker registration:', error);\n\t\t});\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n\t// Check if the service worker can be found. If it can't reload the page.\n\tfetch(swUrl)\n\t\t.then(response => {\n\t\t\t// Ensure service worker exists, and that we really are getting a JS file.\n\t\t\tconst contentType = response.headers.get('content-type');\n\t\t\tif (\n\t\t\t\tresponse.status === 404 ||\n\t\t\t\t(contentType != null && contentType.indexOf('javascript') === -1)\n\t\t\t) {\n\t\t\t\t// No service worker found. Probably a different app. Reload the page.\n\t\t\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\t\t\tregistration.unregister().then(() => {\n\t\t\t\t\t\twindow.location.reload();\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t} else {\n\t\t\t\t// Service worker found. Proceed as normal.\n\t\t\t\tregisterValidSW(swUrl, config);\n\t\t\t}\n\t\t})\n\t\t.catch(() => {\n\t\t\tconsole.log(\n\t\t\t\t'No internet connection found. App is running in offline mode.'\n\t\t\t);\n\t\t});\n}\n\nexport function unregister() {\n\tif ('serviceWorker' in navigator) {\n\t\tnavigator.serviceWorker.ready.then(registration => {\n\t\t\tregistration.unregister();\n\t\t});\n\t}\n}\n","import { Instance, types } from 'mobx-state-tree';\n\n// @ts-ignore\nexport const SerializedTreeViewItemModel = types\n\t.model({\n\t\tuuid: types.string,\n\t\tchildren: types.array(types.late(() => SerializedTreeViewItemModel)),\n\t\tonPush: types.boolean,\n\t\ttagName: types.string,\n\t});\n\nexport interface SerializedTreeViewItem extends Instance<typeof SerializedTreeViewItemModel> {\n}\n","import { Instance, types } from 'mobx-state-tree';\nimport { SerializedTreeViewItemModel } from './serialized-tree-view-item';\nimport { SerializedTreeViewItem } from '@ng-devtools/lib';\n\nexport const updatedTreesStore = types\n\t.model({\n\t\tupdatedTrees: types.array(SerializedTreeViewItemModel),\n\t})\n\t.actions(self => ({\n\t\taddUpdatedTree(updatedTree: SerializedTreeViewItem) {\n\t\t\tself.updatedTrees.push(updatedTree);\n\t\t},\n\t\tclearData() {\n\t\t\t// FIXME: why is the as any needed?\n\t\t\tself.updatedTrees = [] as any;\n\t\t}\n\t}));\n\nexport interface UpdatedTreesStore extends Instance<typeof updatedTreesStore> {\n}\n","import { Instance, types } from 'mobx-state-tree';\nimport { SerializedTreeViewItem, SerializedTreeViewItemModel } from './serialized-tree-view-item';\n\nexport const entireTreeStore = types\n\t.model({\n\t\tentireTree: types.maybe(SerializedTreeViewItemModel),\n\t\tinstructions: types.map(SerializedTreeViewItemModel),\n\t\ttest: ''\n\t})\n\t.actions(self => ({\n\t\t// TODO fix type\n\t\tsetTreeUpdate(entireTree: SerializedTreeViewItem, instructions: any, test: string) {\n\t\t\tself.instructions = instructions;\n\t\t\tself.entireTree = entireTree;\n\t\t\tself.test = test;\n\t\t},\n\t\tclearData() {\n\t\t\t// FIXME: why is the as any needed?\n\t\t\tself.instructions = new Map() as any;\n\t\t\tself.entireTree = undefined;\n\t\t\tself.test = '';\n\t\t}\n\t}));\n\nexport interface EntireTreeStore extends Instance<typeof entireTreeStore> {\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { updatedTreesStore } from './models/updated-tree';\nimport { entireTreeStore } from './models/entire-tree';\n\nconst updatedTrees = updatedTreesStore.create();\nconst entireTree = entireTreeStore.create();\n\nReactDOM.render(<App updatedTreeStore={updatedTrees} entireTreeStore={entireTree}/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","\"use strict\";\n\nexports.__esModule = true;\nexports.DEVTOOLS_IDENTIFIER = '__CD_PROFILER_ID__';\nexports.UPDATED_NODE_CLASS_NAME = 'node-updated';\nexports.NOT_UPDATED_NODE_CLASS_NAME = 'node-normal';\nexports.COLORS_CLASSES = ['node-updated-1', 'node-updated-2', 'node-updated-3', 'node-updated-4', 'node-updated-5', 'node-updated-6', 'node-updated-7']; // Outline color\n\nexports.OUTLINE_COLOR = '#f0f0f0'; // Color values used in showing how 'hot' a certain rect is\n\nexports.COLORS = [// coolest\n'#55cef6', '#55f67b', '#a5f655', '#f4f655', '#f6a555', '#f66855', // hottest\n'#ff0000'];\nexports.HOTTEST_COLOR = exports.COLORS[exports.COLORS.length - 1]; // Duration of the rect being added\n\nexports.DURATION = 250;","\"use strict\";\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nexports.__esModule = true;\n\nvar angular_core_1 = require(\"./types/angular_core\");\n\nfunction monkeyPatchFunction(obj, property, monkeyPatchFn) {\n  obj[property] = monkeyPatchFn;\n}\n\nexports.monkeyPatchFunction = monkeyPatchFunction;\n\nfunction getComponentViewByIndex(nodeIndex, hostView) {\n  // Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n  var slotValue = hostView[nodeIndex];\n  var lView = isLView(slotValue) ? slotValue : slotValue[angular_core_1.HOST];\n  return lView;\n}\n\nexports.getComponentViewByIndex = getComponentViewByIndex;\n\nfunction isLView(value) {\n  return Array.isArray(value) && typeof value[angular_core_1.TYPE] === 'object';\n}\n\nexports.isLView = isLView;\n\nfunction isLContainer(value) {\n  return Array.isArray(value) && value[angular_core_1.TYPE] === true;\n}\n\nexports.isLContainer = isLContainer;\n\nfunction readPatchedData(target) {\n  return target[angular_core_1.MONKEY_PATCH_KEY_NAME];\n}\n\nexports.readPatchedData = readPatchedData;\n\nfunction readPatchedLView(target) {\n  var value = readPatchedData(target);\n\n  if (value) {\n    return Array.isArray(value) ? value : value.lView;\n  }\n\n  return null;\n}\n\nexports.readPatchedLView = readPatchedLView;\n\nfunction isCreationMode(view) {\n  return (view[angular_core_1.FLAGS] & 4\n  /* CreationMode */\n  ) === 4\n  /* CreationMode */\n  ;\n}\n\nexports.isCreationMode = isCreationMode;\n\nfunction viewAttachedToChangeDetector(view) {\n  return (view[angular_core_1.FLAGS] & 128\n  /* Attached */\n  ) === 128\n  /* Attached */\n  ;\n}\n\nfunction shouldLViewBeChecked(lView) {\n  return (viewAttachedToChangeDetector(lView) || isCreationMode(lView)) && (lView[angular_core_1.FLAGS] & (16\n  /* CheckAlways */\n  | 64\n  /* Dirty */\n  )) === 0;\n}\n\nexports.shouldLViewBeChecked = shouldLViewBeChecked;\n\nfunction findAngularRootNode(node) {\n  if (!node || !node.childNodes) {\n    return;\n  }\n\n  var childNodes = node.childNodes;\n\n  for (var i = 0; i < childNodes.length; i++) {\n    var childNode = childNodes[i];\n\n    if (childNode[angular_core_1.MONKEY_PATCH_KEY_NAME]) {\n      return childNode[angular_core_1.MONKEY_PATCH_KEY_NAME];\n    } else {\n      var potentialRootNode = findAngularRootNode(childNode);\n\n      if (potentialRootNode) {\n        return potentialRootNode;\n      }\n    }\n  }\n}\n\nexports.findAngularRootNode = findAngularRootNode;\n\nfunction mapToObject(map) {\n  var e_1, _a;\n\n  var obj = {};\n\n  try {\n    for (var map_1 = __values(map), map_1_1 = map_1.next(); !map_1_1.done; map_1_1 = map_1.next()) {\n      var _b = __read(map_1_1.value, 2),\n          key = _b[0],\n          value = _b[1];\n\n      obj[key] = value;\n    }\n  } catch (e_1_1) {\n    e_1 = {\n      error: e_1_1\n    };\n  } finally {\n    try {\n      if (map_1_1 && !map_1_1.done && (_a = map_1[\"return\"])) _a.call(map_1);\n    } finally {\n      if (e_1) throw e_1.error;\n    }\n  }\n\n  return obj;\n}\n\nexports.mapToObject = mapToObject;","\"use strict\";\n\nexports.__esModule = true;\n\nvar angular_core_1 = require(\"./types/angular_core\");\n\nvar constants_1 = require(\"./constants\");\n\nvar TreeViewBuilder =\n/** @class */\nfunction () {\n  function TreeViewBuilder() {}\n\n  TreeViewBuilder.prototype.addTreeViewItem = function (childTreeViewItem, parentTreeViewItem) {\n    if (!parentTreeViewItem) {\n      this.rootTreeViewItem = childTreeViewItem;\n      this.currentTreeViewItem = this.rootTreeViewItem;\n    } else {\n      parentTreeViewItem.children.push(childTreeViewItem);\n      this.currentTreeViewItem = childTreeViewItem;\n    }\n  };\n\n  return TreeViewBuilder;\n}();\n\nexports.TreeViewBuilder = TreeViewBuilder;\n\nfunction serialiseTreeViewItem(treeViewItem) {\n  return {\n    uuid: treeViewItem.lView[angular_core_1.HOST][constants_1.DEVTOOLS_IDENTIFIER],\n    children: treeViewItem.children.map(function (loopTreeViewItem) {\n      return serialiseTreeViewItem(loopTreeViewItem);\n    }),\n    tagName: treeViewItem.lView[0].tagName,\n    onPush: (treeViewItem.lView[angular_core_1.FLAGS] & 16\n    /* CheckAlways */\n    ) === 0\n  };\n}\n\nexports.serialiseTreeViewItem = serialiseTreeViewItem;\n\nfunction createInitialTreeViewState(lView, isRoot, parent) {\n  return {\n    lView: lView,\n    currentIndex: 0,\n    children: [],\n    isRoot: isRoot,\n    parent: parent\n  };\n}\n\nexports.createInitialTreeViewState = createInitialTreeViewState;","\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __values = this && this.__values || function (o) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator],\n      i = 0;\n  if (m) return m.call(o);\n  return {\n    next: function next() {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n};\n\nvar __read = this && this.__read || function (o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) {\n      ar.push(r.value);\n    }\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n};\n\nexports.__esModule = true; // Duration of the rect being added\n\nvar DURATION = 250;\n\nvar UpdatePoolManager =\n/** @class */\nfunction () {\n  function UpdatePoolManager() {\n    this.pool = new Map();\n    this.drawing = false;\n  }\n\n  UpdatePoolManager.prototype.addAll = function (items) {\n    var e_1, _a;\n\n    try {\n      for (var _b = __values(items.entries ? items.entries() : Object.entries(items)), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = __read(_c.value, 2),\n            uuid = _d[0],\n            dataToAdd = _d[1]; // console.log('pool length', this.pool.size);\n\n\n        var data = void 0;\n\n        if (this.pool.has(uuid)) {\n          data = this.pool.get(uuid);\n        } else {\n          data = {\n            hit: 0,\n            tagName: dataToAdd.tagName,\n            data: dataToAdd\n          };\n        } // console.log(data);\n\n\n        data = __assign({}, data, {\n          expiration: Date.now() + DURATION,\n          hit: data.hit + 1\n        }); // console.log(data);\n\n        this.pool.set(uuid, data);\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b[\"return\"])) _a.call(_b);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    this.scheduleDraw();\n  };\n\n  UpdatePoolManager.prototype.add = function (uuid, tagName, dataToAdd) {\n    var data;\n\n    if (this.pool.has(uuid)) {\n      data = this.pool.get(uuid);\n    } else {\n      data = {\n        hit: 0,\n        tagName: tagName,\n        data: dataToAdd\n      };\n    }\n\n    data = __assign({}, data, {\n      expiration: Date.now() + DURATION,\n      hit: data.hit + 1\n    });\n    this.pool = this.pool.set(uuid, data);\n    this.scheduleDraw();\n  };\n\n  UpdatePoolManager.prototype.firstExpirationDate = function () {\n    var e_2, _a;\n\n    var now = Date.now();\n    var minExpiration = Number.MAX_VALUE; // Calculate the 'nearest' expiration date\n    // Remove all the ones that already expired\n\n    var temp = new Map();\n\n    try {\n      for (var _b = __values(this.pool.entries()), _c = _b.next(); !_c.done; _c = _b.next()) {\n        var _d = __read(_c.value, 2),\n            uuid = _d[0],\n            data = _d[1];\n\n        if (data.expiration > now) {\n          minExpiration = Math.min(data.expiration, minExpiration);\n          temp.set(uuid, data);\n        }\n      }\n    } catch (e_2_1) {\n      e_2 = {\n        error: e_2_1\n      };\n    } finally {\n      try {\n        if (_c && !_c.done && (_a = _b[\"return\"])) _a.call(_b);\n      } finally {\n        if (e_2) throw e_2.error;\n      }\n    }\n\n    this.pool = temp;\n    return minExpiration;\n  };\n\n  UpdatePoolManager.prototype.draw = function () {\n    var now = Date.now();\n    var minExpiration = this.firstExpirationDate();\n    this.drawImpl(this.pool);\n\n    if (this.pool.size > 0) {\n      if (this.clearTimer != null) {\n        clearTimeout(this.clearTimer);\n      }\n\n      this.clearTimer = setTimeout(this.redraw.bind(this), minExpiration - now);\n    }\n\n    this.drawing = false;\n  };\n\n  UpdatePoolManager.prototype.redraw = function () {\n    this.clearTimer = null;\n\n    if (!this.drawing && this.pool.size > 0) {\n      this.drawing = true;\n      this.draw();\n    }\n  };\n\n  UpdatePoolManager.prototype.scheduleDraw = function () {\n    // If we're already drawing, no use in setting a new event\n    if (this.drawing) {\n      return;\n    } // FIXME fix this shit\n\n\n    this.drawing = true; // Draw on the next animationFrame, use Zone to make sure it doesn't trigger a CD cycle in Angular\n    // if (Zone) {\n    //   Zone.root.run(() => {\n\n    requestAnimationFrame(this.draw.bind(this)); //   });\n    // } else {\n    // scheduleOutsideOfZone(() => requestAnimationFrame(this.draw.bind(this)));\n    // }\n  };\n\n  return UpdatePoolManager;\n}();\n\nexports.UpdatePoolManager = UpdatePoolManager;","\"use strict\";\n\nexports.__esModule = true;\n\nvar angular_core_1 = require(\"./types/angular_core\");\n\nvar util_1 = require(\"./util\");\n\nvar tree_view_builder_1 = require(\"./tree-view-builder\");\n\nvar uuid = require(\"uuid\");\n\nvar constants_1 = require(\"./constants\");\n\nfunction loopDynamicEmbeddedViews(_a) {\n  var lView = _a.lView,\n      work = _a.work,\n      nextCurrentLContainer = _a.nextCurrentLContainer,\n      nextViewRefIndex = _a.nextViewRefIndex,\n      _b = _a.exitLoopPrematurely,\n      exitLoopPrematurely = _b === void 0 ? false : _b;\n\n  for (var current = nextCurrentLContainer !== undefined ? nextCurrentLContainer : lView[angular_core_1.CHILD_HEAD]; current !== null; current = current[angular_core_1.NEXT]) {\n    if (current[angular_core_1.ACTIVE_INDEX] === -1 && util_1.isLContainer(current)) {\n      for (var i = nextViewRefIndex ? nextViewRefIndex : angular_core_1.CONTAINER_HEADER_OFFSET; i < current.length; i++) {\n        var dynamicViewData = current[i];\n        work(dynamicViewData, i >= current.length, i, current[angular_core_1.NEXT]);\n\n        if (exitLoopPrematurely) {\n          return true;\n        }\n      } // reset potential old pointers\n\n\n      nextViewRefIndex = undefined;\n    }\n  } // for (\n  // \tlet current: LContainer =\n  // \t\tnextCurrentLContainer !== undefined\n  // \t\t\t? nextCurrentLContainer\n  // \t\t\t: lView[CHILD_HEAD];\n  // \tcurrent !== null;\n  // \tcurrent = current[NEXT]\n  // ) {\n  // \tif (current.length < HEADER_OFFSET && current[ACTIVE_INDEX] === -1) {\n  // \t\tfor (\n  // \t\t\tlet i = nextViewRefIndex ? nextViewRefIndex : 0;\n  // \t\t\ti < current[VIEW_REFS].length;\n  // \t\t\ti++\n  // \t\t) {\n  // \t\t\tconst dynamicViewData = current[VIEW_REFS][i];\n  // \t\t\twork(\n  // \t\t\t\tdynamicViewData,\n  // \t\t\t\ti === current[VIEW_REFS].length - 1,\n  // \t\t\t\ti,\n  // \t\t\t\tcurrent[NEXT]\n  // \t\t\t);\n  // \t\t\tif (exitLoopPrematurely) {\n  // \t\t\t\treturn true;\n  // \t\t\t}\n  // \t\t}\n  // \t}\n  // }\n\n\n  return false;\n}\n\nexports.loopDynamicEmbeddedViews = loopDynamicEmbeddedViews;\n\nfunction loopChildComponents(_a) {\n  var lView = _a.lView,\n      work = _a.work,\n      exitLoopPrematurely = _a.exitLoopPrematurely;\n  var tView = lView[angular_core_1.TVIEW];\n\n  if (tView.components != null) {\n    for (var i = 0; i < tView.components.length; i++) {\n      var childLView = util_1.getComponentViewByIndex(tView.components[i], lView);\n      work(childLView);\n\n      if (exitLoopPrematurely) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n}\n\nexports.loopChildComponents = loopChildComponents;\n\nfunction traverseTreeAndCreateTreeStructure(rootLView, isRoot) {\n  var addElement = function addElement(treeViewItem, parentTreeViewItem) {\n    return parentTreeViewItem.children.push(treeViewItem);\n  };\n\n  return traverseTreeToStructure(addElement)(rootLView, isRoot);\n}\n\nexports.traverseTreeAndCreateTreeStructure = traverseTreeAndCreateTreeStructure;\n\nfunction traverseTreeAndCreateInstructions(rootLView, isRoot) {\n  var instructions = [];\n\n  var addElement = function addElement(treeViewItem) {\n    return instructions.push(treeViewItem);\n  };\n\n  return traverseTreeToStructure(addElement, instructions)(rootLView, isRoot);\n}\n\nexports.traverseTreeAndCreateInstructions = traverseTreeAndCreateInstructions;\n\nvar traverseTreeToStructure = function traverseTreeToStructure(addElement, accumulator) {\n  return function traverseTree(lView, isRoot, parentTreeViewItem) {\n    var treeViewItem = tree_view_builder_1.createInitialTreeViewState(lView, isRoot, parentTreeViewItem); // Only when the lView has a host element do we want to add it, otherwise it's a dynamicEmbeddedView\n\n    if (lView[angular_core_1.HOST] && !isRoot) {\n      // If there is a parentTreeViewItem, it means that the currentTreeViewItem was a dynamic one, so we add it to the parent\n      addElement(treeViewItem, parentTreeViewItem);\n    }\n\n    var whenDynamicEmbeddedViewFound = function whenDynamicEmbeddedViewFound(dynamicLView) {\n      traverseTree(dynamicLView, false, treeViewItem.lView[angular_core_1.HOST] ? treeViewItem : parentTreeViewItem);\n    };\n\n    loopDynamicEmbeddedViews({\n      lView: lView,\n      work: whenDynamicEmbeddedViewFound\n    });\n\n    var whenChildComponentFound = function whenChildComponentFound(childLView) {\n      if (!childLView[angular_core_1.HOST][constants_1.DEVTOOLS_IDENTIFIER]) {\n        childLView[angular_core_1.HOST][constants_1.DEVTOOLS_IDENTIFIER] = uuid();\n      }\n\n      traverseTree(childLView, false, treeViewItem.lView[angular_core_1.HOST] ? treeViewItem : parentTreeViewItem);\n    };\n\n    loopChildComponents({\n      lView: lView,\n      work: whenChildComponentFound\n    });\n\n    if (isRoot) {\n      return accumulator ? accumulator : treeViewItem;\n    }\n  };\n};\n\nfunction transformTreeToInstructions(inputTreeViewItem) {\n  var instructions = new Map();\n\n  var walkTree = function walkTree(treeViewItem) {\n    instructions.set(treeViewItem.uuid, treeViewItem);\n    treeViewItem.children.forEach(function (childTreeViewItem) {\n      return walkTree(childTreeViewItem);\n    });\n  };\n\n  walkTree(inputTreeViewItem);\n  return instructions;\n}\n\nexports.transformTreeToInstructions = transformTreeToInstructions; // Because of dynamicEmbeddedViews and because we need to be able to walk the tree, some elements are added as parents which aren't\n// components, we need to filter those out\n\nfunction getRealParent(treeViewItem) {\n  if (treeViewItem.lView[angular_core_1.HOST]) {\n    return treeViewItem;\n  } else {\n    return getRealParent(treeViewItem.parent);\n  }\n}\n\nexports.getRealParent = getRealParent;"],"sourceRoot":""}