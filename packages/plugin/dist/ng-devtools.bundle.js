!function(t){var n={};function e(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return t[r].call(i.exports,i,i.exports,e),i.l=!0,i.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var i in t)e.d(r,i,function(n){return t[n]}.bind(null,i));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=154)}([function(t,n,e){"use strict";e.r(n);var r="http://www.w3.org/1999/xhtml",i={svg:"http://www.w3.org/2000/svg",xhtml:r,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},o=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),i.hasOwnProperty(n)?{space:i[n],local:t}:t};var u=function(t){var n=o(t);return(n.local?function(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}:function(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===r&&n.documentElement.namespaceURI===r?n.createElement(t):n.createElementNS(e,t)}})(n)};function a(){}var c=function(t){return null==t?a:function(){return this.querySelector(t)}};function f(){return[]}var s=function(t){return null==t?f:function(){return this.querySelectorAll(t)}},l=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var h=document.documentElement;if(!h.matches){var d=h.webkitMatchesSelector||h.msMatchesSelector||h.mozMatchesSelector||h.oMatchesSelector;l=function(t){return function(){return d.call(this,t)}}}}var p=l,v=function(t){return new Array(t.length)};function g(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}g.prototype={constructor:g,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var y="$";function _(t,n,e,r,i,o){for(var u,a=0,c=n.length,f=o.length;a<f;++a)(u=n[a])?(u.__data__=o[a],r[a]=u):e[a]=new g(t,o[a]);for(;a<c;++a)(u=n[a])&&(i[a]=u)}function m(t,n,e,r,i,o,u){var a,c,f,s={},l=n.length,h=o.length,d=new Array(l);for(a=0;a<l;++a)(c=n[a])&&(d[a]=f=y+u.call(c,c.__data__,a,n),f in s?i[a]=c:s[f]=c);for(a=0;a<h;++a)(c=s[f=y+u.call(t,o[a],a,o)])?(r[a]=c,c.__data__=o[a],s[f]=null):e[a]=new g(t,o[a]);for(a=0;a<l;++a)(c=n[a])&&s[d[a]]===c&&(i[a]=c)}function x(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function b(t){return function(){this.removeAttribute(t)}}function w(t){return function(){this.removeAttributeNS(t.space,t.local)}}function M(t,n){return function(){this.setAttribute(t,n)}}function E(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function T(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function k(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}var N=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView};function S(t){return function(){this.style.removeProperty(t)}}function A(t,n,e){return function(){this.style.setProperty(t,n,e)}}function O(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function C(t,n){return t.style.getPropertyValue(n)||N(t).getComputedStyle(t,null).getPropertyValue(n)}function j(t){return function(){delete this[t]}}function I(t,n){return function(){this[t]=n}}function P(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function L(t){return t.trim().split(/^|\s+/)}function R(t){return t.classList||new z(t)}function z(t){this._node=t,this._names=L(t.getAttribute("class")||"")}function D(t,n){for(var e=R(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function V(t,n){for(var e=R(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function U(t){return function(){D(this,t)}}function F(t){return function(){V(this,t)}}function q(t,n){return function(){(n.apply(this,arguments)?D:V)(this,t)}}z.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};function B(){this.textContent=""}function Y(t){return function(){this.textContent=t}}function H(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function X(){this.innerHTML=""}function W(t){return function(){this.innerHTML=t}}function G(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function $(){this.nextSibling&&this.parentNode.appendChild(this)}function Z(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function Q(){return null}function K(){var t=this.parentNode;t&&t.removeChild(this)}function J(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function tt(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var nt={},et=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(nt={mouseenter:"mouseover",mouseleave:"mouseout"}));function rt(t,n,e){return t=it(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function it(t,n,e){return function(r){var i=et;et=r;try{t.call(this,this.__data__,n,e)}finally{et=i}}}function ot(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}function ut(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function at(t,n,e){var r=nt.hasOwnProperty(t.type)?rt:it;return function(i,o,u){var a,c=this.__on,f=r(n,o,u);if(c)for(var s=0,l=c.length;s<l;++s)if((a=c[s]).type===t.type&&a.name===t.name)return this.removeEventListener(a.type,a.listener,a.capture),this.addEventListener(a.type,a.listener=f,a.capture=e),void(a.value=n);this.addEventListener(t.type,f,e),a={type:t.type,name:t.name,value:n,listener:f,capture:e},c?c.push(a):this.__on=[a]}}function ct(t,n,e,r){var i=et;t.sourceEvent=et,et=t;try{return n.apply(e,r)}finally{et=i}}function ft(t,n,e){var r=N(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}var st=[null];function lt(t,n){this._groups=t,this._parents=n}function ht(){return new lt([[document.documentElement]],st)}lt.prototype=ht.prototype={constructor:lt,select:function(t){"function"!=typeof t&&(t=c(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u,a=n[i],f=a.length,s=r[i]=new Array(f),l=0;l<f;++l)(o=a[l])&&(u=t.call(o,o.__data__,l,a))&&("__data__"in o&&(u.__data__=o.__data__),s[l]=u);return new lt(r,this._parents)},selectAll:function(t){"function"!=typeof t&&(t=s(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var u,a=n[o],c=a.length,f=0;f<c;++f)(u=a[f])&&(r.push(t.call(u,u.__data__,f,a)),i.push(u));return new lt(r,i)},filter:function(t){"function"!=typeof t&&(t=p(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,u=n[i],a=u.length,c=r[i]=[],f=0;f<a;++f)(o=u[f])&&t.call(o,o.__data__,f,u)&&c.push(o);return new lt(r,this._parents)},data:function(t,n){if(!t)return p=new Array(this.size()),s=-1,this.each(function(t){p[++s]=t}),p;var e,r=n?m:_,i=this._parents,o=this._groups;"function"!=typeof t&&(e=t,t=function(){return e});for(var u=o.length,a=new Array(u),c=new Array(u),f=new Array(u),s=0;s<u;++s){var l=i[s],h=o[s],d=h.length,p=t.call(l,l&&l.__data__,s,i),v=p.length,g=c[s]=new Array(v),y=a[s]=new Array(v);r(l,h,g,y,f[s]=new Array(d),p,n);for(var x,b,w=0,M=0;w<v;++w)if(x=g[w]){for(w>=M&&(M=w+1);!(b=y[M])&&++M<v;);x._next=b||null}}return(a=new lt(a,i))._enter=c,a._exit=f,a},enter:function(){return new lt(this._enter||this._groups.map(v),this._parents)},exit:function(){return new lt(this._exit||this._groups.map(v),this._parents)},merge:function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,f=n[a],s=e[a],l=f.length,h=u[a]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;a<r;++a)u[a]=n[a];return new lt(u,this._parents)},order:function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,u=i[o];--o>=0;)(r=i[o])&&(u&&u!==r.nextSibling&&u.parentNode.insertBefore(r,u),u=r);return this},sort:function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=x);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var u,a=e[o],c=a.length,f=i[o]=new Array(c),s=0;s<c;++s)(u=a[s])&&(f[s]=u);f.sort(n)}return new lt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},node:function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var u=r[i];if(u)return u}return null},size:function(){var t=0;return this.each(function(){++t}),t},empty:function(){return!this.node()},each:function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],u=0,a=o.length;u<a;++u)(i=o[u])&&t.call(i,i.__data__,u,o);return this},attr:function(t,n){var e=o(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?w:b:"function"==typeof n?e.local?k:T:e.local?E:M)(e,n))},style:function(t,n,e){return arguments.length>1?this.each((null==n?S:"function"==typeof n?O:A)(t,n,null==e?"":e)):C(this.node(),t)},property:function(t,n){return arguments.length>1?this.each((null==n?j:"function"==typeof n?P:I)(t,n)):this.node()[t]},classed:function(t,n){var e=L(t+"");if(arguments.length<2){for(var r=R(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?q:n?U:F)(e,n))},text:function(t){return arguments.length?this.each(null==t?B:("function"==typeof t?H:Y)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?X:("function"==typeof t?G:W)(t)):this.node().innerHTML},raise:function(){return this.each($)},lower:function(){return this.each(Z)},append:function(t){var n="function"==typeof t?t:u(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},insert:function(t,n){var e="function"==typeof t?t:u(t),r=null==n?Q:"function"==typeof n?n:c(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(K)},clone:function(t){return this.select(t?tt:J)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,n,e){var r,i,o=ot(t+""),u=o.length;if(!(arguments.length<2)){for(a=n?at:ut,null==e&&(e=!1),r=0;r<u;++r)this.each(a(o[r],n,e));return this}var a=this.node().__on;if(a)for(var c,f=0,s=a.length;f<s;++f)for(r=0,c=a[f];r<u;++r)if((i=o[r]).type===c.type&&i.name===c.name)return c.value},dispatch:function(t,n){return this.each(("function"==typeof n?function(t,n){return function(){return ft(this,t,n.apply(this,arguments))}}:function(t,n){return function(){return ft(this,t,n)}})(t,n))}};var dt=ht,pt=function(t){return"string"==typeof t?new lt([[document.querySelector(t)]],[document.documentElement]):new lt([[t]],st)},vt=function(t){return pt(u(t).call(document.documentElement))},gt=0;function yt(){return new _t}function _t(){this._="@"+(++gt).toString(36)}_t.prototype=yt.prototype={constructor:_t,get:function(t){for(var n=this._;!(n in t);)if(!(t=t.parentNode))return;return t[n]},set:function(t,n){return t[this._]=n},remove:function(t){return this._ in t&&delete t[this._]},toString:function(){return this._}};var mt=function(){for(var t,n=et;t=n.sourceEvent;)n=t;return n},xt=function(t,n){var e=t.ownerSVGElement||t;if(e.createSVGPoint){var r=e.createSVGPoint();return r.x=n.clientX,r.y=n.clientY,[(r=r.matrixTransform(t.getScreenCTM().inverse())).x,r.y]}var i=t.getBoundingClientRect();return[n.clientX-i.left-t.clientLeft,n.clientY-i.top-t.clientTop]},bt=function(t){var n=mt();return n.changedTouches&&(n=n.changedTouches[0]),xt(t,n)},wt=function(t){return"string"==typeof t?new lt([document.querySelectorAll(t)],[document.documentElement]):new lt([null==t?[]:t],st)},Mt=function(t,n,e){arguments.length<3&&(e=n,n=mt().changedTouches);for(var r,i=0,o=n?n.length:0;i<o;++i)if((r=n[i]).identifier===e)return xt(t,r);return null},Et=function(t,n){null==n&&(n=mt().touches);for(var e=0,r=n?n.length:0,i=new Array(r);e<r;++e)i[e]=xt(t,n[e]);return i};e.d(n,"create",function(){return vt}),e.d(n,"creator",function(){return u}),e.d(n,"local",function(){return yt}),e.d(n,"matcher",function(){return p}),e.d(n,"mouse",function(){return bt}),e.d(n,"namespace",function(){return o}),e.d(n,"namespaces",function(){return i}),e.d(n,"clientPoint",function(){return xt}),e.d(n,"select",function(){return pt}),e.d(n,"selectAll",function(){return wt}),e.d(n,"selection",function(){return dt}),e.d(n,"selector",function(){return c}),e.d(n,"selectorAll",function(){return s}),e.d(n,"style",function(){return C}),e.d(n,"touch",function(){return Mt}),e.d(n,"touches",function(){return Et}),e.d(n,"window",function(){return N}),e.d(n,"event",function(){return et}),e.d(n,"customEvent",function(){return ct})},function(t,n,e){"use strict";var r=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t};function i(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function o(){}var u="\\s*([+-]?\\d+)\\s*",a="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",c="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",f=/^#([0-9a-f]{3})$/,s=/^#([0-9a-f]{6})$/,l=new RegExp("^rgb\\("+[u,u,u]+"\\)$"),h=new RegExp("^rgb\\("+[c,c,c]+"\\)$"),d=new RegExp("^rgba\\("+[u,u,u,a]+"\\)$"),p=new RegExp("^rgba\\("+[c,c,c,a]+"\\)$"),v=new RegExp("^hsl\\("+[a,c,c]+"\\)$"),g=new RegExp("^hsla\\("+[a,c,c,a]+"\\)$"),y={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function _(t){var n;return t=(t+"").trim().toLowerCase(),(n=f.exec(t))?new M((n=parseInt(n[1],16))>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1):(n=s.exec(t))?m(parseInt(n[1],16)):(n=l.exec(t))?new M(n[1],n[2],n[3],1):(n=h.exec(t))?new M(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=d.exec(t))?x(n[1],n[2],n[3],n[4]):(n=p.exec(t))?x(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=v.exec(t))?E(n[1],n[2]/100,n[3]/100,1):(n=g.exec(t))?E(n[1],n[2]/100,n[3]/100,n[4]):y.hasOwnProperty(t)?m(y[t]):"transparent"===t?new M(NaN,NaN,NaN,0):null}function m(t){return new M(t>>16&255,t>>8&255,255&t,1)}function x(t,n,e,r){return r<=0&&(t=n=e=NaN),new M(t,n,e,r)}function b(t){return t instanceof o||(t=_(t)),t?new M((t=t.rgb()).r,t.g,t.b,t.opacity):new M}function w(t,n,e,r){return 1===arguments.length?b(t):new M(t,n,e,null==r?1:r)}function M(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function E(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new k(t,n,e,r)}function T(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof k)return new k(t.h,t.s,t.l,t.opacity);if(t instanceof o||(t=_(t)),!t)return new k;if(t instanceof k)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),u=Math.max(n,e,r),a=NaN,c=u-i,f=(u+i)/2;return c?(a=n===u?(e-r)/c+6*(e<r):e===u?(r-n)/c+2:(n-e)/c+4,c/=f<.5?u+i:2-u-i,a*=60):c=f>0&&f<1?0:a,new k(a,c,f,t.opacity)}(t):new k(t,n,e,null==r?1:r)}function k(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function N(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}r(o,_,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),r(M,w,i(o,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new M(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new M(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var t=this.opacity;return(1===(t=isNaN(t)?1:Math.max(0,Math.min(1,t)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),r(k,T,i(o,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new k(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new k(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new M(N(t>=240?t-240:t+120,i,r),N(t,i,r),N(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var S=Math.PI/180,A=180/Math.PI,O=.95047,C=1,j=1.08883,I=4/29,P=6/29,L=3*P*P,R=P*P*P;function z(t){if(t instanceof V)return new V(t.l,t.a,t.b,t.opacity);if(t instanceof H){var n=t.h*S;return new V(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof M||(t=b(t));var e=B(t.r),r=B(t.g),i=B(t.b),o=U((.4124564*e+.3575761*r+.1804375*i)/O),u=U((.2126729*e+.7151522*r+.072175*i)/C);return new V(116*u-16,500*(o-u),200*(u-U((.0193339*e+.119192*r+.9503041*i)/j)),t.opacity)}function D(t,n,e,r){return 1===arguments.length?z(t):new V(t,n,e,null==r?1:r)}function V(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function U(t){return t>R?Math.pow(t,1/3):t/L+I}function F(t){return t>P?t*t*t:L*(t-I)}function q(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function B(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Y(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof H)return new H(t.h,t.c,t.l,t.opacity);t instanceof V||(t=z(t));var n=Math.atan2(t.b,t.a)*A;return new H(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}(t):new H(t,n,e,null==r?1:r)}function H(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}r(V,D,i(o,{brighter:function(t){return new V(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new V(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return t=C*F(t),new M(q(3.2404542*(n=O*F(n))-1.5371385*t-.4985314*(e=j*F(e))),q(-.969266*n+1.8760108*t+.041556*e),q(.0556434*n-.2040259*t+1.0572252*e),this.opacity)}})),r(H,Y,i(o,{brighter:function(t){return new H(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new H(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return z(this).rgb()}}));var X=-.14861,W=1.78277,G=-.29227,$=-.90649,Z=1.97294,Q=Z*$,K=Z*W,J=W*G-$*X;function tt(t,n,e,r){return 1===arguments.length?function(t){if(t instanceof nt)return new nt(t.h,t.s,t.l,t.opacity);t instanceof M||(t=b(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(J*r+Q*n-K*e)/(J+Q-K),o=r-i,u=(Z*(e-i)-G*o)/$,a=Math.sqrt(u*u+o*o)/(Z*i*(1-i)),c=a?Math.atan2(u,o)*A-120:NaN;return new nt(c<0?c+360:c,a,i,t.opacity)}(t):new nt(t,n,e,null==r?1:r)}function nt(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}r(nt,tt,i(o,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new nt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new nt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*S,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new M(255*(n+e*(X*r+W*i)),255*(n+e*(G*r+$*i)),255*(n+e*(Z*r)),this.opacity)}})),e.d(n,"a",function(){return _}),e.d(n,"f",function(){return w}),e.d(n,"d",function(){return T}),e.d(n,"e",function(){return D}),e.d(n,"c",function(){return Y}),e.d(n,"b",function(){return tt})},function(t,n,e){"use strict";var r=e(1);function i(t,n,e,r,i){var o=t*t,u=o*t;return((1-3*t+3*o-u)*n+(4-6*o+3*u)*e+(1+3*t+3*o-3*u)*r+u*i)/6}var o=function(t){var n=t.length-1;return function(e){var r=e<=0?e=0:e>=1?(e=1,n-1):Math.floor(e*n),o=t[r],u=t[r+1],a=r>0?t[r-1]:2*o-u,c=r<n-1?t[r+2]:2*u-o;return i((e-r/n)*n,a,o,u,c)}},u=function(t){var n=t.length;return function(e){var r=Math.floor(((e%=1)<0?++e:e)*n),o=t[(r+n-1)%n],u=t[r%n],a=t[(r+1)%n],c=t[(r+2)%n];return i((e-r/n)*n,o,u,a,c)}},a=function(t){return function(){return t}};function c(t,n){return function(e){return t+e*n}}function f(t,n){var e=n-t;return e?c(t,e>180||e<-180?e-360*Math.round(e/360):e):a(isNaN(t)?n:t)}function s(t){return 1==(t=+t)?l:function(n,e){return e-n?function(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}(n,e,t):a(isNaN(n)?e:n)}}function l(t,n){var e=n-t;return e?c(t,e):a(isNaN(t)?n:t)}var h=function t(n){var e=s(n);function i(t,n){var i=e((t=Object(r.f)(t)).r,(n=Object(r.f)(n)).r),o=e(t.g,n.g),u=e(t.b,n.b),a=l(t.opacity,n.opacity);return function(n){return t.r=i(n),t.g=o(n),t.b=u(n),t.opacity=a(n),t+""}}return i.gamma=t,i}(1);function d(t){return function(n){var e,i,o=n.length,u=new Array(o),a=new Array(o),c=new Array(o);for(e=0;e<o;++e)i=Object(r.f)(n[e]),u[e]=i.r||0,a[e]=i.g||0,c[e]=i.b||0;return u=t(u),a=t(a),c=t(c),i.opacity=1,function(t){return i.r=u(t),i.g=a(t),i.b=c(t),i+""}}}var p=d(o),v=d(u),g=function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),u=new Array(r);for(e=0;e<i;++e)o[e]=N(t[e],n[e]);for(;e<r;++e)u[e]=n[e];return function(t){for(e=0;e<i;++e)u[e]=o[e](t);return u}},y=function(t,n){var e=new Date;return n-=t=+t,function(r){return e.setTime(t+n*r),e}},_=function(t,n){return n-=t=+t,function(e){return t+n*e}},m=function(t,n){var e,r={},i={};for(e in null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={}),n)e in t?r[e]=N(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},x=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,b=new RegExp(x.source,"g");var w,M,E,T,k=function(t,n){var e,r,i,o=x.lastIndex=b.lastIndex=0,u=-1,a=[],c=[];for(t+="",n+="";(e=x.exec(t))&&(r=b.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),a[u]?a[u]+=i:a[++u]=i),(e=e[0])===(r=r[0])?a[u]?a[u]+=r:a[++u]=r:(a[++u]=null,c.push({i:u,x:_(e,r)})),o=b.lastIndex;return o<n.length&&(i=n.slice(o),a[u]?a[u]+=i:a[++u]=i),a.length<2?c[0]?function(t){return function(n){return t(n)+""}}(c[0].x):function(t){return function(){return t}}(n):(n=c.length,function(t){for(var e,r=0;r<n;++r)a[(e=c[r]).i]=e.x(t);return a.join("")})},N=function(t,n){var e,i=typeof n;return null==n||"boolean"===i?a(n):("number"===i?_:"string"===i?(e=Object(r.a)(n))?(n=e,h):k:n instanceof r.a?h:n instanceof Date?y:Array.isArray(n)?g:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?m:_)(t,n)},S=function(t,n){return n-=t=+t,function(e){return Math.round(t+n*e)}},A=180/Math.PI,O={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},C=function(t,n,e,r,i,o){var u,a,c;return(u=Math.sqrt(t*t+n*n))&&(t/=u,n/=u),(c=t*e+n*r)&&(e-=t*c,r-=n*c),(a=Math.sqrt(e*e+r*r))&&(e/=a,r/=a,c/=a),t*r<n*e&&(t=-t,n=-n,c=-c,u=-u),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*A,skewX:Math.atan(c)*A,scaleX:u,scaleY:a}};function j(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}return function(o,u){var a=[],c=[];return o=t(o),u=t(u),function(t,r,i,o,u,a){if(t!==i||r!==o){var c=u.push("translate(",null,n,null,e);a.push({i:c-4,x:_(t,i)},{i:c-2,x:_(r,o)})}else(i||o)&&u.push("translate("+i+n+o+e)}(o.translateX,o.translateY,u.translateX,u.translateY,a,c),function(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:_(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}(o.rotate,u.rotate,a,c),function(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:_(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}(o.skewX,u.skewX,a,c),function(t,n,e,r,o,u){if(t!==e||n!==r){var a=o.push(i(o)+"scale(",null,",",null,")");u.push({i:a-4,x:_(t,e)},{i:a-2,x:_(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}(o.scaleX,o.scaleY,u.scaleX,u.scaleY,a,c),o=u=null,function(t){for(var n,e=-1,r=c.length;++e<r;)a[(n=c[e]).i]=n.x(t);return a.join("")}}}var I=j(function(t){return"none"===t?O:(w||(w=document.createElement("DIV"),M=document.documentElement,E=document.defaultView),w.style.transform=t,t=E.getComputedStyle(M.appendChild(w),null).getPropertyValue("transform"),M.removeChild(w),t=t.slice(7,-1).split(","),C(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))},"px, ","px)","deg)"),P=j(function(t){return null==t?O:(T||(T=document.createElementNS("http://www.w3.org/2000/svg","g")),T.setAttribute("transform",t),(t=T.transform.baseVal.consolidate())?(t=t.matrix,C(t.a,t.b,t.c,t.d,t.e,t.f)):O)},", ",")",")"),L=Math.SQRT2;function R(t){return((t=Math.exp(t))+1/t)/2}var z=function(t,n){var e,r,i=t[0],o=t[1],u=t[2],a=n[0],c=n[1],f=n[2],s=a-i,l=c-o,h=s*s+l*l;if(h<1e-12)r=Math.log(f/u)/L,e=function(t){return[i+t*s,o+t*l,u*Math.exp(L*t*r)]};else{var d=Math.sqrt(h),p=(f*f-u*u+4*h)/(2*u*2*d),v=(f*f-u*u-4*h)/(2*f*2*d),g=Math.log(Math.sqrt(p*p+1)-p),y=Math.log(Math.sqrt(v*v+1)-v);r=(y-g)/L,e=function(t){var n,e=t*r,a=R(g),c=u/(2*d)*(a*(n=L*e+g,((n=Math.exp(2*n))-1)/(n+1))-function(t){return((t=Math.exp(t))-1/t)/2}(g));return[i+c*s,o+c*l,u*a/R(L*e+g)]}}return e.duration=1e3*r,e};function D(t){return function(n,e){var i=t((n=Object(r.d)(n)).h,(e=Object(r.d)(e)).h),o=l(n.s,e.s),u=l(n.l,e.l),a=l(n.opacity,e.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=u(t),n.opacity=a(t),n+""}}}var V=D(f),U=D(l);function F(t,n){var e=l((t=Object(r.e)(t)).l,(n=Object(r.e)(n)).l),i=l(t.a,n.a),o=l(t.b,n.b),u=l(t.opacity,n.opacity);return function(n){return t.l=e(n),t.a=i(n),t.b=o(n),t.opacity=u(n),t+""}}function q(t){return function(n,e){var i=t((n=Object(r.c)(n)).h,(e=Object(r.c)(e)).h),o=l(n.c,e.c),u=l(n.l,e.l),a=l(n.opacity,e.opacity);return function(t){return n.h=i(t),n.c=o(t),n.l=u(t),n.opacity=a(t),n+""}}}var B=q(f),Y=q(l);function H(t){return function n(e){function i(n,i){var o=t((n=Object(r.b)(n)).h,(i=Object(r.b)(i)).h),u=l(n.s,i.s),a=l(n.l,i.l),c=l(n.opacity,i.opacity);return function(t){return n.h=o(t),n.s=u(t),n.l=a(Math.pow(t,e)),n.opacity=c(t),n+""}}return e=+e,i.gamma=n,i}(1)}var X=H(f),W=H(l),G=function(t,n){for(var e=new Array(n),r=0;r<n;++r)e[r]=t(r/(n-1));return e};e.d(n,"a",function(){return N}),e.d(n,"b",function(){return g}),e.d(n,"c",function(){return o}),e.d(n,"d",function(){return u}),e.d(n,"g",function(){return y}),e.d(n,"m",function(){return _}),e.d(n,"n",function(){return m}),e.d(n,"r",function(){return S}),e.d(n,"s",function(){return k}),e.d(n,"t",function(){return I}),e.d(n,"u",function(){return P}),e.d(n,"v",function(){return z}),e.d(n,"o",function(){return h}),e.d(n,"p",function(){return p}),e.d(n,"q",function(){return v}),e.d(n,"j",function(){return V}),e.d(n,"k",function(){return U}),e.d(n,"l",function(){return F}),e.d(n,"h",function(){return B}),e.d(n,"i",function(){return Y}),e.d(n,"e",function(){return X}),e.d(n,"f",function(){return W}),e.d(n,"w",function(){return G})},function(t,n,e){var r;try{r={cloneDeep:e(279),constant:e(69),defaults:e(135),each:e(70),filter:e(109),find:e(280),flatten:e(137),forEach:e(107),forIn:e(285),has:e(76),isUndefined:e(120),last:e(286),map:e(121),mapValues:e(287),max:e(288),merge:e(290),min:e(295),minBy:e(296),now:e(297),pick:e(142),range:e(143),reduce:e(123),sortBy:e(304),uniqueId:e(144),values:e(128),zipObject:e(309)}}catch(t){}r||(r=window._),t.exports=r},function(t,n){var e=Array.isArray;t.exports=e},function(t,n,e){"use strict";var r=e(3),i=e(11).Graph;function o(t,n,e,i){var o;do{o=r.uniqueId(i)}while(t.hasNode(o));return e.dummy=n,t.setNode(o,e),o}function u(t){return r.max(r.map(t.nodes(),function(n){var e=t.node(n).rank;if(!r.isUndefined(e))return e}))}t.exports={addDummyNode:o,simplify:function(t){var n=(new i).setGraph(t.graph());return r.forEach(t.nodes(),function(e){n.setNode(e,t.node(e))}),r.forEach(t.edges(),function(e){var r=n.edge(e.v,e.w)||{weight:0,minlen:1},i=t.edge(e);n.setEdge(e.v,e.w,{weight:r.weight+i.weight,minlen:Math.max(r.minlen,i.minlen)})}),n},asNonCompoundGraph:function(t){var n=new i({multigraph:t.isMultigraph()}).setGraph(t.graph());return r.forEach(t.nodes(),function(e){t.children(e).length||n.setNode(e,t.node(e))}),r.forEach(t.edges(),function(e){n.setEdge(e,t.edge(e))}),n},successorWeights:function(t){var n=r.map(t.nodes(),function(n){var e={};return r.forEach(t.outEdges(n),function(n){e[n.w]=(e[n.w]||0)+t.edge(n).weight}),e});return r.zipObject(t.nodes(),n)},predecessorWeights:function(t){var n=r.map(t.nodes(),function(n){var e={};return r.forEach(t.inEdges(n),function(n){e[n.v]=(e[n.v]||0)+t.edge(n).weight}),e});return r.zipObject(t.nodes(),n)},intersectRect:function(t,n){var e,r,i=t.x,o=t.y,u=n.x-i,a=n.y-o,c=t.width/2,f=t.height/2;if(!u&&!a)throw new Error("Not possible to find intersection inside of the rectangle");Math.abs(a)*c>Math.abs(u)*f?(a<0&&(f=-f),e=f*u/a,r=f):(u<0&&(c=-c),e=c,r=c*a/u);return{x:i+e,y:o+r}},buildLayerMatrix:function(t){var n=r.map(r.range(u(t)+1),function(){return[]});return r.forEach(t.nodes(),function(e){var i=t.node(e),o=i.rank;r.isUndefined(o)||(n[o][i.order]=e)}),n},normalizeRanks:function(t){var n=r.min(r.map(t.nodes(),function(n){return t.node(n).rank}));r.forEach(t.nodes(),function(e){var i=t.node(e);r.has(i,"rank")&&(i.rank-=n)})},removeEmptyRanks:function(t){var n=r.min(r.map(t.nodes(),function(n){return t.node(n).rank})),e=[];r.forEach(t.nodes(),function(r){var i=t.node(r).rank-n;e[i]||(e[i]=[]),e[i].push(r)});var i=0,o=t.graph().nodeRankFactor;r.forEach(e,function(n,e){r.isUndefined(n)&&e%o!=0?--i:i&&r.forEach(n,function(n){t.node(n).rank+=i})})},addBorderNode:function(t,n,e,r){var i={width:0,height:0};arguments.length>=4&&(i.rank=e,i.order=r);return o(t,"border",i,n)},maxRank:u,partition:function(t,n){var e={lhs:[],rhs:[]};return r.forEach(t,function(t){n(t)?e.lhs.push(t):e.rhs.push(t)}),e},time:function(t,n){var e=r.now();try{return n()}finally{console.log(t+" time: "+(r.now()-e)+"ms")}},notime:function(t,n){return n()}}},function(t,n,e){"use strict";var r={value:function(){}};function i(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new o(r)}function o(t){this._=t}function u(t,n){return t.trim().split(/^|\s+/).map(function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})}function a(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function c(t,n,e){for(var i=0,o=t.length;i<o;++i)if(t[i].name===n){t[i]=r,t=t.slice(0,i).concat(t.slice(i+1));break}return null!=e&&t.push({name:n,value:e}),t}o.prototype=i.prototype={constructor:o,on:function(t,n){var e,r=this._,i=u(t+"",r),o=-1,f=i.length;if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<f;)if(e=(t=i[o]).type)r[e]=c(r[e],t.name,n);else if(null==n)for(e in r)r[e]=c(r[e],t.name,null);return this}for(;++o<f;)if((e=(t=i[o]).type)&&(e=a(r[e],t.name)))return e},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new o(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var f=i;e.d(n,"a",function(){return f})},function(t,n,e){var r;try{r={clone:e(165),constant:e(69),each:e(70),filter:e(109),has:e(76),isArray:e(4),isEmpty:e(242),isFunction:e(25),isUndefined:e(120),keys:e(17),map:e(121),reduce:e(123),size:e(245),transform:e(251),union:e(252),values:e(128)}}catch(t){}r||(r=window._),t.exports=r},function(t,n){t.exports=function(t){var n=typeof t;return null!=t&&("object"==n||"function"==n)}},function(t,n,e){var r=e(31);t.exports={isSubgraph:function(t,n){return!!t.children(n).length},edgeToId:function(t){return o(t.v)+":"+o(t.w)+":"+o(t.name)},applyStyle:function(t,n){n&&t.attr("style",n)},applyClass:function(t,n,e){n&&t.attr("class",n).attr("class",e+" "+t.attr("class"))},applyTransition:function(t,n){var e=n.graph();if(r.isPlainObject(e)){var i=e.transition;if(r.isFunction(i))return i(t)}return t}};var i=/:/g;function o(t){return t?String(t).replace(i,"\\:"):""}},function(t,n,e){var r=e(90),i="object"==typeof self&&self&&self.Object===Object&&self,o=r||i||Function("return this")();t.exports=o},function(t,n,e){var r;try{r=e(88)}catch(t){}r||(r=window.graphlib),t.exports=r},function(t,n,e){"use strict";var r,i,o=0,u=0,a=0,c=1e3,f=0,s=0,l=0,h="object"==typeof performance&&performance.now?performance:Date,d="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function p(){return s||(d(v),s=h.now()+l)}function v(){s=0}function g(){this._call=this._time=this._next=null}function y(t,n,e){var r=new g;return r.restart(t,n,e),r}function _(){p(),++o;for(var t,n=r;n;)(t=s-n._time)>=0&&n._call.call(null,t),n=n._next;--o}function m(){s=(f=h.now())+l,o=u=0;try{_()}finally{o=0,function(){var t,n,e=r,o=1/0;for(;e;)e._call?(o>e._time&&(o=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:r=n);i=t,b(o)}(),s=0}}function x(){var t=h.now(),n=t-f;n>c&&(l-=n,f=t)}function b(t){o||(u&&(u=clearTimeout(u)),t-s>24?(t<1/0&&(u=setTimeout(m,t-h.now()-l)),a&&(a=clearInterval(a))):(a||(f=h.now(),a=setInterval(x,c)),o=1,d(m)))}g.prototype=y.prototype={constructor:g,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?p():+e)+(null==n?0:+n),this._next||i===this||(i?i._next=this:r=this,i=this),this._call=t,this._time=e,b()},stop:function(){this._call&&(this._call=null,this._time=1/0,b())}};var w=function(t,n,e){var r=new g;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r},M=function(t,n,e){var r=new g,i=n;return null==n?(r.restart(t,n,e),r):(n=+n,e=null==e?p():+e,r.restart(function o(u){u+=i,r.restart(o,i+=n,e),t(u)},n,e),r)};e.d(n,"b",function(){return p}),e.d(n,"d",function(){return y}),e.d(n,"e",function(){return _}),e.d(n,"c",function(){return w}),e.d(n,"a",function(){return M})},function(t,n){t.exports=function(t){return null!=t&&"object"==typeof t}},function(t,n,e){var r=e(25),i=e(63);t.exports=function(t){return null!=t&&i(t.length)&&!r(t)}},function(t,n,e){var r=e(222),i=e(232),o=e(22),u=e(4),a=e(239);t.exports=function(t){return"function"==typeof t?t:null==t?o:"object"==typeof t?u(t)?i(t[0],t[1]):r(t):a(t)}},function(t,n,e){"use strict";var r=e(0),i=e(6),o=e(12),u=Object(i.a)("start","end","interrupt"),a=[],c=0,f=1,s=2,l=3,h=4,d=5,p=6,v=function(t,n,e,r,i,v){var g=t.__transition;if(g){if(e in g)return}else t.__transition={};!function(t,n,e){var r,i=t.__transition;function u(d){var v,g,y,_;if(e.state!==f)return c();for(v in i)if((_=i[v]).name===e.name){if(_.state===l)return Object(o.c)(u);_.state===h?(_.state=p,_.timer.stop(),_.on.call("interrupt",t,t.__data__,_.index,_.group),delete i[v]):+v<n&&(_.state=p,_.timer.stop(),delete i[v])}if(Object(o.c)(function(){e.state===l&&(e.state=h,e.timer.restart(a,e.delay,e.time),a(d))}),e.state=s,e.on.call("start",t,t.__data__,e.index,e.group),e.state===s){for(e.state=l,r=new Array(y=e.tween.length),v=0,g=-1;v<y;++v)(_=e.tween[v].value.call(t,t.__data__,e.index,e.group))&&(r[++g]=_);r.length=g+1}}function a(n){for(var i=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(c),e.state=d,1),o=-1,u=r.length;++o<u;)r[o].call(null,i);e.state===d&&(e.on.call("end",t,t.__data__,e.index,e.group),c())}function c(){for(var r in e.state=p,e.timer.stop(),delete i[n],i)return;delete t.__transition}i[n]=e,e.timer=Object(o.d)(function(t){e.state=f,e.timer.restart(u,e.delay,e.time),e.delay<=t&&u(t-e.delay)},0,e.time)}(t,e,{name:n,index:r,group:i,on:u,tween:a,time:v.time,delay:v.delay,duration:v.duration,ease:v.ease,timer:null,state:c})};function g(t,n){var e=_(t,n);if(e.state>c)throw new Error("too late; already scheduled");return e}function y(t,n){var e=_(t,n);if(e.state>s)throw new Error("too late; already started");return e}function _(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("transition not found");return e}var m=function(t,n){var e,r,i,o=t.__transition,u=!0;if(o){for(i in n=null==n?null:n+"",o)(e=o[i]).name===n?(r=e.state>s&&e.state<d,e.state=p,e.timer.stop(),r&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete o[i]):u=!1;u&&delete t.__transition}},x=e(2);function b(t,n){var e,r;return function(){var i=y(this,t),o=i.tween;if(o!==e)for(var u=0,a=(r=e=o).length;u<a;++u)if(r[u].name===n){(r=r.slice()).splice(u,1);break}i.tween=r}}function w(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=y(this,t),u=o.tween;if(u!==r){i=(r=u).slice();for(var a={name:n,value:e},c=0,f=i.length;c<f;++c)if(i[c].name===n){i[c]=a;break}c===f&&i.push(a)}o.tween=i}}function M(t,n,e){var r=t._id;return t.each(function(){var t=y(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return _(t,r).value[n]}}var E=e(1),T=function(t,n){var e;return("number"==typeof n?x.m:n instanceof E.a?x.o:(e=Object(E.a)(n))?(n=e,x.o):x.s)(t,n)};function k(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttributeNS(t.space,t.local,r(n))}}return e._value=n,e}function N(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttribute(t,r(n))}}return e._value=n,e}function S(t,n){return function(){g(this,t).delay=+n.apply(this,arguments)}}function A(t,n){return n=+n,function(){g(this,t).delay=n}}function O(t,n){return function(){y(this,t).duration=+n.apply(this,arguments)}}function C(t,n){return n=+n,function(){y(this,t).duration=n}}function j(t,n){if("function"!=typeof n)throw new Error;return function(){y(this,t).ease=n}}function I(t,n,e){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}(n)?g:y;return function(){var u=o(this,t),a=u.on;a!==r&&(i=(r=a).copy()).on(n,e),u.on=i}}var P=r.selection.prototype.constructor;function L(t,n,e){function r(){var r=this,i=n.apply(r,arguments);return i&&function(n){r.style.setProperty(t,i(n),e)}}return r._value=n,r}var R=0;function z(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function D(t){return Object(r.selection)().transition(t)}function V(){return++R}var U=r.selection.prototype;z.prototype=D.prototype={constructor:z,select:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Object(r.selector)(t));for(var i=this._groups,o=i.length,u=new Array(o),a=0;a<o;++a)for(var c,f,s=i[a],l=s.length,h=u[a]=new Array(l),d=0;d<l;++d)(c=s[d])&&(f=t.call(c,c.__data__,d,s))&&("__data__"in c&&(f.__data__=c.__data__),h[d]=f,v(h[d],n,e,d,h,_(c,e)));return new z(u,this._parents,n,e)},selectAll:function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Object(r.selectorAll)(t));for(var i=this._groups,o=i.length,u=[],a=[],c=0;c<o;++c)for(var f,s=i[c],l=s.length,h=0;h<l;++h)if(f=s[h]){for(var d,p=t.call(f,f.__data__,h,s),g=_(f,e),y=0,m=p.length;y<m;++y)(d=p[y])&&v(d,n,e,y,p,g);u.push(p),a.push(f)}return new z(u,a,n,e)},filter:function(t){"function"!=typeof t&&(t=Object(r.matcher)(t));for(var n=this._groups,e=n.length,i=new Array(e),o=0;o<e;++o)for(var u,a=n[o],c=a.length,f=i[o]=[],s=0;s<c;++s)(u=a[s])&&t.call(u,u.__data__,s,a)&&f.push(u);return new z(i,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),u=new Array(r),a=0;a<o;++a)for(var c,f=n[a],s=e[a],l=f.length,h=u[a]=new Array(l),d=0;d<l;++d)(c=f[d]||s[d])&&(h[d]=c);for(;a<r;++a)u[a]=n[a];return new z(u,this._parents,this._name,this._id)},selection:function(){return new P(this._groups,this._parents)},transition:function(){for(var t=this._name,n=this._id,e=V(),r=this._groups,i=r.length,o=0;o<i;++o)for(var u,a=r[o],c=a.length,f=0;f<c;++f)if(u=a[f]){var s=_(u,n);v(u,t,e,f,a,{time:s.time+s.delay+s.duration,delay:0,duration:s.duration,ease:s.ease})}return new z(r,this._parents,t,e)},call:U.call,nodes:U.nodes,node:U.node,size:U.size,empty:U.empty,each:U.each,on:function(t,n){var e=this._id;return arguments.length<2?_(this.node(),e).on.on(t):this.each(I(e,t,n))},attr:function(t,n){var e=Object(r.namespace)(t),i="transform"===e?x.u:T;return this.attrTween(t,"function"==typeof n?(e.local?function(t,n,e){var r,i,o;return function(){var u,a=e(this);if(null!=a)return(u=this.getAttributeNS(t.space,t.local))===a?null:u===r&&a===i?o:o=n(r=u,i=a);this.removeAttributeNS(t.space,t.local)}}:function(t,n,e){var r,i,o;return function(){var u,a=e(this);if(null!=a)return(u=this.getAttribute(t))===a?null:u===r&&a===i?o:o=n(r=u,i=a);this.removeAttribute(t)}})(e,i,M(this,"attr."+t,n)):null==n?(e.local?function(t){return function(){this.removeAttributeNS(t.space,t.local)}}:function(t){return function(){this.removeAttribute(t)}})(e):(e.local?function(t,n,e){var r,i;return function(){var o=this.getAttributeNS(t.space,t.local);return o===e?null:o===r?i:i=n(r=o,e)}}:function(t,n,e){var r,i;return function(){var o=this.getAttribute(t);return o===e?null:o===r?i:i=n(r=o,e)}})(e,i,n+""))},attrTween:function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var i=Object(r.namespace)(t);return this.tween(e,(i.local?k:N)(i,n))},style:function(t,n,e){var i="transform"==(t+="")?x.t:T;return null==n?this.styleTween(t,function(t,n){var e,i,o;return function(){var u=Object(r.style)(this,t),a=(this.style.removeProperty(t),Object(r.style)(this,t));return u===a?null:u===e&&a===i?o:o=n(e=u,i=a)}}(t,i)).on("end.style."+t,function(t){return function(){this.style.removeProperty(t)}}(t)):this.styleTween(t,"function"==typeof n?function(t,n,e){var i,o,u;return function(){var a=Object(r.style)(this,t),c=e(this);return null==c&&(this.style.removeProperty(t),c=Object(r.style)(this,t)),a===c?null:a===i&&c===o?u:u=n(i=a,o=c)}}(t,i,M(this,"style."+t,n)):function(t,n,e){var i,o;return function(){var u=Object(r.style)(this,t);return u===e?null:u===i?o:o=n(i=u,e)}}(t,i,n+""),e)},styleTween:function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,L(t,n,null==e?"":e))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var n=t(this);this.textContent=null==n?"":n}}(M(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},remove:function(){return this.on("end.remove",(t=this._id,function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}));var t},tween:function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=_(this.node(),e).tween,o=0,u=i.length;o<u;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?b:w)(e,t,n))},delay:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?S:A)(n,t)):_(this.node(),n).delay},duration:function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?O:C)(n,t)):_(this.node(),n).duration},ease:function(t){var n=this._id;return arguments.length?this.each(j(n,t)):_(this.node(),n).ease}};var F={time:null,delay:0,duration:250,ease:e(56).o};function q(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return F.time=Object(o.b)(),F;return e}r.selection.prototype.interrupt=function(t){return this.each(function(){m(this,t)})},r.selection.prototype.transition=function(t){var n,e;t instanceof z?(n=t._id,t=t._name):(n=V(),(e=F).time=Object(o.b)(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,u=0;u<i;++u)for(var a,c=r[u],f=c.length,s=0;s<f;++s)(a=c[s])&&v(a,t,n,s,c,e||q(a,n));return new z(r,this._parents,t,n)};var B=[null],Y=function(t,n){var e,r,i=t.__transition;if(i)for(r in n=null==n?null:n+"",i)if((e=i[r]).state>f&&e.name===n)return new z([[t]],B,n,+r);return null};e.d(n,"c",function(){return D}),e.d(n,"a",function(){return Y}),e.d(n,"b",function(){return m})},function(t,n,e){var r=e(93),i=e(65),o=e(14);t.exports=function(t){return o(t)?r(t):i(t)}},function(t,n,e){var r;if(!r)try{r=e(354)}catch(t){}r||(r=window.d3),t.exports=r},function(t,n,e){"use strict";var r=e(6),i=e(0);function o(){i.event.stopImmediatePropagation()}var u=function(){i.event.preventDefault(),i.event.stopImmediatePropagation()},a=function(t){var n=t.document.documentElement,e=Object(i.select)(t).on("dragstart.drag",u,!0);"onselectstart"in n?e.on("selectstart.drag",u,!0):(n.__noselect=n.style.MozUserSelect,n.style.MozUserSelect="none")};function c(t,n){var e=t.document.documentElement,r=Object(i.select)(t).on("dragstart.drag",null);n&&(r.on("click.drag",u,!0),setTimeout(function(){r.on("click.drag",null)},0)),"onselectstart"in e?r.on("selectstart.drag",null):(e.style.MozUserSelect=e.__noselect,delete e.__noselect)}var f=function(t){return function(){return t}};function s(t,n,e,r,i,o,u,a,c,f){this.target=t,this.type=n,this.subject=e,this.identifier=r,this.active=i,this.x=o,this.y=u,this.dx=a,this.dy=c,this._=f}function l(){return!i.event.button}function h(){return this.parentNode}function d(t){return null==t?{x:i.event.x,y:i.event.y}:t}function p(){return"ontouchstart"in this}s.prototype.on=function(){var t=this._.on.apply(this._,arguments);return t===this._?this:t};var v=function(){var t,n,e,v,g=l,y=h,_=d,m=p,x={},b=Object(r.a)("start","drag","end"),w=0,M=0;function E(t){t.on("mousedown.drag",T).filter(m).on("touchstart.drag",S).on("touchmove.drag",A).on("touchend.drag touchcancel.drag",O).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function T(){if(!v&&g.apply(this,arguments)){var r=C("mouse",y.apply(this,arguments),i.mouse,this,arguments);r&&(Object(i.select)(i.event.view).on("mousemove.drag",k,!0).on("mouseup.drag",N,!0),a(i.event.view),o(),e=!1,t=i.event.clientX,n=i.event.clientY,r("start"))}}function k(){if(u(),!e){var r=i.event.clientX-t,o=i.event.clientY-n;e=r*r+o*o>M}x.mouse("drag")}function N(){Object(i.select)(i.event.view).on("mousemove.drag mouseup.drag",null),c(i.event.view,e),u(),x.mouse("end")}function S(){if(g.apply(this,arguments)){var t,n,e=i.event.changedTouches,r=y.apply(this,arguments),u=e.length;for(t=0;t<u;++t)(n=C(e[t].identifier,r,i.touch,this,arguments))&&(o(),n("start"))}}function A(){var t,n,e=i.event.changedTouches,r=e.length;for(t=0;t<r;++t)(n=x[e[t].identifier])&&(u(),n("drag"))}function O(){var t,n,e=i.event.changedTouches,r=e.length;for(v&&clearTimeout(v),v=setTimeout(function(){v=null},500),t=0;t<r;++t)(n=x[e[t].identifier])&&(o(),n("end"))}function C(t,n,e,r,o){var u,a,c,f=e(n,t),l=b.copy();if(Object(i.customEvent)(new s(E,"beforestart",u,t,w,f[0],f[1],0,0,l),function(){return null!=(i.event.subject=u=_.apply(r,o))&&(a=u.x-f[0]||0,c=u.y-f[1]||0,!0)}))return function h(d){var p,v=f;switch(d){case"start":x[t]=h,p=w++;break;case"end":delete x[t],--w;case"drag":f=e(n,t),p=w}Object(i.customEvent)(new s(E,d,u,t,p,f[0]+a,f[1]+c,f[0]-v[0],f[1]-v[1],l),l.apply,l,[d,r,o])}}return E.filter=function(t){return arguments.length?(g="function"==typeof t?t:f(!!t),E):g},E.container=function(t){return arguments.length?(y="function"==typeof t?t:f(t),E):y},E.subject=function(t){return arguments.length?(_="function"==typeof t?t:f(t),E):_},E.touchable=function(t){return arguments.length?(m="function"==typeof t?t:f(!!t),E):m},E.on=function(){var t=b.on.apply(b,arguments);return t===b?E:t},E.clickDistance=function(t){return arguments.length?(M=(t=+t)*t,E):Math.sqrt(M)},E};e.d(n,"a",function(){return v}),e.d(n,"b",function(){return a}),e.d(n,"c",function(){return c})},function(t,n,e){var r=e(176),i=e(182);t.exports=function(t,n){var e=i(t,n);return r(e)?e:void 0}},function(t,n,e){var r=e(26),i=e(178),o=e(179),u="[object Null]",a="[object Undefined]",c=r?r.toStringTag:void 0;t.exports=function(t){return null==t?void 0===t?a:u:c&&c in Object(t)?i(t):o(t)}},function(t,n){t.exports=function(t){return t}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.MONKEY_PATCH_KEY_NAME="__ngContext__",n.HOST=0,n.TVIEW=1,n.FLAGS=2,n.PARENT=3,n.NEXT=4,n.CONTEXT=9,n.CHILD_HEAD=14,n.CHILD_TAIL=15,n.DECLARATION_VIEW=17,n.ACTIVE_INDEX=2,n.NATIVE=7,n.VIEW_REFS=8,n.CONTAINER_HEADER_OFFSET=9,n.HEADER_OFFSET=20,n.TYPE=1},function(t,n){t.exports=function(t,n){return t===n||t!=t&&n!=n}},function(t,n,e){var r=e(21),i=e(8),o="[object AsyncFunction]",u="[object Function]",a="[object GeneratorFunction]",c="[object Proxy]";t.exports=function(t){if(!i(t))return!1;var n=r(t);return n==u||n==a||n==o||n==c}},function(t,n,e){var r=e(10).Symbol;t.exports=r},function(t,n,e){(function(t){var r=e(10),i=e(198),o=n&&!n.nodeType&&n,u=o&&"object"==typeof t&&t&&!t.nodeType&&t,a=u&&u.exports===o?r.Buffer:void 0,c=(a?a.isBuffer:void 0)||i;t.exports=c}).call(this,e(62)(t))},function(t,n,e){var r=e(93),i=e(202),o=e(14);t.exports=function(t){return o(t)?r(t,!0):i(t)}},function(t,n,e){var r=e(207),i=e(59),o=e(208),u=e(102),a=e(209),c=e(21),f=e(91),s=f(r),l=f(i),h=f(o),d=f(u),p=f(a),v=c;(r&&"[object DataView]"!=v(new r(new ArrayBuffer(1)))||i&&"[object Map]"!=v(new i)||o&&"[object Promise]"!=v(o.resolve())||u&&"[object Set]"!=v(new u)||a&&"[object WeakMap]"!=v(new a))&&(v=function(t){var n=c(t),e="[object Object]"==n?t.constructor:void 0,r=e?f(e):"";if(r)switch(r){case s:return"[object DataView]";case l:return"[object Map]";case h:return"[object Promise]";case d:return"[object Set]";case p:return"[object WeakMap]"}return n}),t.exports=v},function(t,n,e){var r=e(21),i=e(13),o="[object Symbol]";t.exports=function(t){return"symbol"==typeof t||i(t)&&r(t)==o}},function(t,n,e){var r;try{r={defaults:e(135),each:e(70),isFunction:e(25),isPlainObject:e(139),pick:e(142),has:e(76),range:e(143),uniqueId:e(144)}}catch(t){}r||(r=window._),t.exports=r},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.DEVTOOLS_IDENTIFIER="__CD_PROFILER_ID__",n.UPDATED_NODE_CLASS_NAME="node-updated",n.NOT_UPDATED_NODE_CLASS_NAME="node-normal",n.COLORS_CLASSES=["node-updated-1","node-updated-2","node-updated-3","node-updated-4","node-updated-5","node-updated-6","node-updated-7"],n.OUTLINE_COLOR="#f0f0f0",n.COLORS=["#55cef6","#55f67b","#a5f655","#f4f655","#f6a555","#f66855","#ff0000"],n.HOTTEST_COLOR=n.COLORS[n.COLORS.length-1],n.DURATION=250},function(t,n,e){var r=e(44),i=e(45);t.exports=function(t,n,e,o){var u=!e;e||(e={});for(var a=-1,c=n.length;++a<c;){var f=n[a],s=o?o(e[f],t[f],f,e,t):void 0;void 0===s&&(s=t[f]),u?i(e,f,s):r(e,f,s)}return e}},function(t,n,e){var r=e(197),i=e(13),o=Object.prototype,u=o.hasOwnProperty,a=o.propertyIsEnumerable,c=r(function(){return arguments}())?r:function(t){return i(t)&&u.call(t,"callee")&&!a.call(t,"callee")};t.exports=c},function(t,n,e){var r=e(199),i=e(47),o=e(64),u=o&&o.isTypedArray,a=u?i(u):r;t.exports=a},function(t,n,e){var r=e(30),i=1/0;t.exports=function(t){if("string"==typeof t||r(t))return t;var n=t+"";return"0"==n&&1/t==-i?"-0":n}},function(t,n,e){"use strict";var r=this&&this.__values||function(t){var n="function"==typeof Symbol&&t[Symbol.iterator],e=0;return n?n.call(t):{next:function(){return t&&e>=t.length&&(t=void 0),{value:t&&t[e++],done:!t}}}},i=this&&this.__read||function(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,i,o=e.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)u.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(e=o.return)&&e.call(o)}finally{if(i)throw i.error}}return u};Object.defineProperty(n,"__esModule",{value:!0});var o=e(23);function u(t){return Array.isArray(t)&&"object"==typeof t[o.TYPE]}function a(t){return t[o.MONKEY_PATCH_KEY_NAME]}function c(t){return 4==(4&t[o.FLAGS])}n.monkeyPatchFunction=function(t,n,e){t[n]=e},n.getComponentViewByIndex=function(t,n){var e=n[t];return u(e)?e:e[o.HOST]},n.isLView=u,n.isLContainer=function(t){return Array.isArray(t)&&!0===t[o.TYPE]},n.readPatchedData=a,n.readPatchedLView=function(t){var n=a(t);return n?Array.isArray(n)?n:n.lView:null},n.isCreationMode=c,n.shouldLViewBeChecked=function(t){return(128==(128&t[o.FLAGS])||c(t))&&0==(80&t[o.FLAGS])},n.findAngularRootNode=function t(n){if(n&&n.childNodes)for(var e=n.childNodes,r=0;r<e.length;r++){var i=e[r];if(i[o.MONKEY_PATCH_KEY_NAME])return i[o.MONKEY_PATCH_KEY_NAME];var u=t(i);if(u)return u}},n.mapToObject=function(t){var n,e,o={};try{for(var u=r(t),a=u.next();!a.done;a=u.next()){var c=i(a.value,2),f=c[0],s=c[1];o[f]=s}}catch(t){n={error:t}}finally{try{a&&!a.done&&(e=u.return)&&e.call(u)}finally{if(n)throw n.error}}return o}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(23),i=e(32),o=function(){function t(){}return t.prototype.addTreeViewItem=function(t,n){n?(n.children.push(t),this.currentTreeViewItem=t):(this.rootTreeViewItem=t,this.currentTreeViewItem=this.rootTreeViewItem)},t}();n.TreeViewBuilder=o,n.serialiseTreeViewItem=function t(n){return{uuid:n.lView[r.HOST][i.DEVTOOLS_IDENTIFIER],children:n.children.map(function(n){return t(n)}),tagName:n.lView[0].tagName,onPush:0==(16&n.lView[r.FLAGS])}},n.createInitialTreeViewState=function(t,n,e){return{lView:t,currentIndex:0,children:[],isRoot:n,parent:e}}},function(t,n,e){var r=e(40),i=e(171),o=e(172),u=e(173),a=e(174),c=e(175);function f(t){var n=this.__data__=new r(t);this.size=n.size}f.prototype.clear=i,f.prototype.delete=o,f.prototype.get=u,f.prototype.has=a,f.prototype.set=c,t.exports=f},function(t,n,e){var r=e(166),i=e(167),o=e(168),u=e(169),a=e(170);function c(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=i,c.prototype.get=o,c.prototype.has=u,c.prototype.set=a,t.exports=c},function(t,n,e){var r=e(24);t.exports=function(t,n){for(var e=t.length;e--;)if(r(t[e][0],n))return e;return-1}},function(t,n,e){var r=e(20)(Object,"create");t.exports=r},function(t,n,e){var r=e(191);t.exports=function(t,n){var e=t.__data__;return r(n)?e["string"==typeof n?"string":"hash"]:e.map}},function(t,n,e){var r=e(45),i=e(24),o=Object.prototype.hasOwnProperty;t.exports=function(t,n,e){var u=t[n];o.call(t,n)&&i(u,e)&&(void 0!==e||n in t)||r(t,n,e)}},function(t,n,e){var r=e(92);t.exports=function(t,n,e){"__proto__"==n&&r?r(t,n,{configurable:!0,enumerable:!0,value:e,writable:!0}):t[n]=e}},function(t,n){var e=9007199254740991,r=/^(?:0|[1-9]\d*)$/;t.exports=function(t,n){var i=typeof t;return!!(n=null==n?e:n)&&("number"==i||"symbol"!=i&&r.test(t))&&t>-1&&t%1==0&&t<n}},function(t,n){t.exports=function(t){return function(n){return t(n)}}},function(t,n){var e=Object.prototype;t.exports=function(t){var n=t&&t.constructor;return t===("function"==typeof n&&n.prototype||e)}},function(t,n,e){var r=e(94)(Object.getPrototypeOf,Object);t.exports=r},function(t,n,e){var r=e(71),i=e(220)(r);t.exports=i},function(t,n,e){var r=e(4),i=e(75),o=e(234),u=e(116);t.exports=function(t,n){return r(t)?t:i(t,n)?[t]:o(u(t))}},function(t,n){t.exports=function(t,n){for(var e=-1,r=null==t?0:t.length,i=Array(r);++e<r;)i[e]=n(t[e],e,t);return i}},function(t,n,e){var r=e(22),i=e(124),o=e(125);t.exports=function(t,n){return o(i(t,n,r),t+"")}},function(t,n,e){var r=e(24),i=e(14),o=e(46),u=e(8);t.exports=function(t,n,e){if(!u(e))return!1;var a=typeof n;return!!("number"==a?i(e)&&o(n,e.length):"string"==a&&n in e)&&r(e[n],t)}},function(t,n,e){"use strict";var r=e(3);t.exports={longestPath:function(t){var n={};r.forEach(t.sources(),function e(i){var o=t.node(i);if(r.has(n,i))return o.rank;n[i]=!0;var u=r.min(r.map(t.outEdges(i),function(n){return e(n.w)-t.edge(n).minlen}));u!==Number.POSITIVE_INFINITY&&null!=u||(u=0);return o.rank=u})},slack:function(t,n){return t.node(n.w).rank-t.node(n.v).rank-t.edge(n).minlen}}},function(t,n,e){"use strict";function r(t){return+t}function i(t){return t*t}function o(t){return t*(2-t)}function u(t){return((t*=2)<=1?t*t:--t*(2-t)+1)/2}function a(t){return t*t*t}function c(t){return--t*t*t+1}function f(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}var s=function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e}(3),l=function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),h=function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),d=Math.PI,p=d/2;function v(t){return 1-Math.cos(t*p)}function g(t){return Math.sin(t*p)}function y(t){return(1-Math.cos(d*t))/2}function _(t){return Math.pow(2,10*t-10)}function m(t){return 1-Math.pow(2,-10*t)}function x(t){return((t*=2)<=1?Math.pow(2,10*t-10):2-Math.pow(2,10-10*t))/2}function b(t){return 1-Math.sqrt(1-t*t)}function w(t){return Math.sqrt(1- --t*t)}function M(t){return((t*=2)<=1?1-Math.sqrt(1-t*t):Math.sqrt(1-(t-=2)*t)+1)/2}var E=4/11,T=6/11,k=8/11,N=.75,S=9/11,A=10/11,O=.9375,C=21/22,j=63/64,I=1/E/E;function P(t){return 1-L(1-t)}function L(t){return(t=+t)<E?I*t*t:t<k?I*(t-=T)*t+N:t<A?I*(t-=S)*t+O:I*(t-=C)*t+j}function R(t){return((t*=2)<=1?1-L(1-t):L(t-1)+1)/2}var z=function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e}(1.70158),D=function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),V=function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158),U=2*Math.PI,F=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=U);function i(t){return n*Math.pow(2,10*--t)*Math.sin((r-t)/e)}return i.amplitude=function(n){return t(n,e*U)},i.period=function(e){return t(n,e)},i}(1,.3),q=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=U);function i(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+r)/e)}return i.amplitude=function(n){return t(n,e*U)},i.period=function(e){return t(n,e)},i}(1,.3),B=function t(n,e){var r=Math.asin(1/(n=Math.max(1,n)))*(e/=U);function i(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((r-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((r+t)/e))/2}return i.amplitude=function(n){return t(n,e*U)},i.period=function(e){return t(n,e)},i}(1,.3);e.d(n,"y",function(){return r}),e.d(n,"D",function(){return u}),e.d(n,"E",function(){return i}),e.d(n,"G",function(){return o}),e.d(n,"F",function(){return u}),e.d(n,"m",function(){return f}),e.d(n,"n",function(){return a}),e.d(n,"p",function(){return c}),e.d(n,"o",function(){return f}),e.d(n,"z",function(){return h}),e.d(n,"A",function(){return s}),e.d(n,"C",function(){return l}),e.d(n,"B",function(){return h}),e.d(n,"H",function(){return y}),e.d(n,"I",function(){return v}),e.d(n,"K",function(){return g}),e.d(n,"J",function(){return y}),e.d(n,"u",function(){return x}),e.d(n,"v",function(){return _}),e.d(n,"x",function(){return m}),e.d(n,"w",function(){return x}),e.d(n,"i",function(){return M}),e.d(n,"j",function(){return b}),e.d(n,"l",function(){return w}),e.d(n,"k",function(){return M}),e.d(n,"e",function(){return L}),e.d(n,"f",function(){return P}),e.d(n,"h",function(){return L}),e.d(n,"g",function(){return R}),e.d(n,"a",function(){return V}),e.d(n,"b",function(){return z}),e.d(n,"d",function(){return D}),e.d(n,"c",function(){return V}),e.d(n,"q",function(){return q}),e.d(n,"r",function(){return F}),e.d(n,"t",function(){return q}),e.d(n,"s",function(){return B})},,function(t,n,e){"use strict";var r=e(7);t.exports=a;var i="\0",o="\0",u="";function a(t){this._isDirected=!r.has(t,"directed")||t.directed,this._isMultigraph=!!r.has(t,"multigraph")&&t.multigraph,this._isCompound=!!r.has(t,"compound")&&t.compound,this._label=void 0,this._defaultNodeLabelFn=r.constant(void 0),this._defaultEdgeLabelFn=r.constant(void 0),this._nodes={},this._isCompound&&(this._parent={},this._children={},this._children[o]={}),this._in={},this._preds={},this._out={},this._sucs={},this._edgeObjs={},this._edgeLabels={}}function c(t,n){t[n]?t[n]++:t[n]=1}function f(t,n){--t[n]||delete t[n]}function s(t,n,e,o){var a=""+n,c=""+e;if(!t&&a>c){var f=a;a=c,c=f}return a+u+c+u+(r.isUndefined(o)?i:o)}function l(t,n,e,r){var i=""+n,o=""+e;if(!t&&i>o){var u=i;i=o,o=u}var a={v:i,w:o};return r&&(a.name=r),a}function h(t,n){return s(t,n.v,n.w,n.name)}a.prototype._nodeCount=0,a.prototype._edgeCount=0,a.prototype.isDirected=function(){return this._isDirected},a.prototype.isMultigraph=function(){return this._isMultigraph},a.prototype.isCompound=function(){return this._isCompound},a.prototype.setGraph=function(t){return this._label=t,this},a.prototype.graph=function(){return this._label},a.prototype.setDefaultNodeLabel=function(t){return r.isFunction(t)||(t=r.constant(t)),this._defaultNodeLabelFn=t,this},a.prototype.nodeCount=function(){return this._nodeCount},a.prototype.nodes=function(){return r.keys(this._nodes)},a.prototype.sources=function(){var t=this;return r.filter(this.nodes(),function(n){return r.isEmpty(t._in[n])})},a.prototype.sinks=function(){var t=this;return r.filter(this.nodes(),function(n){return r.isEmpty(t._out[n])})},a.prototype.setNodes=function(t,n){var e=arguments,i=this;return r.each(t,function(t){e.length>1?i.setNode(t,n):i.setNode(t)}),this},a.prototype.setNode=function(t,n){return r.has(this._nodes,t)?(arguments.length>1&&(this._nodes[t]=n),this):(this._nodes[t]=arguments.length>1?n:this._defaultNodeLabelFn(t),this._isCompound&&(this._parent[t]=o,this._children[t]={},this._children[o][t]=!0),this._in[t]={},this._preds[t]={},this._out[t]={},this._sucs[t]={},++this._nodeCount,this)},a.prototype.node=function(t){return this._nodes[t]},a.prototype.hasNode=function(t){return r.has(this._nodes,t)},a.prototype.removeNode=function(t){var n=this;if(r.has(this._nodes,t)){var e=function(t){n.removeEdge(n._edgeObjs[t])};delete this._nodes[t],this._isCompound&&(this._removeFromParentsChildList(t),delete this._parent[t],r.each(this.children(t),function(t){n.setParent(t)}),delete this._children[t]),r.each(r.keys(this._in[t]),e),delete this._in[t],delete this._preds[t],r.each(r.keys(this._out[t]),e),delete this._out[t],delete this._sucs[t],--this._nodeCount}return this},a.prototype.setParent=function(t,n){if(!this._isCompound)throw new Error("Cannot set parent in a non-compound graph");if(r.isUndefined(n))n=o;else{for(var e=n+="";!r.isUndefined(e);e=this.parent(e))if(e===t)throw new Error("Setting "+n+" as parent of "+t+" would create a cycle");this.setNode(n)}return this.setNode(t),this._removeFromParentsChildList(t),this._parent[t]=n,this._children[n][t]=!0,this},a.prototype._removeFromParentsChildList=function(t){delete this._children[this._parent[t]][t]},a.prototype.parent=function(t){if(this._isCompound){var n=this._parent[t];if(n!==o)return n}},a.prototype.children=function(t){if(r.isUndefined(t)&&(t=o),this._isCompound){var n=this._children[t];if(n)return r.keys(n)}else{if(t===o)return this.nodes();if(this.hasNode(t))return[]}},a.prototype.predecessors=function(t){var n=this._preds[t];if(n)return r.keys(n)},a.prototype.successors=function(t){var n=this._sucs[t];if(n)return r.keys(n)},a.prototype.neighbors=function(t){var n=this.predecessors(t);if(n)return r.union(n,this.successors(t))},a.prototype.isLeaf=function(t){return 0===(this.isDirected()?this.successors(t):this.neighbors(t)).length},a.prototype.filterNodes=function(t){var n=new this.constructor({directed:this._isDirected,multigraph:this._isMultigraph,compound:this._isCompound});n.setGraph(this.graph());var e=this;r.each(this._nodes,function(e,r){t(r)&&n.setNode(r,e)}),r.each(this._edgeObjs,function(t){n.hasNode(t.v)&&n.hasNode(t.w)&&n.setEdge(t,e.edge(t))});var i={};return this._isCompound&&r.each(n.nodes(),function(t){n.setParent(t,function t(r){var o=e.parent(r);return void 0===o||n.hasNode(o)?(i[r]=o,o):o in i?i[o]:t(o)}(t))}),n},a.prototype.setDefaultEdgeLabel=function(t){return r.isFunction(t)||(t=r.constant(t)),this._defaultEdgeLabelFn=t,this},a.prototype.edgeCount=function(){return this._edgeCount},a.prototype.edges=function(){return r.values(this._edgeObjs)},a.prototype.setPath=function(t,n){var e=this,i=arguments;return r.reduce(t,function(t,r){return i.length>1?e.setEdge(t,r,n):e.setEdge(t,r),r}),this},a.prototype.setEdge=function(){var t,n,e,i,o=!1,u=arguments[0];"object"==typeof u&&null!==u&&"v"in u?(t=u.v,n=u.w,e=u.name,2===arguments.length&&(i=arguments[1],o=!0)):(t=u,n=arguments[1],e=arguments[3],arguments.length>2&&(i=arguments[2],o=!0)),t=""+t,n=""+n,r.isUndefined(e)||(e=""+e);var a=s(this._isDirected,t,n,e);if(r.has(this._edgeLabels,a))return o&&(this._edgeLabels[a]=i),this;if(!r.isUndefined(e)&&!this._isMultigraph)throw new Error("Cannot set a named edge when isMultigraph = false");this.setNode(t),this.setNode(n),this._edgeLabels[a]=o?i:this._defaultEdgeLabelFn(t,n,e);var f=l(this._isDirected,t,n,e);return t=f.v,n=f.w,Object.freeze(f),this._edgeObjs[a]=f,c(this._preds[n],t),c(this._sucs[t],n),this._in[n][a]=f,this._out[t][a]=f,this._edgeCount++,this},a.prototype.edge=function(t,n,e){var r=1===arguments.length?h(this._isDirected,arguments[0]):s(this._isDirected,t,n,e);return this._edgeLabels[r]},a.prototype.hasEdge=function(t,n,e){var i=1===arguments.length?h(this._isDirected,arguments[0]):s(this._isDirected,t,n,e);return r.has(this._edgeLabels,i)},a.prototype.removeEdge=function(t,n,e){var r=1===arguments.length?h(this._isDirected,arguments[0]):s(this._isDirected,t,n,e),i=this._edgeObjs[r];return i&&(t=i.v,n=i.w,delete this._edgeLabels[r],delete this._edgeObjs[r],f(this._preds[n],t),f(this._sucs[t],n),delete this._in[n][r],delete this._out[t][r],this._edgeCount--),this},a.prototype.inEdges=function(t,n){var e=this._in[t];if(e){var i=r.values(e);return n?r.filter(i,function(t){return t.v===n}):i}},a.prototype.outEdges=function(t,n){var e=this._out[t];if(e){var i=r.values(e);return n?r.filter(i,function(t){return t.w===n}):i}},a.prototype.nodeEdges=function(t,n){var e=this.inEdges(t,n);if(e)return e.concat(this.outEdges(t,n))}},function(t,n,e){var r=e(20)(e(10),"Map");t.exports=r},function(t,n,e){var r=e(183),i=e(190),o=e(192),u=e(193),a=e(194);function c(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=i,c.prototype.get=o,c.prototype.has=u,c.prototype.set=a,t.exports=c},function(t,n){t.exports=function(t,n){for(var e=-1,r=null==t?0:t.length;++e<r&&!1!==n(t[e],e,t););return t}},function(t,n){t.exports=function(t){return t.webpackPolyfill||(t.deprecate=function(){},t.paths=[],t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),t.webpackPolyfill=1),t}},function(t,n){var e=9007199254740991;t.exports=function(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=e}},function(t,n,e){(function(t){var r=e(90),i=n&&!n.nodeType&&n,o=i&&"object"==typeof t&&t&&!t.nodeType&&t,u=o&&o.exports===i&&r.process,a=function(){try{var t=o&&o.require&&o.require("util").types;return t||u&&u.binding&&u.binding("util")}catch(t){}}();t.exports=a}).call(this,e(62)(t))},function(t,n,e){var r=e(48),i=e(200),o=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return i(t);var n=[];for(var e in Object(t))o.call(t,e)&&"constructor"!=e&&n.push(e);return n}},function(t,n,e){var r=e(97),i=e(98),o=Object.prototype.propertyIsEnumerable,u=Object.getOwnPropertySymbols,a=u?function(t){return null==t?[]:(t=Object(t),r(u(t),function(n){return o.call(t,n)}))}:i;t.exports=a},function(t,n){t.exports=function(t,n){for(var e=-1,r=n.length,i=t.length;++e<r;)t[i+e]=n[e];return t}},function(t,n,e){var r=e(103);t.exports=function(t){var n=new t.constructor(t.byteLength);return new r(n).set(new r(t)),n}},function(t,n){t.exports=function(t){return function(){return t}}},function(t,n,e){t.exports=e(107)},function(t,n,e){var r=e(72),i=e(17);t.exports=function(t,n){return t&&r(t,n,i)}},function(t,n,e){var r=e(219)();t.exports=r},function(t,n){t.exports=function(t){var n=-1,e=Array(t.size);return t.forEach(function(t){e[++n]=t}),e}},function(t,n,e){var r=e(51),i=e(36);t.exports=function(t,n){for(var e=0,o=(n=r(n,t)).length;null!=t&&e<o;)t=t[i(n[e++])];return e&&e==o?t:void 0}},function(t,n,e){var r=e(4),i=e(30),o=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,u=/^\w*$/;t.exports=function(t,n){if(r(t))return!1;var e=typeof t;return!("number"!=e&&"symbol"!=e&&"boolean"!=e&&null!=t&&!i(t))||u.test(t)||!o.test(t)||null!=n&&t in Object(n)}},function(t,n,e){var r=e(241),i=e(118);t.exports=function(t,n){return null!=t&&i(t,n,r)}},function(t,n,e){var r=e(67),i=e(253);t.exports=function t(n,e,o,u,a){var c=-1,f=n.length;for(o||(o=i),a||(a=[]);++c<f;){var s=n[c];e>0&&o(s)?e>1?t(s,e-1,o,u,a):r(a,s):u||(a[a.length]=s)}return a}},function(t,n,e){var r=e(30);t.exports=function(t,n,e){for(var i=-1,o=t.length;++i<o;){var u=t[i],a=n(u);if(null!=a&&(void 0===c?a==a&&!r(a):e(a,c)))var c=a,f=u}return f}},function(t,n){t.exports=function(t,n,e,r){var i=t.x,o=t.y,u=i-r.x,a=o-r.y,c=Math.sqrt(n*n*a*a+e*e*u*u),f=Math.abs(n*e*u/c);r.x<i&&(f=-f);var s=Math.abs(n*e*a/c);r.y<o&&(s=-s);return{x:i+f,y:o+s}}},function(t,n,e){var r=e(338),i=e(339),o=e(340);t.exports=function(t,n,e){var u=n.label,a=t.append("g");"svg"===n.labelType?o(a,n):"string"!=typeof u||"html"===n.labelType?i(a,n):r(a,n);var c,f=a.node().getBBox();switch(e){case"top":c=-n.height/2;break;case"bottom":c=n.height/2-f.height;break;default:c=-f.height/2}return a.attr("transform","translate("+-f.width/2+","+c+")"),a}},function(t,n,e){"use strict";e.r(n);var r=e(6),i=e(19),o=e(2),u=e(0),a=e(16),c=function(t){return function(){return t}};function f(t,n,e){this.target=t,this.type=n,this.transform=e}function s(t,n,e){this.k=t,this.x=n,this.y=e}s.prototype={constructor:s,scale:function(t){return 1===t?this:new s(this.k*t,this.x,this.y)},translate:function(t,n){return 0===t&0===n?this:new s(this.k,this.x+this.k*t,this.y+this.k*n)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};var l=new s(1,0,0);function h(t){return t.__zoom||l}function d(){u.event.stopImmediatePropagation()}h.prototype=s.prototype;var p=function(){u.event.preventDefault(),u.event.stopImmediatePropagation()};function v(){return!u.event.button}function g(){var t,n,e=this;return e instanceof SVGElement?(t=(e=e.ownerSVGElement||e).width.baseVal.value,n=e.height.baseVal.value):(t=e.clientWidth,n=e.clientHeight),[[0,0],[t,n]]}function y(){return this.__zoom||l}function _(){return-u.event.deltaY*(u.event.deltaMode?120:1)/500}function m(){return"ontouchstart"in this}function x(t,n,e){var r=t.invertX(n[0][0])-e[0][0],i=t.invertX(n[1][0])-e[1][0],o=t.invertY(n[0][1])-e[0][1],u=t.invertY(n[1][1])-e[1][1];return t.translate(i>r?(r+i)/2:Math.min(0,r)||Math.max(0,i),u>o?(o+u)/2:Math.min(0,o)||Math.max(0,u))}var b=function(){var t,n,e=v,h=g,b=x,w=_,M=m,E=[0,1/0],T=[[-1/0,-1/0],[1/0,1/0]],k=250,N=o.v,S=[],A=Object(r.a)("start","zoom","end"),O=500,C=150,j=0;function I(t){t.property("__zoom",y).on("wheel.zoom",U).on("mousedown.zoom",F).on("dblclick.zoom",q).filter(M).on("touchstart.zoom",B).on("touchmove.zoom",Y).on("touchend.zoom touchcancel.zoom",H).style("touch-action","none").style("-webkit-tap-highlight-color","rgba(0,0,0,0)")}function P(t,n){return(n=Math.max(E[0],Math.min(E[1],n)))===t.k?t:new s(n,t.x,t.y)}function L(t,n,e){var r=n[0]-e[0]*t.k,i=n[1]-e[1]*t.k;return r===t.x&&i===t.y?t:new s(t.k,r,i)}function R(t){return[(+t[0][0]+ +t[1][0])/2,(+t[0][1]+ +t[1][1])/2]}function z(t,n,e){t.on("start.zoom",function(){D(this,arguments).start()}).on("interrupt.zoom end.zoom",function(){D(this,arguments).end()}).tween("zoom",function(){var t=this,r=arguments,i=D(t,r),o=h.apply(t,r),u=e||R(o),a=Math.max(o[1][0]-o[0][0],o[1][1]-o[0][1]),c=t.__zoom,f="function"==typeof n?n.apply(t,r):n,l=N(c.invert(u).concat(a/c.k),f.invert(u).concat(a/f.k));return function(t){if(1===t)t=f;else{var n=l(t),e=a/n[2];t=new s(e,u[0]-n[0]*e,u[1]-n[1]*e)}i.zoom(null,t)}})}function D(t,n){for(var e,r=0,i=S.length;r<i;++r)if((e=S[r]).that===t)return e;return new V(t,n)}function V(t,n){this.that=t,this.args=n,this.index=-1,this.active=0,this.extent=h.apply(t,n)}function U(){if(e.apply(this,arguments)){var t=D(this,arguments),n=this.__zoom,r=Math.max(E[0],Math.min(E[1],n.k*Math.pow(2,w.apply(this,arguments)))),i=Object(u.mouse)(this);if(t.wheel)t.mouse[0][0]===i[0]&&t.mouse[0][1]===i[1]||(t.mouse[1]=n.invert(t.mouse[0]=i)),clearTimeout(t.wheel);else{if(n.k===r)return;t.mouse=[i,n.invert(i)],Object(a.b)(this),t.start()}p(),t.wheel=setTimeout(function(){t.wheel=null,t.end()},C),t.zoom("mouse",b(L(P(n,r),t.mouse[0],t.mouse[1]),t.extent,T))}}function F(){if(!n&&e.apply(this,arguments)){var t=D(this,arguments),r=Object(u.select)(u.event.view).on("mousemove.zoom",function(){if(p(),!t.moved){var n=u.event.clientX-c,e=u.event.clientY-f;t.moved=n*n+e*e>j}t.zoom("mouse",b(L(t.that.__zoom,t.mouse[0]=Object(u.mouse)(t.that),t.mouse[1]),t.extent,T))},!0).on("mouseup.zoom",function(){r.on("mousemove.zoom mouseup.zoom",null),Object(i.c)(u.event.view,t.moved),p(),t.end()},!0),o=Object(u.mouse)(this),c=u.event.clientX,f=u.event.clientY;Object(i.b)(u.event.view),d(),t.mouse=[o,this.__zoom.invert(o)],Object(a.b)(this),t.start()}}function q(){if(e.apply(this,arguments)){var t=this.__zoom,n=Object(u.mouse)(this),r=t.invert(n),i=t.k*(u.event.shiftKey?.5:2),o=b(L(P(t,i),n,r),h.apply(this,arguments),T);p(),k>0?Object(u.select)(this).transition().duration(k).call(z,o,n):Object(u.select)(this).call(I.transform,o)}}function B(){if(e.apply(this,arguments)){var n,r,i,o,c=D(this,arguments),f=u.event.changedTouches,s=f.length;for(d(),r=0;r<s;++r)i=f[r],o=[o=Object(u.touch)(this,f,i.identifier),this.__zoom.invert(o),i.identifier],c.touch0?c.touch1||(c.touch1=o):(c.touch0=o,n=!0);if(t&&(t=clearTimeout(t),!c.touch1))return c.end(),void((o=Object(u.select)(this).on("dblclick.zoom"))&&o.apply(this,arguments));n&&(t=setTimeout(function(){t=null},O),Object(a.b)(this),c.start())}}function Y(){var n,e,r,i,o=D(this,arguments),a=u.event.changedTouches,c=a.length;for(p(),t&&(t=clearTimeout(t)),n=0;n<c;++n)e=a[n],r=Object(u.touch)(this,a,e.identifier),o.touch0&&o.touch0[2]===e.identifier?o.touch0[0]=r:o.touch1&&o.touch1[2]===e.identifier&&(o.touch1[0]=r);if(e=o.that.__zoom,o.touch1){var f=o.touch0[0],s=o.touch0[1],l=o.touch1[0],h=o.touch1[1],d=(d=l[0]-f[0])*d+(d=l[1]-f[1])*d,v=(v=h[0]-s[0])*v+(v=h[1]-s[1])*v;e=P(e,Math.sqrt(d/v)),r=[(f[0]+l[0])/2,(f[1]+l[1])/2],i=[(s[0]+h[0])/2,(s[1]+h[1])/2]}else{if(!o.touch0)return;r=o.touch0[0],i=o.touch0[1]}o.zoom("touch",b(L(e,r,i),o.extent,T))}function H(){var t,e,r=D(this,arguments),i=u.event.changedTouches,o=i.length;for(d(),n&&clearTimeout(n),n=setTimeout(function(){n=null},O),t=0;t<o;++t)e=i[t],r.touch0&&r.touch0[2]===e.identifier?delete r.touch0:r.touch1&&r.touch1[2]===e.identifier&&delete r.touch1;r.touch1&&!r.touch0&&(r.touch0=r.touch1,delete r.touch1),r.touch0?r.touch0[1]=this.__zoom.invert(r.touch0[0]):r.end()}return I.transform=function(t,n){var e=t.selection?t.selection():t;e.property("__zoom",y),t!==e?z(t,n):e.interrupt().each(function(){D(this,arguments).start().zoom(null,"function"==typeof n?n.apply(this,arguments):n).end()})},I.scaleBy=function(t,n){I.scaleTo(t,function(){var t=this.__zoom.k,e="function"==typeof n?n.apply(this,arguments):n;return t*e})},I.scaleTo=function(t,n){I.transform(t,function(){var t=h.apply(this,arguments),e=this.__zoom,r=R(t),i=e.invert(r),o="function"==typeof n?n.apply(this,arguments):n;return b(L(P(e,o),r,i),t,T)})},I.translateBy=function(t,n,e){I.transform(t,function(){return b(this.__zoom.translate("function"==typeof n?n.apply(this,arguments):n,"function"==typeof e?e.apply(this,arguments):e),h.apply(this,arguments),T)})},I.translateTo=function(t,n,e){I.transform(t,function(){var t=h.apply(this,arguments),r=this.__zoom,i=R(t);return b(l.translate(i[0],i[1]).scale(r.k).translate("function"==typeof n?-n.apply(this,arguments):-n,"function"==typeof e?-e.apply(this,arguments):-e),t,T)})},V.prototype={start:function(){return 1==++this.active&&(this.index=S.push(this)-1,this.emit("start")),this},zoom:function(t,n){return this.mouse&&"mouse"!==t&&(this.mouse[1]=n.invert(this.mouse[0])),this.touch0&&"touch"!==t&&(this.touch0[1]=n.invert(this.touch0[0])),this.touch1&&"touch"!==t&&(this.touch1[1]=n.invert(this.touch1[0])),this.that.__zoom=n,this.emit("zoom"),this},end:function(){return 0==--this.active&&(S.splice(this.index,1),this.index=-1,this.emit("end")),this},emit:function(t){Object(u.customEvent)(new f(I,t,this.that.__zoom),A.apply,A,[t,this.that,this.args])}},I.wheelDelta=function(t){return arguments.length?(w="function"==typeof t?t:c(+t),I):w},I.filter=function(t){return arguments.length?(e="function"==typeof t?t:c(!!t),I):e},I.touchable=function(t){return arguments.length?(M="function"==typeof t?t:c(!!t),I):M},I.extent=function(t){return arguments.length?(h="function"==typeof t?t:c([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),I):h},I.scaleExtent=function(t){return arguments.length?(E[0]=+t[0],E[1]=+t[1],I):[E[0],E[1]]},I.translateExtent=function(t){return arguments.length?(T[0][0]=+t[0][0],T[1][0]=+t[1][0],T[0][1]=+t[0][1],T[1][1]=+t[1][1],I):[[T[0][0],T[0][1]],[T[1][0],T[1][1]]]},I.constrain=function(t){return arguments.length?(b=t,I):b},I.duration=function(t){return arguments.length?(k=+t,I):k},I.interpolate=function(t){return arguments.length?(N=t,I):N},I.on=function(){var t=A.on.apply(A,arguments);return t===A?I:t},I.clickDistance=function(t){return arguments.length?(j=(t=+t)*t,I):Math.sqrt(j)},I};e.d(n,"zoom",function(){return b}),e.d(n,"zoomTransform",function(){return h}),e.d(n,"zoomIdentity",function(){return l})},function(t,n,e){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(t){for(var n,e=1,r=arguments.length;e<r;e++)for(var i in n=arguments[e])Object.prototype.hasOwnProperty.call(n,i)&&(t[i]=n[i]);return t}).apply(this,arguments)},i=this&&this.__values||function(t){var n="function"==typeof Symbol&&t[Symbol.iterator],e=0;return n?n.call(t):{next:function(){return t&&e>=t.length&&(t=void 0),{value:t&&t[e++],done:!t}}}},o=this&&this.__read||function(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,i,o=e.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)u.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(e=o.return)&&e.call(o)}finally{if(i)throw i.error}}return u};Object.defineProperty(n,"__esModule",{value:!0});var u=function(){function t(){this.pool=new Map,this.drawing=!1}return t.prototype.addAll=function(t){var n,e;try{for(var u=i(t.entries?t.entries():Object.entries(t)),a=u.next();!a.done;a=u.next()){var c=o(a.value,2),f=c[0],s=c[1],l=void 0;l=this.pool.has(f)?this.pool.get(f):{hit:0,tagName:s.tagName,data:s},l=r({},l,{expiration:Date.now()+250,hit:l.hit+1}),this.pool.set(f,l)}}catch(t){n={error:t}}finally{try{a&&!a.done&&(e=u.return)&&e.call(u)}finally{if(n)throw n.error}}this.scheduleDraw()},t.prototype.add=function(t,n,e){var i;i=this.pool.has(t)?this.pool.get(t):{hit:0,tagName:n,data:e},i=r({},i,{expiration:Date.now()+250,hit:i.hit+1}),this.pool=this.pool.set(t,i),this.scheduleDraw()},t.prototype.firstExpirationDate=function(){var t,n,e=Date.now(),r=Number.MAX_VALUE,u=new Map;try{for(var a=i(this.pool.entries()),c=a.next();!c.done;c=a.next()){var f=o(c.value,2),s=f[0],l=f[1];l.expiration>e&&(r=Math.min(l.expiration,r),u.set(s,l))}}catch(n){t={error:n}}finally{try{c&&!c.done&&(n=a.return)&&n.call(a)}finally{if(t)throw t.error}}return this.pool=u,r},t.prototype.draw=function(){var t=Date.now(),n=this.firstExpirationDate();this.drawImpl(this.pool),this.pool.size>0&&(null!=this.clearTimer&&clearTimeout(this.clearTimer),this.clearTimer=setTimeout(this.redraw.bind(this),n-t)),this.drawing=!1},t.prototype.redraw=function(){this.clearTimer=null,!this.drawing&&this.pool.size>0&&(this.drawing=!0,this.draw())},t.prototype.scheduleDraw=function(){this.drawing||(this.drawing=!0,requestAnimationFrame(this.draw.bind(this)))},t}();n.UpdatePoolManager=u},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(23),i=e(37),o=e(38),u=e(84),a=e(32);function c(t){for(var n=t.lView,e=t.work,o=t.nextCurrentLContainer,u=t.nextViewRefIndex,a=t.exitLoopPrematurely,c=void 0!==a&&a,f=void 0!==o?o:n[r.CHILD_HEAD];null!==f;f=f[r.NEXT])if(-1===f[r.ACTIVE_INDEX]&&i.isLContainer(f)){for(var s=u||r.CONTAINER_HEADER_OFFSET;s<f.length;s++){if(e(f[s],s>=f.length,s,f[r.NEXT]),c)return!0}u=void 0}return!1}function f(t){var n=t.lView,e=t.work,o=t.exitLoopPrematurely,u=n[r.TVIEW];if(null!=u.components)for(var a=0;a<u.components.length;a++){if(e(i.getComponentViewByIndex(u.components[a],n)),o)return!0}return!1}n.loopDynamicEmbeddedViews=c,n.loopChildComponents=f,n.traverseTreeAndCreateTreeStructure=function(t,n){return s(function(t,n){return n.children.push(t)})(t,n)},n.traverseTreeAndCreateInstructions=function(t,n){var e=[];return s(function(t){return e.push(t)},e)(t,n)};var s=function(t,n){return function e(i,s,l){var h=o.createInitialTreeViewState(i,s,l);i[r.HOST]&&!s&&t(h,l);c({lView:i,work:function(t){e(t,!1,h.lView[r.HOST]?h:l)}});if(f({lView:i,work:function(t){t[r.HOST][a.DEVTOOLS_IDENTIFIER]||(t[r.HOST][a.DEVTOOLS_IDENTIFIER]=u()),e(t,!1,h.lView[r.HOST]?h:l)}}),s)return n||h}};n.transformTreeToInstructions=function(t){var n=new Map,e=function(t){n.set(t.uuid,t),t.children.forEach(function(t){return e(t)})};return e(t),n},n.getRealParent=function t(n){return n.lView[r.HOST]?n:t(n.parent)}},function(t,n,e){var r=e(159),i=e(160),o=i;o.v1=r,o.v4=i,t.exports=o},function(t,n){var e="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof window.msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto);if(e){var r=new Uint8Array(16);t.exports=function(){return e(r),r}}else{var i=new Array(16);t.exports=function(){for(var t,n=0;n<16;n++)0==(3&n)&&(t=4294967296*Math.random()),i[n]=t>>>((3&n)<<3)&255;return i}}},function(t,n){for(var e=[],r=0;r<256;++r)e[r]=(r+256).toString(16).substr(1);t.exports=function(t,n){var r=n||0,i=e;return[i[t[r++]],i[t[r++]],i[t[r++]],i[t[r++]],"-",i[t[r++]],i[t[r++]],"-",i[t[r++]],i[t[r++]],"-",i[t[r++]],i[t[r++]],"-",i[t[r++]],i[t[r++]],i[t[r++]],i[t[r++]],i[t[r++]],i[t[r++]]].join("")}},function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)});Object.defineProperty(n,"__esModule",{value:!0});var o=e(162),u=e(0),a=e(81),c=e(32),f=e(82);function s(t,n,e){var r=(new o.graphlib.Graph).setGraph({}).setDefaultEdgeLabel(function(){return{}});l(r,n,e);var i=u.select("svg#"+t),c=i.select("g"),f=0===c.node().children.length,s=a.zoom().on("zoom",function(){c.attr("transform",u.event.transform)});i.call(s),(new o.render)(c,r),f&&function(t,n,e){var r=t.node().getBBox(),i=t.node().parentElement,o=i.clientWidth,u=i.clientHeight,c=r.width,f=r.height,s=r.x+c/2,l=r.y+f/2;if(0===c||0===f)return;var h=.75/Math.max(c/o,f/u),d=[o/2-h*s,u/2-h*l],p=a.zoomIdentity.translate(d[0],d[1]).scale(h);t.transition().duration(0).call(e.transform,p)}(i,0,s)}function l(t,n,e){var r=n.uuid;if(e&&e.has(r)){var i=e.get(r);t.setNode(r,{label:n.tagName,class:i.hit?c.COLORS_CLASSES[i.hit-1]:c.COLORS_CLASSES[0]})}else t.setNode(r,{label:n.tagName,class:c.NOT_UPDATED_NODE_CLASS_NAME});n.children.forEach(function(n){var i=n.uuid;l(t,n,e),t.setEdge(r,i)})}n.renderTree=s,n.walkTreeAndAddNodes=l;var h=function(t){function n(n){var e=t.call(this)||this;return e.id=n,e}return i(n,t),n.prototype.setUpdates=function(t,n){this.serializedTreeViewItem=t,this.addAll(n)},n.prototype.drawImpl=function(t){s(this.id,this.serializedTreeViewItem,this.pool)},n}(f.UpdatePoolManager);n.GraphRender=h},function(t,n,e){var r=e(164);t.exports={Graph:r.Graph,json:e(267),alg:e(268),version:r.version}},function(t,n,e){var r=e(39),i=e(61),o=e(44),u=e(195),a=e(201),c=e(95),f=e(96),s=e(204),l=e(205),h=e(100),d=e(206),p=e(29),v=e(210),g=e(211),y=e(105),_=e(4),m=e(27),x=e(215),b=e(8),w=e(217),M=e(17),E=1,T=2,k=4,N="[object Arguments]",S="[object Function]",A="[object GeneratorFunction]",O="[object Object]",C={};C[N]=C["[object Array]"]=C["[object ArrayBuffer]"]=C["[object DataView]"]=C["[object Boolean]"]=C["[object Date]"]=C["[object Float32Array]"]=C["[object Float64Array]"]=C["[object Int8Array]"]=C["[object Int16Array]"]=C["[object Int32Array]"]=C["[object Map]"]=C["[object Number]"]=C[O]=C["[object RegExp]"]=C["[object Set]"]=C["[object String]"]=C["[object Symbol]"]=C["[object Uint8Array]"]=C["[object Uint8ClampedArray]"]=C["[object Uint16Array]"]=C["[object Uint32Array]"]=!0,C["[object Error]"]=C[S]=C["[object WeakMap]"]=!1,t.exports=function t(n,e,j,I,P,L){var R,z=e&E,D=e&T,V=e&k;if(j&&(R=P?j(n,I,P,L):j(n)),void 0!==R)return R;if(!b(n))return n;var U=_(n);if(U){if(R=v(n),!z)return f(n,R)}else{var F=p(n),q=F==S||F==A;if(m(n))return c(n,z);if(F==O||F==N||q&&!P){if(R=D||q?{}:y(n),!z)return D?l(n,a(R,n)):s(n,u(R,n))}else{if(!C[F])return P?n:{};R=g(n,F,z)}}L||(L=new r);var B=L.get(n);if(B)return B;L.set(n,R),w(n)?n.forEach(function(r){R.add(t(r,e,j,r,n,L))}):x(n)&&n.forEach(function(r,i){R.set(i,t(r,e,j,i,n,L))});var Y=V?D?d:h:D?keysIn:M,H=U?void 0:Y(n);return i(H||n,function(r,i){H&&(r=n[i=r]),o(R,i,t(r,e,j,i,n,L))}),R}},function(t,n,e){(function(n){var e="object"==typeof n&&n&&n.Object===Object&&n;t.exports=e}).call(this,e(177))},function(t,n){var e=Function.prototype.toString;t.exports=function(t){if(null!=t){try{return e.call(t)}catch(t){}try{return t+""}catch(t){}}return""}},function(t,n,e){var r=e(20),i=function(){try{var t=r(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();t.exports=i},function(t,n,e){var r=e(196),i=e(34),o=e(4),u=e(27),a=e(46),c=e(35),f=Object.prototype.hasOwnProperty;t.exports=function(t,n){var e=o(t),s=!e&&i(t),l=!e&&!s&&u(t),h=!e&&!s&&!l&&c(t),d=e||s||l||h,p=d?r(t.length,String):[],v=p.length;for(var g in t)!n&&!f.call(t,g)||d&&("length"==g||l&&("offset"==g||"parent"==g)||h&&("buffer"==g||"byteLength"==g||"byteOffset"==g)||a(g,v))||p.push(g);return p}},function(t,n){t.exports=function(t,n){return function(e){return t(n(e))}}},function(t,n,e){(function(t){var r=e(10),i=n&&!n.nodeType&&n,o=i&&"object"==typeof t&&t&&!t.nodeType&&t,u=o&&o.exports===i?r.Buffer:void 0,a=u?u.allocUnsafe:void 0;t.exports=function(t,n){if(n)return t.slice();var e=t.length,r=a?a(e):new t.constructor(e);return t.copy(r),r}}).call(this,e(62)(t))},function(t,n){t.exports=function(t,n){var e=-1,r=t.length;for(n||(n=Array(r));++e<r;)n[e]=t[e];return n}},function(t,n){t.exports=function(t,n){for(var e=-1,r=null==t?0:t.length,i=0,o=[];++e<r;){var u=t[e];n(u,e,t)&&(o[i++]=u)}return o}},function(t,n){t.exports=function(){return[]}},function(t,n,e){var r=e(67),i=e(49),o=e(66),u=e(98),a=Object.getOwnPropertySymbols?function(t){for(var n=[];t;)r(n,o(t)),t=i(t);return n}:u;t.exports=a},function(t,n,e){var r=e(101),i=e(66),o=e(17);t.exports=function(t){return r(t,o,i)}},function(t,n,e){var r=e(67),i=e(4);t.exports=function(t,n,e){var o=n(t);return i(t)?o:r(o,e(t))}},function(t,n,e){var r=e(20)(e(10),"Set");t.exports=r},function(t,n,e){var r=e(10).Uint8Array;t.exports=r},function(t,n,e){var r=e(68);t.exports=function(t,n){var e=n?r(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.length)}},function(t,n,e){var r=e(106),i=e(49),o=e(48);t.exports=function(t){return"function"!=typeof t.constructor||o(t)?{}:r(i(t))}},function(t,n,e){var r=e(8),i=Object.create,o=function(){function t(){}return function(n){if(!r(n))return{};if(i)return i(n);t.prototype=n;var e=new t;return t.prototype=void 0,e}}();t.exports=o},function(t,n,e){var r=e(61),i=e(50),o=e(108),u=e(4);t.exports=function(t,n){return(u(t)?r:i)(t,o(n))}},function(t,n,e){var r=e(22);t.exports=function(t){return"function"==typeof t?t:r}},function(t,n,e){var r=e(97),i=e(221),o=e(15),u=e(4);t.exports=function(t,n){return(u(t)?r:i)(t,o(n,3))}},function(t,n,e){var r=e(224),i=e(13);t.exports=function t(n,e,o,u,a){return n===e||(null==n||null==e||!i(n)&&!i(e)?n!=n&&e!=e:r(n,e,o,u,t,a))}},function(t,n,e){var r=e(112),i=e(227),o=e(113),u=1,a=2;t.exports=function(t,n,e,c,f,s){var l=e&u,h=t.length,d=n.length;if(h!=d&&!(l&&d>h))return!1;var p=s.get(t);if(p&&s.get(n))return p==n;var v=-1,g=!0,y=e&a?new r:void 0;for(s.set(t,n),s.set(n,t);++v<h;){var _=t[v],m=n[v];if(c)var x=l?c(m,_,v,n,t,s):c(_,m,v,t,n,s);if(void 0!==x){if(x)continue;g=!1;break}if(y){if(!i(n,function(t,n){if(!o(y,n)&&(_===t||f(_,t,e,c,s)))return y.push(n)})){g=!1;break}}else if(_!==m&&!f(_,m,e,c,s)){g=!1;break}}return s.delete(t),s.delete(n),g}},function(t,n,e){var r=e(60),i=e(225),o=e(226);function u(t){var n=-1,e=null==t?0:t.length;for(this.__data__=new r;++n<e;)this.add(t[n])}u.prototype.add=u.prototype.push=i,u.prototype.has=o,t.exports=u},function(t,n){t.exports=function(t,n){return t.has(n)}},function(t,n,e){var r=e(8);t.exports=function(t){return t==t&&!r(t)}},function(t,n){t.exports=function(t,n){return function(e){return null!=e&&e[t]===n&&(void 0!==n||t in Object(e))}}},function(t,n,e){var r=e(237);t.exports=function(t){return null==t?"":r(t)}},function(t,n,e){var r=e(238),i=e(118);t.exports=function(t,n){return null!=t&&i(t,n,r)}},function(t,n,e){var r=e(51),i=e(34),o=e(4),u=e(46),a=e(63),c=e(36);t.exports=function(t,n,e){for(var f=-1,s=(n=r(n,t)).length,l=!1;++f<s;){var h=c(n[f]);if(!(l=null!=t&&e(t,h)))break;t=t[h]}return l||++f!=s?l:!!(s=null==t?0:t.length)&&a(s)&&u(h,s)&&(o(t)||i(t))}},function(t,n){t.exports=function(t){return function(n){return null==n?void 0:n[t]}}},function(t,n){t.exports=function(t){return void 0===t}},function(t,n,e){var r=e(52),i=e(15),o=e(122),u=e(4);t.exports=function(t,n){return(u(t)?r:o)(t,i(n,3))}},function(t,n,e){var r=e(50),i=e(14);t.exports=function(t,n){var e=-1,o=i(t)?Array(t.length):[];return r(t,function(t,r,i){o[++e]=n(t,r,i)}),o}},function(t,n,e){var r=e(243),i=e(50),o=e(15),u=e(244),a=e(4);t.exports=function(t,n,e){var c=a(t)?r:u,f=arguments.length<3;return c(t,o(n,4),e,f,i)}},function(t,n,e){var r=e(254),i=Math.max;t.exports=function(t,n,e){return n=i(void 0===n?t.length-1:n,0),function(){for(var o=arguments,u=-1,a=i(o.length-n,0),c=Array(a);++u<a;)c[u]=o[n+u];u=-1;for(var f=Array(n+1);++u<n;)f[u]=o[u];return f[n]=e(c),r(t,this,f)}}},function(t,n,e){var r=e(255),i=e(256)(r);t.exports=i},function(t,n){t.exports=function(t,n,e,r){for(var i=t.length,o=e+(r?1:-1);r?o--:++o<i;)if(n(t[o],o,t))return o;return-1}},function(t,n,e){var r=e(14),i=e(13);t.exports=function(t){return i(t)&&r(t)}},function(t,n,e){var r=e(265),i=e(17);t.exports=function(t){return null==t?[]:r(t,i(t))}},function(t,n,e){var r=e(7),i=e(130);t.exports=function(t,n,e,r){return function(t,n,e,r){var o,u,a={},c=new i,f=function(t){var n=t.v!==o?t.v:t.w,r=a[n],i=e(t),f=u.distance+i;if(i<0)throw new Error("dijkstra does not allow negative edge weights. Bad edge: "+t+" Weight: "+i);f<r.distance&&(r.distance=f,r.predecessor=o,c.decrease(n,f))};t.nodes().forEach(function(t){var e=t===n?0:Number.POSITIVE_INFINITY;a[t]={distance:e},c.add(t,e)});for(;c.size()>0&&(o=c.removeMin(),(u=a[o]).distance!==Number.POSITIVE_INFINITY);)r(o).forEach(f);return a}(t,String(n),e||o,r||function(n){return t.outEdges(n)})};var o=r.constant(1)},function(t,n,e){var r=e(7);function i(){this._arr=[],this._keyIndices={}}t.exports=i,i.prototype.size=function(){return this._arr.length},i.prototype.keys=function(){return this._arr.map(function(t){return t.key})},i.prototype.has=function(t){return r.has(this._keyIndices,t)},i.prototype.priority=function(t){var n=this._keyIndices[t];if(void 0!==n)return this._arr[n].priority},i.prototype.min=function(){if(0===this.size())throw new Error("Queue underflow");return this._arr[0].key},i.prototype.add=function(t,n){var e=this._keyIndices;if(t=String(t),!r.has(e,t)){var i=this._arr,o=i.length;return e[t]=o,i.push({key:t,priority:n}),this._decrease(o),!0}return!1},i.prototype.removeMin=function(){this._swap(0,this._arr.length-1);var t=this._arr.pop();return delete this._keyIndices[t.key],this._heapify(0),t.key},i.prototype.decrease=function(t,n){var e=this._keyIndices[t];if(n>this._arr[e].priority)throw new Error("New priority is greater than current priority. Key: "+t+" Old: "+this._arr[e].priority+" New: "+n);this._arr[e].priority=n,this._decrease(e)},i.prototype._heapify=function(t){var n=this._arr,e=2*t,r=e+1,i=t;e<n.length&&(i=n[e].priority<n[i].priority?e:i,r<n.length&&(i=n[r].priority<n[i].priority?r:i),i!==t&&(this._swap(t,i),this._heapify(i)))},i.prototype._decrease=function(t){for(var n,e=this._arr,r=e[t].priority;0!==t&&!(e[n=t>>1].priority<r);)this._swap(t,n),t=n},i.prototype._swap=function(t,n){var e=this._arr,r=this._keyIndices,i=e[t],o=e[n];e[t]=o,e[n]=i,r[o.key]=t,r[i.key]=n}},function(t,n,e){var r=e(7);t.exports=function(t){var n=0,e=[],i={},o=[];return t.nodes().forEach(function(u){r.has(i,u)||function u(a){var c=i[a]={onStack:!0,lowlink:n,index:n++};if(e.push(a),t.successors(a).forEach(function(t){r.has(i,t)?i[t].onStack&&(c.lowlink=Math.min(c.lowlink,i[t].index)):(u(t),c.lowlink=Math.min(c.lowlink,i[t].lowlink))}),c.lowlink===c.index){var f,s=[];do{f=e.pop(),i[f].onStack=!1,s.push(f)}while(a!==f);o.push(s)}}(u)}),o}},function(t,n,e){var r=e(7);function i(t){var n={},e={},i=[];if(r.each(t.sinks(),function u(a){if(r.has(e,a))throw new o;r.has(n,a)||(e[a]=!0,n[a]=!0,r.each(t.predecessors(a),u),delete e[a],i.push(a))}),r.size(n)!==t.nodeCount())throw new o;return i}function o(){}t.exports=i,i.CycleException=o,o.prototype=new Error},function(t,n,e){var r=e(7);t.exports=function(t,n,e){r.isArray(n)||(n=[n]);var i=(t.isDirected()?t.successors:t.neighbors).bind(t),o=[],u={};return r.each(n,function(n){if(!t.hasNode(n))throw new Error("Graph does not have node: "+n);!function t(n,e,i,o,u,a){r.has(o,e)||(o[e]=!0,i||a.push(e),r.each(u(e),function(e){t(n,e,i,o,u,a)}),i&&a.push(e))}(t,n,"post"===e,u,i,o)}),o}},function(t,n,e){var r;try{r=e(277)}catch(t){}r||(r=window.dagre),t.exports=r},function(t,n,e){var r=e(53),i=e(24),o=e(54),u=e(28),a=Object.prototype,c=a.hasOwnProperty,f=r(function(t,n){t=Object(t);var e=-1,r=n.length,f=r>2?n[2]:void 0;for(f&&o(n[0],n[1],f)&&(r=1);++e<r;)for(var s=n[e],l=u(s),h=-1,d=l.length;++h<d;){var p=l[h],v=t[p];(void 0===v||i(v,a[p])&&!c.call(t,p))&&(t[p]=s[p])}return t});t.exports=f},function(t,n,e){var r=e(284),i=1/0,o=17976931348623157e292;t.exports=function(t){return t?(t=r(t))===i||t===-i?(t<0?-1:1)*o:t==t?t:0:0===t?t:0}},function(t,n,e){var r=e(77);t.exports=function(t){return null!=t&&t.length?r(t,1):[]}},function(t,n,e){var r=e(45),i=e(24);t.exports=function(t,n,e){(void 0===e||i(t[n],e))&&(void 0!==e||n in t)||r(t,n,e)}},function(t,n,e){var r=e(21),i=e(49),o=e(13),u="[object Object]",a=Function.prototype,c=Object.prototype,f=a.toString,s=c.hasOwnProperty,l=f.call(Object);t.exports=function(t){if(!o(t)||r(t)!=u)return!1;var n=i(t);if(null===n)return!0;var e=s.call(n,"constructor")&&n.constructor;return"function"==typeof e&&e instanceof e&&f.call(e)==l}},function(t,n){t.exports=function(t,n){if(("constructor"!==n||"function"!=typeof t[n])&&"__proto__"!=n)return t[n]}},function(t,n){t.exports=function(t,n){return t<n}},function(t,n,e){var r=e(298),i=e(301)(function(t,n){return null==t?{}:r(t,n)});t.exports=i},function(t,n,e){var r=e(302)();t.exports=r},function(t,n,e){var r=e(116),i=0;t.exports=function(t){var n=++i;return r(t)+n}},function(t,n,e){"use strict";var r=e(3),i=e(11).Graph,o=e(55).slack;function u(t,n){return r.forEach(t.nodes(),function e(i){r.forEach(n.nodeEdges(i),function(r){var u=r.v,a=i===u?r.w:u;t.hasNode(a)||o(n,r)||(t.setNode(a,{}),t.setEdge(i,a,{}),e(a))})}),t.nodeCount()}function a(t,n){return r.minBy(n.edges(),function(e){if(t.hasNode(e.v)!==t.hasNode(e.w))return o(n,e)})}function c(t,n,e){r.forEach(t.nodes(),function(t){n.node(t).rank+=e})}t.exports=function(t){var n,e,r=new i({directed:!1}),f=t.nodes()[0],s=t.nodeCount();r.setNode(f,{});for(;u(r,t)<s;)n=a(r,t),e=r.hasNode(n.v)?o(t,n):-o(t,n),c(r,t,e);return r}},function(t,n){t.exports=function(t,n){return t.intersect(n)}},function(t,n,e){var r=e(79);t.exports=function(t,n,e){return r(t,n,n,e)}},function(t,n,e){var r=e(335);t.exports=function(t,n,e){var i=t.x,o=t.y,u=[],a=Number.POSITIVE_INFINITY,c=Number.POSITIVE_INFINITY;n.forEach(function(t){a=Math.min(a,t.x),c=Math.min(c,t.y)});for(var f=i-t.width/2-a,s=o-t.height/2-c,l=0;l<n.length;l++){var h=n[l],d=n[l<n.length-1?l+1:0],p=r(t,e,{x:f+h.x,y:s+h.y},{x:f+d.x,y:s+d.y});p&&u.push(p)}if(!u.length)return console.log("NO INTERSECTION FOUND, RETURN NODE CENTER",t),t;u.length>1&&u.sort(function(t,n){var r=t.x-e.x,i=t.y-e.y,o=Math.sqrt(r*r+i*i),u=n.x-e.x,a=n.y-e.y,c=Math.sqrt(u*u+a*a);return o<c?-1:o===c?0:1});return u[0]}},function(t,n){t.exports=function(t,n){var e,r,i=t.x,o=t.y,u=n.x-i,a=n.y-o,c=t.width/2,f=t.height/2;Math.abs(a)*c>Math.abs(u)*f?(a<0&&(f=-f),e=0===a?0:f*u/a,r=f):(u<0&&(c=-c),e=c,r=0===u?0:c*a/u);return{x:i+e,y:o+r}}},,,,,function(t,n,e){"use strict";var r=this&&this.__read||function(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,i,o=e.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)u.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(e=o.return)&&e.call(o)}finally{if(i)throw i.error}}return u};Object.defineProperty(n,"__esModule",{value:!0});var i=e(155);window.addEventListener("message",function(t){if(console.log("received message"),t.data&&Array.isArray(t.data)){var n=r(t.data,2),e=n[0],i=n[1];if(i&&"ngProfilerDevtoolsContentScript"===i.source&&o[i.action]){var u=o[i.action](i.payload),a=[e,{source:"ngProfilerDevtoolsInjectedScript",action:i.action,payload:u}];postMessage(a,"*")}}});var o={isAngularApp:function(){return i.isAngularApp()},toggleTracing:function(t){return t.enabled?i.startTracing():i.stopTracing()}}},function(t,n,e){"use strict";function r(t){for(var e in t)n.hasOwnProperty(e)||(n[e]=t[e])}Object.defineProperty(n,"__esModule",{value:!0});var i=e(37),o=e(156),u=e(23);r(e(38)),r(e(350)),n.startTracing=function(){console.log("starting tracing"),setTimeout(function(){var t=i.findAngularRootNode(document.body);t&&o.monkeyPatchRootNode(t[u.CONTEXT])},2e3)},n.stopTracing=function(){o.undoMonkeyPatch()},n.isAngularApp=function(){return void 0!==i.findAngularRootNode(document.body)}},function(t,n,e){"use strict";var r=this&&this.__read||function(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,i,o=e.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)u.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(e=o.return)&&e.call(o)}finally{if(i)throw i.error}}return u},i=this&&this.__spread||function(){for(var t=[],n=0;n<arguments.length;n++)t=t.concat(r(arguments[n]));return t};Object.defineProperty(n,"__esModule",{value:!0});var o=e(23),u=e(157),a=e(158),c=e(37),f=e(83),s=e(161),l=e(87),h=e(84),d=e(32),p=e(38),v=new u.Tracer,g=(new l.GraphRender("liveTree"),new a.LViewStateManager),y=[],_=0,m=function(t,n){if(!t.template.__template_patched__){var e=t.template;t.template=function(){for(var t=[],r=0;r<arguments.length;r++)t[r]=arguments[r];console.log(n,t[0],_),n&&_++;var a=t[0];if(1===a||1!==_)return console.log("short circuiting"),void e.apply(void 0,i(t));n&&(g.resetState(),console.log("scheduled!"),s.scheduleOutsideOfZone(function(){_=0;var t=p.serialiseTreeViewItem(g.getTree()),e=p.serialiseTreeViewItem(f.traverseTreeAndCreateTreeStructure(n,!0)),r=f.transformTreeToInstructions(t);window.dispatchEvent(new CustomEvent("ContentScriptEvent",{detail:{type:"ENTIRE_TREE",payload:{entireTree:e,instructions:c.mapToObject(r)}}})),console.log("updatedTree",t),window.dispatchEvent(new CustomEvent("ContentScriptEvent",{detail:{type:"UPDATED_TREE",payload:{updatedTree:t}}}))})),g.getNextLView(null,n);var l=g.predictedNextLView;l[o.HOST][d.DEVTOOLS_IDENTIFIER]||(l[o.HOST][d.DEVTOOLS_IDENTIFIER]=h()),e.apply(void 0,i(t)),x(l),s.scheduleOutsideOfZone(function(){v.present(l[o.HOST][d.DEVTOOLS_IDENTIFIER],l[o.HOST].tagName,u.createMeasurement(l[0].getBoundingClientRect()))})},t.template.__template_patched__=!0,y.push({origTemplate:e,tView:t})}};function x(t,n){var e;void 0===n&&(n=!1),e=n?function(t){return m(t[o.TVIEW],t)}:function(t){return m(t[o.TVIEW])},f.loopChildComponents({lView:t,work:e});f.loopDynamicEmbeddedViews({lView:t,work:function(t){t[o.HOST]&&m(t[o.TVIEW]),x(t)}})}n.monkeyPatchDirectChildren=x,n.monkeyPatchRootNode=function(t){for(var n=0;n<t.components.length;n++){var e=t.components[n];x(c.readPatchedLView(e),!0)}},n.undoMonkeyPatch=function(){y.forEach(function(t){t.tView.template=t.origTemplate}),y=[]}},function(t,n,e){"use strict";var r,i=this&&this.__extends||(r=function(t,n){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,n)},function(t,n){function e(){this.constructor=t}r(t,n),t.prototype=null===n?Object.create(n):(e.prototype=n.prototype,new e)}),o=this&&this.__values||function(t){var n="function"==typeof Symbol&&t[Symbol.iterator],e=0;return n?n.call(t):{next:function(){return t&&e>=t.length&&(t=void 0),{value:t&&t[e++],done:!t}}}},u=this&&this.__read||function(t,n){var e="function"==typeof Symbol&&t[Symbol.iterator];if(!e)return t;var r,i,o=e.call(t),u=[];try{for(;(void 0===n||n-- >0)&&!(r=o.next()).done;)u.push(r.value)}catch(t){i={error:t}}finally{try{r&&!r.done&&(e=o.return)&&e.call(o)}finally{if(i)throw i.error}}return u};Object.defineProperty(n,"__esModule",{value:!0});var a=e(82),c=e(32),f=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return i(n,t),n.prototype.present=function(t,n,e){this.add(t,n,e)},n.prototype.drawImpl=function(t){var n,e;this.ensureCanvas();var r=this.canvas,i=r.getContext("2d");i.clearRect(0,0,r.width,r.height);try{for(var a=o(t.entries()),f=a.next();!f.done;f=a.next()){var l=u(f.value,2),h=(l[0],l[1]),d=c.COLORS[h.hit-1]||c.HOTTEST_COLOR;s(i,h.data,1,d)}}catch(t){n={error:t}}finally{try{f&&!f.done&&(e=a.return)&&e.call(a)}finally{if(n)throw n.error}}},n.prototype.ensureCanvas=function(){var t=this.canvas;if(null==t&&((t=window.document.getElementById("TraceUpdatesWebNodePresenter")||window.document.createElement("canvas")).id="TraceUpdatesWebNodePresenter",t.width=window.screen.availWidth,t.height=window.screen.availHeight,t.style.cssText="\n        xx-background-color: red;\n        xx-opacity: 0.5;\n        bottom: 0;\n        left: 0;\n        pointer-events: none;\n        position: fixed;\n        right: 0;\n        top: 0;\n        z-index: 1000000000;\n      "),!t.parentNode){var n=window.document.documentElement;n.insertBefore(t,n.firstChild)}this.canvas=t},n}(a.UpdatePoolManager);function s(t,n,e,r){t.lineWidth=1,t.strokeStyle=c.OUTLINE_COLOR,t.strokeRect(n.left-1,n.top-1,n.width+2,n.height+2),t.lineWidth=1,t.strokeStyle=c.OUTLINE_COLOR,t.strokeRect(n.left+e,n.top+e,n.width-e,n.height-e),t.strokeStyle=r,t.setLineDash([0]),t.lineWidth=e,t.strokeRect(n.left+Math.floor(e/2),n.top+Math.floor(e/2),n.width-e,n.height-e),t.setLineDash([0])}n.Tracer=f,n.createMeasurement=function(t){return{left:t.left,top:t.top,width:t.width,height:t.height}}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=e(23),i=e(37),o=e(83),u=e(38),a=function(){function t(){}return t.prototype.getNextLView=function(t,n){var e=this;if(!this.predictedNextLView){var a=u.createInitialTreeViewState(n,!0);return this.treeViewBuilder=new u.TreeViewBuilder,this.treeViewBuilder.addTreeViewItem(a),void(this.predictedNextLView=n)}if(t||(t=this.treeViewBuilder.currentTreeViewItem),!t.dynamicEmbeddedViewsChecked){if(o.loopDynamicEmbeddedViews({lView:t.lView,work:function(n,r,i,o){r?t.nextCurrent=o:t.currentViewRefIndex=i+1,e.getNextLView(u.createInitialTreeViewState(n,!1,t))},nextCurrentLContainer:t.nextCurrent,nextViewRefIndex:t.currentViewRefIndex,exitLoopPrematurely:!0}))return;t.dynamicEmbeddedViewsChecked=!0}var c=t.lView[r.TVIEW].components;if(!c||t.currentIndex>=c.length)return t.isRoot?void 0:void this.getNextLView(t.parent);var f=t.lView[c[t.currentIndex]];if(!t.isRoot&&i.shouldLViewBeChecked(f))return t.currentIndex++,void this.getNextLView(t);this.predictedNextLView=t.lView[c[t.currentIndex]]||t.lView,t.currentIndex++;var s=u.createInitialTreeViewState(this.predictedNextLView,!1,t);this.treeViewBuilder.addTreeViewItem(s,o.getRealParent(t))},t.prototype.resetState=function(){this.predictedNextLView=null},t.prototype.getTree=function(){return this.treeViewBuilder.rootTreeViewItem},t}();n.LViewStateManager=a},function(t,n,e){var r,i,o=e(85),u=e(86),a=0,c=0;t.exports=function(t,n,e){var f=n&&e||0,s=n||[],l=(t=t||{}).node||r,h=void 0!==t.clockseq?t.clockseq:i;if(null==l||null==h){var d=o();null==l&&(l=r=[1|d[0],d[1],d[2],d[3],d[4],d[5]]),null==h&&(h=i=16383&(d[6]<<8|d[7]))}var p=void 0!==t.msecs?t.msecs:(new Date).getTime(),v=void 0!==t.nsecs?t.nsecs:c+1,g=p-a+(v-c)/1e4;if(g<0&&void 0===t.clockseq&&(h=h+1&16383),(g<0||p>a)&&void 0===t.nsecs&&(v=0),v>=1e4)throw new Error("uuid.v1(): Can't create more than 10M uuids/sec");a=p,c=v,i=h;var y=(1e4*(268435455&(p+=122192928e5))+v)%4294967296;s[f++]=y>>>24&255,s[f++]=y>>>16&255,s[f++]=y>>>8&255,s[f++]=255&y;var _=p/4294967296*1e4&268435455;s[f++]=_>>>8&255,s[f++]=255&_,s[f++]=_>>>24&15|16,s[f++]=_>>>16&255,s[f++]=h>>>8|128,s[f++]=255&h;for(var m=0;m<6;++m)s[f+m]=l[m];return n||u(s)}},function(t,n,e){var r=e(85),i=e(86);t.exports=function(t,n,e){var o=n&&e||0;"string"==typeof t&&(n="binary"===t?new Array(16):null,t=null);var u=(t=t||{}).random||(t.rng||r)();if(u[6]=15&u[6]|64,u[8]=63&u[8]|128,n)for(var a=0;a<16;++a)n[o+a]=u[a];return n||i(u)}},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.scheduleOutsideOfZone=function(t){Zone.root.run(function(){return new Promise(function(t){return t()}).then(function(){return t()})})}},function(t,n,e){
/**
 * @license
 * Copyright (c) 2012-2013 Chris Pettitt
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */
t.exports={graphlib:e(163),dagre:e(134),intersect:e(334),render:e(336),util:e(9),version:e(349)}},function(t,n,e){var r;try{r=e(88)}catch(t){}r||(r=window.graphlib),t.exports=r},function(t,n,e){t.exports={Graph:e(58),version:e(266)}},function(t,n,e){var r=e(89),i=4;t.exports=function(t){return r(t,i)}},function(t,n){t.exports=function(){this.__data__=[],this.size=0}},function(t,n,e){var r=e(41),i=Array.prototype.splice;t.exports=function(t){var n=this.__data__,e=r(n,t);return!(e<0||(e==n.length-1?n.pop():i.call(n,e,1),--this.size,0))}},function(t,n,e){var r=e(41);t.exports=function(t){var n=this.__data__,e=r(n,t);return e<0?void 0:n[e][1]}},function(t,n,e){var r=e(41);t.exports=function(t){return r(this.__data__,t)>-1}},function(t,n,e){var r=e(41);t.exports=function(t,n){var e=this.__data__,i=r(e,t);return i<0?(++this.size,e.push([t,n])):e[i][1]=n,this}},function(t,n,e){var r=e(40);t.exports=function(){this.__data__=new r,this.size=0}},function(t,n){t.exports=function(t){var n=this.__data__,e=n.delete(t);return this.size=n.size,e}},function(t,n){t.exports=function(t){return this.__data__.get(t)}},function(t,n){t.exports=function(t){return this.__data__.has(t)}},function(t,n,e){var r=e(40),i=e(59),o=e(60),u=200;t.exports=function(t,n){var e=this.__data__;if(e instanceof r){var a=e.__data__;if(!i||a.length<u-1)return a.push([t,n]),this.size=++e.size,this;e=this.__data__=new o(a)}return e.set(t,n),this.size=e.size,this}},function(t,n,e){var r=e(25),i=e(180),o=e(8),u=e(91),a=/^\[object .+?Constructor\]$/,c=Function.prototype,f=Object.prototype,s=c.toString,l=f.hasOwnProperty,h=RegExp("^"+s.call(l).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");t.exports=function(t){return!(!o(t)||i(t))&&(r(t)?h:a).test(u(t))}},function(t,n){var e;e=function(){return this}();try{e=e||new Function("return this")()}catch(t){"object"==typeof window&&(e=window)}t.exports=e},function(t,n,e){var r=e(26),i=Object.prototype,o=i.hasOwnProperty,u=i.toString,a=r?r.toStringTag:void 0;t.exports=function(t){var n=o.call(t,a),e=t[a];try{t[a]=void 0;var r=!0}catch(t){}var i=u.call(t);return r&&(n?t[a]=e:delete t[a]),i}},function(t,n){var e=Object.prototype.toString;t.exports=function(t){return e.call(t)}},function(t,n,e){var r,i=e(181),o=(r=/[^.]+$/.exec(i&&i.keys&&i.keys.IE_PROTO||""))?"Symbol(src)_1."+r:"";t.exports=function(t){return!!o&&o in t}},function(t,n,e){var r=e(10)["__core-js_shared__"];t.exports=r},function(t,n){t.exports=function(t,n){return null==t?void 0:t[n]}},function(t,n,e){var r=e(184),i=e(40),o=e(59);t.exports=function(){this.size=0,this.__data__={hash:new r,map:new(o||i),string:new r}}},function(t,n,e){var r=e(185),i=e(186),o=e(187),u=e(188),a=e(189);function c(t){var n=-1,e=null==t?0:t.length;for(this.clear();++n<e;){var r=t[n];this.set(r[0],r[1])}}c.prototype.clear=r,c.prototype.delete=i,c.prototype.get=o,c.prototype.has=u,c.prototype.set=a,t.exports=c},function(t,n,e){var r=e(42);t.exports=function(){this.__data__=r?r(null):{},this.size=0}},function(t,n){t.exports=function(t){var n=this.has(t)&&delete this.__data__[t];return this.size-=n?1:0,n}},function(t,n,e){var r=e(42),i="__lodash_hash_undefined__",o=Object.prototype.hasOwnProperty;t.exports=function(t){var n=this.__data__;if(r){var e=n[t];return e===i?void 0:e}return o.call(n,t)?n[t]:void 0}},function(t,n,e){var r=e(42),i=Object.prototype.hasOwnProperty;t.exports=function(t){var n=this.__data__;return r?void 0!==n[t]:i.call(n,t)}},function(t,n,e){var r=e(42),i="__lodash_hash_undefined__";t.exports=function(t,n){var e=this.__data__;return this.size+=this.has(t)?0:1,e[t]=r&&void 0===n?i:n,this}},function(t,n,e){var r=e(43);t.exports=function(t){var n=r(this,t).delete(t);return this.size-=n?1:0,n}},function(t,n){t.exports=function(t){var n=typeof t;return"string"==n||"number"==n||"symbol"==n||"boolean"==n?"__proto__"!==t:null===t}},function(t,n,e){var r=e(43);t.exports=function(t){return r(this,t).get(t)}},function(t,n,e){var r=e(43);t.exports=function(t){return r(this,t).has(t)}},function(t,n,e){var r=e(43);t.exports=function(t,n){var e=r(this,t),i=e.size;return e.set(t,n),this.size+=e.size==i?0:1,this}},function(t,n,e){var r=e(33),i=e(17);t.exports=function(t,n){return t&&r(n,i(n),t)}},function(t,n){t.exports=function(t,n){for(var e=-1,r=Array(t);++e<t;)r[e]=n(e);return r}},function(t,n,e){var r=e(21),i=e(13),o="[object Arguments]";t.exports=function(t){return i(t)&&r(t)==o}},function(t,n){t.exports=function(){return!1}},function(t,n,e){var r=e(21),i=e(63),o=e(13),u={};u["[object Float32Array]"]=u["[object Float64Array]"]=u["[object Int8Array]"]=u["[object Int16Array]"]=u["[object Int32Array]"]=u["[object Uint8Array]"]=u["[object Uint8ClampedArray]"]=u["[object Uint16Array]"]=u["[object Uint32Array]"]=!0,u["[object Arguments]"]=u["[object Array]"]=u["[object ArrayBuffer]"]=u["[object Boolean]"]=u["[object DataView]"]=u["[object Date]"]=u["[object Error]"]=u["[object Function]"]=u["[object Map]"]=u["[object Number]"]=u["[object Object]"]=u["[object RegExp]"]=u["[object Set]"]=u["[object String]"]=u["[object WeakMap]"]=!1,t.exports=function(t){return o(t)&&i(t.length)&&!!u[r(t)]}},function(t,n,e){var r=e(94)(Object.keys,Object);t.exports=r},function(t,n,e){var r=e(33),i=e(28);t.exports=function(t,n){return t&&r(n,i(n),t)}},function(t,n,e){var r=e(8),i=e(48),o=e(203),u=Object.prototype.hasOwnProperty;t.exports=function(t){if(!r(t))return o(t);var n=i(t),e=[];for(var a in t)("constructor"!=a||!n&&u.call(t,a))&&e.push(a);return e}},function(t,n){t.exports=function(t){var n=[];if(null!=t)for(var e in Object(t))n.push(e);return n}},function(t,n,e){var r=e(33),i=e(66);t.exports=function(t,n){return r(t,i(t),n)}},function(t,n,e){var r=e(33),i=e(99);t.exports=function(t,n){return r(t,i(t),n)}},function(t,n,e){var r=e(101),i=e(99),o=e(28);t.exports=function(t){return r(t,o,i)}},function(t,n,e){var r=e(20)(e(10),"DataView");t.exports=r},function(t,n,e){var r=e(20)(e(10),"Promise");t.exports=r},function(t,n,e){var r=e(20)(e(10),"WeakMap");t.exports=r},function(t,n){var e=Object.prototype.hasOwnProperty;t.exports=function(t){var n=t.length,r=new t.constructor(n);return n&&"string"==typeof t[0]&&e.call(t,"index")&&(r.index=t.index,r.input=t.input),r}},function(t,n,e){var r=e(68),i=e(212),o=e(213),u=e(214),a=e(104),c="[object Boolean]",f="[object Date]",s="[object Map]",l="[object Number]",h="[object RegExp]",d="[object Set]",p="[object String]",v="[object Symbol]",g="[object ArrayBuffer]",y="[object DataView]",_="[object Float32Array]",m="[object Float64Array]",x="[object Int8Array]",b="[object Int16Array]",w="[object Int32Array]",M="[object Uint8Array]",E="[object Uint8ClampedArray]",T="[object Uint16Array]",k="[object Uint32Array]";t.exports=function(t,n,e){var N=t.constructor;switch(n){case g:return r(t);case c:case f:return new N(+t);case y:return i(t,e);case _:case m:case x:case b:case w:case M:case E:case T:case k:return a(t,e);case s:return new N;case l:case p:return new N(t);case h:return o(t);case d:return new N;case v:return u(t)}}},function(t,n,e){var r=e(68);t.exports=function(t,n){var e=n?r(t.buffer):t.buffer;return new t.constructor(e,t.byteOffset,t.byteLength)}},function(t,n){var e=/\w*$/;t.exports=function(t){var n=new t.constructor(t.source,e.exec(t));return n.lastIndex=t.lastIndex,n}},function(t,n,e){var r=e(26),i=r?r.prototype:void 0,o=i?i.valueOf:void 0;t.exports=function(t){return o?Object(o.call(t)):{}}},function(t,n,e){var r=e(216),i=e(47),o=e(64),u=o&&o.isMap,a=u?i(u):r;t.exports=a},function(t,n,e){var r=e(29),i=e(13),o="[object Map]";t.exports=function(t){return i(t)&&r(t)==o}},function(t,n,e){var r=e(218),i=e(47),o=e(64),u=o&&o.isSet,a=u?i(u):r;t.exports=a},function(t,n,e){var r=e(29),i=e(13),o="[object Set]";t.exports=function(t){return i(t)&&r(t)==o}},function(t,n){t.exports=function(t){return function(n,e,r){for(var i=-1,o=Object(n),u=r(n),a=u.length;a--;){var c=u[t?a:++i];if(!1===e(o[c],c,o))break}return n}}},function(t,n,e){var r=e(14);t.exports=function(t,n){return function(e,i){if(null==e)return e;if(!r(e))return t(e,i);for(var o=e.length,u=n?o:-1,a=Object(e);(n?u--:++u<o)&&!1!==i(a[u],u,a););return e}}},function(t,n,e){var r=e(50);t.exports=function(t,n){var e=[];return r(t,function(t,r,i){n(t,r,i)&&e.push(t)}),e}},function(t,n,e){var r=e(223),i=e(231),o=e(115);t.exports=function(t){var n=i(t);return 1==n.length&&n[0][2]?o(n[0][0],n[0][1]):function(e){return e===t||r(e,t,n)}}},function(t,n,e){var r=e(39),i=e(110),o=1,u=2;t.exports=function(t,n,e,a){var c=e.length,f=c,s=!a;if(null==t)return!f;for(t=Object(t);c--;){var l=e[c];if(s&&l[2]?l[1]!==t[l[0]]:!(l[0]in t))return!1}for(;++c<f;){var h=(l=e[c])[0],d=t[h],p=l[1];if(s&&l[2]){if(void 0===d&&!(h in t))return!1}else{var v=new r;if(a)var g=a(d,p,h,t,n,v);if(!(void 0===g?i(p,d,o|u,a,v):g))return!1}}return!0}},function(t,n,e){var r=e(39),i=e(111),o=e(228),u=e(230),a=e(29),c=e(4),f=e(27),s=e(35),l=1,h="[object Arguments]",d="[object Array]",p="[object Object]",v=Object.prototype.hasOwnProperty;t.exports=function(t,n,e,g,y,_){var m=c(t),x=c(n),b=m?d:a(t),w=x?d:a(n),M=(b=b==h?p:b)==p,E=(w=w==h?p:w)==p,T=b==w;if(T&&f(t)){if(!f(n))return!1;m=!0,M=!1}if(T&&!M)return _||(_=new r),m||s(t)?i(t,n,e,g,y,_):o(t,n,b,e,g,y,_);if(!(e&l)){var k=M&&v.call(t,"__wrapped__"),N=E&&v.call(n,"__wrapped__");if(k||N){var S=k?t.value():t,A=N?n.value():n;return _||(_=new r),y(S,A,e,g,_)}}return!!T&&(_||(_=new r),u(t,n,e,g,y,_))}},function(t,n){var e="__lodash_hash_undefined__";t.exports=function(t){return this.__data__.set(t,e),this}},function(t,n){t.exports=function(t){return this.__data__.has(t)}},function(t,n){t.exports=function(t,n){for(var e=-1,r=null==t?0:t.length;++e<r;)if(n(t[e],e,t))return!0;return!1}},function(t,n,e){var r=e(26),i=e(103),o=e(24),u=e(111),a=e(229),c=e(73),f=1,s=2,l="[object Boolean]",h="[object Date]",d="[object Error]",p="[object Map]",v="[object Number]",g="[object RegExp]",y="[object Set]",_="[object String]",m="[object Symbol]",x="[object ArrayBuffer]",b="[object DataView]",w=r?r.prototype:void 0,M=w?w.valueOf:void 0;t.exports=function(t,n,e,r,w,E,T){switch(e){case b:if(t.byteLength!=n.byteLength||t.byteOffset!=n.byteOffset)return!1;t=t.buffer,n=n.buffer;case x:return!(t.byteLength!=n.byteLength||!E(new i(t),new i(n)));case l:case h:case v:return o(+t,+n);case d:return t.name==n.name&&t.message==n.message;case g:case _:return t==n+"";case p:var k=a;case y:var N=r&f;if(k||(k=c),t.size!=n.size&&!N)return!1;var S=T.get(t);if(S)return S==n;r|=s,T.set(t,n);var A=u(k(t),k(n),r,w,E,T);return T.delete(t),A;case m:if(M)return M.call(t)==M.call(n)}return!1}},function(t,n){t.exports=function(t){var n=-1,e=Array(t.size);return t.forEach(function(t,r){e[++n]=[r,t]}),e}},function(t,n,e){var r=e(100),i=1,o=Object.prototype.hasOwnProperty;t.exports=function(t,n,e,u,a,c){var f=e&i,s=r(t),l=s.length;if(l!=r(n).length&&!f)return!1;for(var h=l;h--;){var d=s[h];if(!(f?d in n:o.call(n,d)))return!1}var p=c.get(t);if(p&&c.get(n))return p==n;var v=!0;c.set(t,n),c.set(n,t);for(var g=f;++h<l;){var y=t[d=s[h]],_=n[d];if(u)var m=f?u(_,y,d,n,t,c):u(y,_,d,t,n,c);if(!(void 0===m?y===_||a(y,_,e,u,c):m)){v=!1;break}g||(g="constructor"==d)}if(v&&!g){var x=t.constructor,b=n.constructor;x!=b&&"constructor"in t&&"constructor"in n&&!("function"==typeof x&&x instanceof x&&"function"==typeof b&&b instanceof b)&&(v=!1)}return c.delete(t),c.delete(n),v}},function(t,n,e){var r=e(114),i=e(17);t.exports=function(t){for(var n=i(t),e=n.length;e--;){var o=n[e],u=t[o];n[e]=[o,u,r(u)]}return n}},function(t,n,e){var r=e(110),i=e(233),o=e(117),u=e(75),a=e(114),c=e(115),f=e(36),s=1,l=2;t.exports=function(t,n){return u(t)&&a(n)?c(f(t),n):function(e){var u=i(e,t);return void 0===u&&u===n?o(e,t):r(n,u,s|l)}}},function(t,n,e){var r=e(74);t.exports=function(t,n,e){var i=null==t?void 0:r(t,n);return void 0===i?e:i}},function(t,n,e){var r=e(235),i=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,o=/\\(\\)?/g,u=r(function(t){var n=[];return 46===t.charCodeAt(0)&&n.push(""),t.replace(i,function(t,e,r,i){n.push(r?i.replace(o,"$1"):e||t)}),n});t.exports=u},function(t,n,e){var r=e(236),i=500;t.exports=function(t){var n=r(t,function(t){return e.size===i&&e.clear(),t}),e=n.cache;return n}},function(t,n,e){var r=e(60),i="Expected a function";function o(t,n){if("function"!=typeof t||null!=n&&"function"!=typeof n)throw new TypeError(i);var e=function(){var r=arguments,i=n?n.apply(this,r):r[0],o=e.cache;if(o.has(i))return o.get(i);var u=t.apply(this,r);return e.cache=o.set(i,u)||o,u};return e.cache=new(o.Cache||r),e}o.Cache=r,t.exports=o},function(t,n,e){var r=e(26),i=e(52),o=e(4),u=e(30),a=1/0,c=r?r.prototype:void 0,f=c?c.toString:void 0;t.exports=function t(n){if("string"==typeof n)return n;if(o(n))return i(n,t)+"";if(u(n))return f?f.call(n):"";var e=n+"";return"0"==e&&1/n==-a?"-0":e}},function(t,n){t.exports=function(t,n){return null!=t&&n in Object(t)}},function(t,n,e){var r=e(119),i=e(240),o=e(75),u=e(36);t.exports=function(t){return o(t)?r(u(t)):i(t)}},function(t,n,e){var r=e(74);t.exports=function(t){return function(n){return r(n,t)}}},function(t,n){var e=Object.prototype.hasOwnProperty;t.exports=function(t,n){return null!=t&&e.call(t,n)}},function(t,n,e){var r=e(65),i=e(29),o=e(34),u=e(4),a=e(14),c=e(27),f=e(48),s=e(35),l="[object Map]",h="[object Set]",d=Object.prototype.hasOwnProperty;t.exports=function(t){if(null==t)return!0;if(a(t)&&(u(t)||"string"==typeof t||"function"==typeof t.splice||c(t)||s(t)||o(t)))return!t.length;var n=i(t);if(n==l||n==h)return!t.size;if(f(t))return!r(t).length;for(var e in t)if(d.call(t,e))return!1;return!0}},function(t,n){t.exports=function(t,n,e,r){var i=-1,o=null==t?0:t.length;for(r&&o&&(e=t[++i]);++i<o;)e=n(e,t[i],i,t);return e}},function(t,n){t.exports=function(t,n,e,r,i){return i(t,function(t,i,o){e=r?(r=!1,t):n(e,t,i,o)}),e}},function(t,n,e){var r=e(65),i=e(29),o=e(14),u=e(246),a=e(247),c="[object Map]",f="[object Set]";t.exports=function(t){if(null==t)return 0;if(o(t))return u(t)?a(t):t.length;var n=i(t);return n==c||n==f?t.size:r(t).length}},function(t,n,e){var r=e(21),i=e(4),o=e(13),u="[object String]";t.exports=function(t){return"string"==typeof t||!i(t)&&o(t)&&r(t)==u}},function(t,n,e){var r=e(248),i=e(249),o=e(250);t.exports=function(t){return i(t)?o(t):r(t)}},function(t,n,e){var r=e(119)("length");t.exports=r},function(t,n){var e=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");t.exports=function(t){return e.test(t)}},function(t,n){var e="[\\ud800-\\udfff]",r="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",i="\\ud83c[\\udffb-\\udfff]",o="[^\\ud800-\\udfff]",u="(?:\\ud83c[\\udde6-\\uddff]){2}",a="[\\ud800-\\udbff][\\udc00-\\udfff]",c="(?:"+r+"|"+i+")"+"?",f="[\\ufe0e\\ufe0f]?"+c+("(?:\\u200d(?:"+[o,u,a].join("|")+")[\\ufe0e\\ufe0f]?"+c+")*"),s="(?:"+[o+r+"?",r,u,a,e].join("|")+")",l=RegExp(i+"(?="+i+")|"+s+f,"g");t.exports=function(t){for(var n=l.lastIndex=0;l.test(t);)++n;return n}},function(t,n,e){var r=e(61),i=e(106),o=e(71),u=e(15),a=e(49),c=e(4),f=e(27),s=e(25),l=e(8),h=e(35);t.exports=function(t,n,e){var d=c(t),p=d||f(t)||h(t);if(n=u(n,4),null==e){var v=t&&t.constructor;e=p?d?new v:[]:l(t)&&s(v)?i(a(t)):{}}return(p?r:o)(t,function(t,r,i){return n(e,t,r,i)}),e}},function(t,n,e){var r=e(77),i=e(53),o=e(257),u=e(127),a=i(function(t){return o(r(t,1,u,!0))});t.exports=a},function(t,n,e){var r=e(26),i=e(34),o=e(4),u=r?r.isConcatSpreadable:void 0;t.exports=function(t){return o(t)||i(t)||!!(u&&t&&t[u])}},function(t,n){t.exports=function(t,n,e){switch(e.length){case 0:return t.call(n);case 1:return t.call(n,e[0]);case 2:return t.call(n,e[0],e[1]);case 3:return t.call(n,e[0],e[1],e[2])}return t.apply(n,e)}},function(t,n,e){var r=e(69),i=e(92),o=e(22),u=i?function(t,n){return i(t,"toString",{configurable:!0,enumerable:!1,value:r(n),writable:!0})}:o;t.exports=u},function(t,n){var e=800,r=16,i=Date.now;t.exports=function(t){var n=0,o=0;return function(){var u=i(),a=r-(u-o);if(o=u,a>0){if(++n>=e)return arguments[0]}else n=0;return t.apply(void 0,arguments)}}},function(t,n,e){var r=e(112),i=e(258),o=e(262),u=e(113),a=e(263),c=e(73),f=200;t.exports=function(t,n,e){var s=-1,l=i,h=t.length,d=!0,p=[],v=p;if(e)d=!1,l=o;else if(h>=f){var g=n?null:a(t);if(g)return c(g);d=!1,l=u,v=new r}else v=n?[]:p;t:for(;++s<h;){var y=t[s],_=n?n(y):y;if(y=e||0!==y?y:0,d&&_==_){for(var m=v.length;m--;)if(v[m]===_)continue t;n&&v.push(_),p.push(y)}else l(v,_,e)||(v!==p&&v.push(_),p.push(y))}return p}},function(t,n,e){var r=e(259);t.exports=function(t,n){return!(null==t||!t.length)&&r(t,n,0)>-1}},function(t,n,e){var r=e(126),i=e(260),o=e(261);t.exports=function(t,n,e){return n==n?o(t,n,e):r(t,i,e)}},function(t,n){t.exports=function(t){return t!=t}},function(t,n){t.exports=function(t,n,e){for(var r=e-1,i=t.length;++r<i;)if(t[r]===n)return r;return-1}},function(t,n){t.exports=function(t,n,e){for(var r=-1,i=null==t?0:t.length;++r<i;)if(e(n,t[r]))return!0;return!1}},function(t,n,e){var r=e(102),i=e(264),o=e(73),u=r&&1/o(new r([,-0]))[1]==1/0?function(t){return new r(t)}:i;t.exports=u},function(t,n){t.exports=function(){}},function(t,n,e){var r=e(52);t.exports=function(t,n){return r(n,function(n){return t[n]})}},function(t,n){t.exports="2.1.7"},function(t,n,e){var r=e(7),i=e(58);function o(t){return r.map(t.nodes(),function(n){var e=t.node(n),i=t.parent(n),o={v:n};return r.isUndefined(e)||(o.value=e),r.isUndefined(i)||(o.parent=i),o})}function u(t){return r.map(t.edges(),function(n){var e=t.edge(n),i={v:n.v,w:n.w};return r.isUndefined(n.name)||(i.name=n.name),r.isUndefined(e)||(i.value=e),i})}t.exports={write:function(t){var n={options:{directed:t.isDirected(),multigraph:t.isMultigraph(),compound:t.isCompound()},nodes:o(t),edges:u(t)};r.isUndefined(t.graph())||(n.value=r.clone(t.graph()));return n},read:function(t){var n=new i(t.options).setGraph(t.value);return r.each(t.nodes,function(t){n.setNode(t.v,t.value),t.parent&&n.setParent(t.v,t.parent)}),r.each(t.edges,function(t){n.setEdge({v:t.v,w:t.w,name:t.name},t.value)}),n}}},function(t,n,e){t.exports={components:e(269),dijkstra:e(129),dijkstraAll:e(270),findCycles:e(271),floydWarshall:e(272),isAcyclic:e(273),postorder:e(274),preorder:e(275),prim:e(276),tarjan:e(131),topsort:e(132)}},function(t,n,e){var r=e(7);t.exports=function(t){var n,e={},i=[];function o(i){r.has(e,i)||(e[i]=!0,n.push(i),r.each(t.successors(i),o),r.each(t.predecessors(i),o))}return r.each(t.nodes(),function(t){n=[],o(t),n.length&&i.push(n)}),i}},function(t,n,e){var r=e(129),i=e(7);t.exports=function(t,n,e){return i.transform(t.nodes(),function(i,o){i[o]=r(t,o,n,e)},{})}},function(t,n,e){var r=e(7),i=e(131);t.exports=function(t){return r.filter(i(t),function(n){return n.length>1||1===n.length&&t.hasEdge(n[0],n[0])})}},function(t,n,e){var r=e(7);t.exports=function(t,n,e){return function(t,n,e){var r={},i=t.nodes();return i.forEach(function(t){r[t]={},r[t][t]={distance:0},i.forEach(function(n){t!==n&&(r[t][n]={distance:Number.POSITIVE_INFINITY})}),e(t).forEach(function(e){var i=e.v===t?e.w:e.v,o=n(e);r[t][i]={distance:o,predecessor:t}})}),i.forEach(function(t){var n=r[t];i.forEach(function(e){var o=r[e];i.forEach(function(e){var r=o[t],i=n[e],u=o[e],a=r.distance+i.distance;a<u.distance&&(u.distance=a,u.predecessor=i.predecessor)})})}),r}(t,n||i,e||function(n){return t.outEdges(n)})};var i=r.constant(1)},function(t,n,e){var r=e(132);t.exports=function(t){try{r(t)}catch(t){if(t instanceof r.CycleException)return!1;throw t}return!0}},function(t,n,e){var r=e(133);t.exports=function(t,n){return r(t,n,"post")}},function(t,n,e){var r=e(133);t.exports=function(t,n){return r(t,n,"pre")}},function(t,n,e){var r=e(7),i=e(58),o=e(130);t.exports=function(t,n){var e,u=new i,a={},c=new o;function f(t){var r=t.v===e?t.w:t.v,i=c.priority(r);if(void 0!==i){var o=n(t);o<i&&(a[r]=e,c.decrease(r,o))}}if(0===t.nodeCount())return u;r.each(t.nodes(),function(t){c.add(t,Number.POSITIVE_INFINITY),u.setNode(t)}),c.decrease(t.nodes()[0],0);var s=!1;for(;c.size()>0;){if(e=c.removeMin(),r.has(a,e))u.setEdge(e,a[e]);else{if(s)throw new Error("Input graph is not connected: "+t);s=!0}t.nodeEdges(e).forEach(f)}return u}},function(t,n,e){t.exports={graphlib:e(11),layout:e(278),debug:e(332),util:{time:e(5).time,notime:e(5).notime},version:e(333)}},function(t,n,e){"use strict";var r=e(3),i=e(311),o=e(314),u=e(315),a=e(5).normalizeRanks,c=e(317),f=e(5).removeEmptyRanks,s=e(318),l=e(319),h=e(320),d=e(321),p=e(330),v=e(5),g=e(11).Graph;t.exports=function(t,n){var e=n&&n.debugTiming?v.time:v.notime;e("layout",function(){var n=e("  buildLayoutGraph",function(){return function(t){var n=new g({multigraph:!0,compound:!0}),e=k(t.graph());return n.setGraph(r.merge({},_,T(e,y),r.pick(e,m))),r.forEach(t.nodes(),function(e){var i=k(t.node(e));n.setNode(e,r.defaults(T(i,x),b)),n.setParent(e,t.parent(e))}),r.forEach(t.edges(),function(e){var i=k(t.edge(e));n.setEdge(e,r.merge({},M,T(i,w),r.pick(i,E)))}),n}(t)});e("  runLayout",function(){!function(t,n){n("    makeSpaceForEdgeLabels",function(){!function(t){var n=t.graph();n.ranksep/=2,r.forEach(t.edges(),function(e){var r=t.edge(e);r.minlen*=2,"c"!==r.labelpos.toLowerCase()&&("TB"===n.rankdir||"BT"===n.rankdir?r.width+=r.labeloffset:r.height+=r.labeloffset)})}(t)}),n("    removeSelfEdges",function(){!function(t){r.forEach(t.edges(),function(n){if(n.v===n.w){var e=t.node(n.v);e.selfEdges||(e.selfEdges=[]),e.selfEdges.push({e:n,label:t.edge(n)}),t.removeEdge(n)}})}(t)}),n("    acyclic",function(){i.run(t)}),n("    nestingGraph.run",function(){s.run(t)}),n("    rank",function(){u(v.asNonCompoundGraph(t))}),n("    injectEdgeLabelProxies",function(){!function(t){r.forEach(t.edges(),function(n){var e=t.edge(n);if(e.width&&e.height){var r=t.node(n.v),i=t.node(n.w),o={rank:(i.rank-r.rank)/2+r.rank,e:n};v.addDummyNode(t,"edge-proxy",o,"_ep")}})}(t)}),n("    removeEmptyRanks",function(){f(t)}),n("    nestingGraph.cleanup",function(){s.cleanup(t)}),n("    normalizeRanks",function(){a(t)}),n("    assignRankMinMax",function(){!function(t){var n=0;r.forEach(t.nodes(),function(e){var i=t.node(e);i.borderTop&&(i.minRank=t.node(i.borderTop).rank,i.maxRank=t.node(i.borderBottom).rank,n=r.max(n,i.maxRank))}),t.graph().maxRank=n}(t)}),n("    removeEdgeLabelProxies",function(){!function(t){r.forEach(t.nodes(),function(n){var e=t.node(n);"edge-proxy"===e.dummy&&(t.edge(e.e).labelRank=e.rank,t.removeNode(n))})}(t)}),n("    normalize.run",function(){o.run(t)}),n("    parentDummyChains",function(){c(t)}),n("    addBorderSegments",function(){l(t)}),n("    order",function(){d(t)}),n("    insertSelfEdges",function(){!function(t){var n=v.buildLayerMatrix(t);r.forEach(n,function(n){var e=0;r.forEach(n,function(n,i){var o=t.node(n);o.order=i+e,r.forEach(o.selfEdges,function(n){v.addDummyNode(t,"selfedge",{width:n.label.width,height:n.label.height,rank:o.rank,order:i+ ++e,e:n.e,label:n.label},"_se")}),delete o.selfEdges})})}(t)}),n("    adjustCoordinateSystem",function(){h.adjust(t)}),n("    position",function(){p(t)}),n("    positionSelfEdges",function(){!function(t){r.forEach(t.nodes(),function(n){var e=t.node(n);if("selfedge"===e.dummy){var r=t.node(e.e.v),i=r.x+r.width/2,o=r.y,u=e.x-i,a=r.height/2;t.setEdge(e.e,e.label),t.removeNode(n),e.label.points=[{x:i+2*u/3,y:o-a},{x:i+5*u/6,y:o-a},{x:i+u,y:o},{x:i+5*u/6,y:o+a},{x:i+2*u/3,y:o+a}],e.label.x=e.x,e.label.y=e.y}})}(t)}),n("    removeBorderNodes",function(){!function(t){r.forEach(t.nodes(),function(n){if(t.children(n).length){var e=t.node(n),i=t.node(e.borderTop),o=t.node(e.borderBottom),u=t.node(r.last(e.borderLeft)),a=t.node(r.last(e.borderRight));e.width=Math.abs(a.x-u.x),e.height=Math.abs(o.y-i.y),e.x=u.x+e.width/2,e.y=i.y+e.height/2}}),r.forEach(t.nodes(),function(n){"border"===t.node(n).dummy&&t.removeNode(n)})}(t)}),n("    normalize.undo",function(){o.undo(t)}),n("    fixupEdgeLabelCoords",function(){!function(t){r.forEach(t.edges(),function(n){var e=t.edge(n);if(r.has(e,"x"))switch("l"!==e.labelpos&&"r"!==e.labelpos||(e.width-=e.labeloffset),e.labelpos){case"l":e.x-=e.width/2+e.labeloffset;break;case"r":e.x+=e.width/2+e.labeloffset}})}(t)}),n("    undoCoordinateSystem",function(){h.undo(t)}),n("    translateGraph",function(){!function(t){var n=Number.POSITIVE_INFINITY,e=0,i=Number.POSITIVE_INFINITY,o=0,u=t.graph(),a=u.marginx||0,c=u.marginy||0;function f(t){var r=t.x,u=t.y,a=t.width,c=t.height;n=Math.min(n,r-a/2),e=Math.max(e,r+a/2),i=Math.min(i,u-c/2),o=Math.max(o,u+c/2)}r.forEach(t.nodes(),function(n){f(t.node(n))}),r.forEach(t.edges(),function(n){var e=t.edge(n);r.has(e,"x")&&f(e)}),n-=a,i-=c,r.forEach(t.nodes(),function(e){var r=t.node(e);r.x-=n,r.y-=i}),r.forEach(t.edges(),function(e){var o=t.edge(e);r.forEach(o.points,function(t){t.x-=n,t.y-=i}),r.has(o,"x")&&(o.x-=n),r.has(o,"y")&&(o.y-=i)}),u.width=e-n+a,u.height=o-i+c}(t)}),n("    assignNodeIntersects",function(){!function(t){r.forEach(t.edges(),function(n){var e,r,i=t.edge(n),o=t.node(n.v),u=t.node(n.w);i.points?(e=i.points[0],r=i.points[i.points.length-1]):(i.points=[],e=u,r=o),i.points.unshift(v.intersectRect(o,e)),i.points.push(v.intersectRect(u,r))})}(t)}),n("    reversePoints",function(){!function(t){r.forEach(t.edges(),function(n){var e=t.edge(n);e.reversed&&e.points.reverse()})}(t)}),n("    acyclic.undo",function(){i.undo(t)})}(n,e)}),e("  updateInputGraph",function(){!function(t,n){r.forEach(t.nodes(),function(e){var r=t.node(e),i=n.node(e);r&&(r.x=i.x,r.y=i.y,n.children(e).length&&(r.width=i.width,r.height=i.height))}),r.forEach(t.edges(),function(e){var i=t.edge(e),o=n.edge(e);i.points=o.points,r.has(o,"x")&&(i.x=o.x,i.y=o.y)}),t.graph().width=n.graph().width,t.graph().height=n.graph().height}(t,n)})})};var y=["nodesep","edgesep","ranksep","marginx","marginy"],_={ranksep:50,edgesep:20,nodesep:50,rankdir:"tb"},m=["acyclicer","ranker","rankdir","align"],x=["width","height"],b={width:0,height:0},w=["minlen","weight","width","height","labeloffset"],M={minlen:1,weight:1,width:0,height:0,labeloffset:10,labelpos:"r"},E=["labelpos"];function T(t,n){return r.mapValues(r.pick(t,n),Number)}function k(t){var n={};return r.forEach(t,function(t,e){n[e.toLowerCase()]=t}),n}},function(t,n,e){var r=e(89),i=1,o=4;t.exports=function(t){return r(t,i|o)}},function(t,n,e){var r=e(281)(e(282));t.exports=r},function(t,n,e){var r=e(15),i=e(14),o=e(17);t.exports=function(t){return function(n,e,u){var a=Object(n);if(!i(n)){var c=r(e,3);n=o(n),e=function(t){return c(a[t],t,a)}}var f=t(n,e,u);return f>-1?a[c?n[f]:f]:void 0}}},function(t,n,e){var r=e(126),i=e(15),o=e(283),u=Math.max;t.exports=function(t,n,e){var a=null==t?0:t.length;if(!a)return-1;var c=null==e?0:o(e);return c<0&&(c=u(a+c,0)),r(t,i(n,3),c)}},function(t,n,e){var r=e(136);t.exports=function(t){var n=r(t),e=n%1;return n==n?e?n-e:n:0}},function(t,n,e){var r=e(8),i=e(30),o=NaN,u=/^\s+|\s+$/g,a=/^[-+]0x[0-9a-f]+$/i,c=/^0b[01]+$/i,f=/^0o[0-7]+$/i,s=parseInt;t.exports=function(t){if("number"==typeof t)return t;if(i(t))return o;if(r(t)){var n="function"==typeof t.valueOf?t.valueOf():t;t=r(n)?n+"":n}if("string"!=typeof t)return 0===t?t:+t;t=t.replace(u,"");var e=c.test(t);return e||f.test(t)?s(t.slice(2),e?2:8):a.test(t)?o:+t}},function(t,n,e){var r=e(72),i=e(108),o=e(28);t.exports=function(t,n){return null==t?t:r(t,i(n),o)}},function(t,n){t.exports=function(t){var n=null==t?0:t.length;return n?t[n-1]:void 0}},function(t,n,e){var r=e(45),i=e(71),o=e(15);t.exports=function(t,n){var e={};return n=o(n,3),i(t,function(t,i,o){r(e,i,n(t,i,o))}),e}},function(t,n,e){var r=e(78),i=e(289),o=e(22);t.exports=function(t){return t&&t.length?r(t,o,i):void 0}},function(t,n){t.exports=function(t,n){return t>n}},function(t,n,e){var r=e(291),i=e(294)(function(t,n,e){r(t,n,e)});t.exports=i},function(t,n,e){var r=e(39),i=e(138),o=e(72),u=e(292),a=e(8),c=e(28),f=e(140);t.exports=function t(n,e,s,l,h){n!==e&&o(e,function(o,c){if(h||(h=new r),a(o))u(n,e,c,s,t,l,h);else{var d=l?l(f(n,c),o,c+"",n,e,h):void 0;void 0===d&&(d=o),i(n,c,d)}},c)}},function(t,n,e){var r=e(138),i=e(95),o=e(104),u=e(96),a=e(105),c=e(34),f=e(4),s=e(127),l=e(27),h=e(25),d=e(8),p=e(139),v=e(35),g=e(140),y=e(293);t.exports=function(t,n,e,_,m,x,b){var w=g(t,e),M=g(n,e),E=b.get(M);if(E)r(t,e,E);else{var T=x?x(w,M,e+"",t,n,b):void 0,k=void 0===T;if(k){var N=f(M),S=!N&&l(M),A=!N&&!S&&v(M);T=M,N||S||A?f(w)?T=w:s(w)?T=u(w):S?(k=!1,T=i(M,!0)):A?(k=!1,T=o(M,!0)):T=[]:p(M)||c(M)?(T=w,c(w)?T=y(w):d(w)&&!h(w)||(T=a(M))):k=!1}k&&(b.set(M,T),m(T,M,_,x,b),b.delete(M)),r(t,e,T)}}},function(t,n,e){var r=e(33),i=e(28);t.exports=function(t){return r(t,i(t))}},function(t,n,e){var r=e(53),i=e(54);t.exports=function(t){return r(function(n,e){var r=-1,o=e.length,u=o>1?e[o-1]:void 0,a=o>2?e[2]:void 0;for(u=t.length>3&&"function"==typeof u?(o--,u):void 0,a&&i(e[0],e[1],a)&&(u=o<3?void 0:u,o=1),n=Object(n);++r<o;){var c=e[r];c&&t(n,c,r,u)}return n})}},function(t,n,e){var r=e(78),i=e(141),o=e(22);t.exports=function(t){return t&&t.length?r(t,o,i):void 0}},function(t,n,e){var r=e(78),i=e(15),o=e(141);t.exports=function(t,n){return t&&t.length?r(t,i(n,2),o):void 0}},function(t,n,e){var r=e(10);t.exports=function(){return r.Date.now()}},function(t,n,e){var r=e(299),i=e(117);t.exports=function(t,n){return r(t,n,function(n,e){return i(t,e)})}},function(t,n,e){var r=e(74),i=e(300),o=e(51);t.exports=function(t,n,e){for(var u=-1,a=n.length,c={};++u<a;){var f=n[u],s=r(t,f);e(s,f)&&i(c,o(f,t),s)}return c}},function(t,n,e){var r=e(44),i=e(51),o=e(46),u=e(8),a=e(36);t.exports=function(t,n,e,c){if(!u(t))return t;for(var f=-1,s=(n=i(n,t)).length,l=s-1,h=t;null!=h&&++f<s;){var d=a(n[f]),p=e;if(f!=l){var v=h[d];void 0===(p=c?c(v,d,h):void 0)&&(p=u(v)?v:o(n[f+1])?[]:{})}r(h,d,p),h=h[d]}return t}},function(t,n,e){var r=e(137),i=e(124),o=e(125);t.exports=function(t){return o(i(t,void 0,r),t+"")}},function(t,n,e){var r=e(303),i=e(54),o=e(136);t.exports=function(t){return function(n,e,u){return u&&"number"!=typeof u&&i(n,e,u)&&(e=u=void 0),n=o(n),void 0===e?(e=n,n=0):e=o(e),u=void 0===u?n<e?1:-1:o(u),r(n,e,u,t)}}},function(t,n){var e=Math.ceil,r=Math.max;t.exports=function(t,n,i,o){for(var u=-1,a=r(e((n-t)/(i||1)),0),c=Array(a);a--;)c[o?a:++u]=t,t+=i;return c}},function(t,n,e){var r=e(77),i=e(305),o=e(53),u=e(54),a=o(function(t,n){if(null==t)return[];var e=n.length;return e>1&&u(t,n[0],n[1])?n=[]:e>2&&u(n[0],n[1],n[2])&&(n=[n[0]]),i(t,r(n,1),[])});t.exports=a},function(t,n,e){var r=e(52),i=e(15),o=e(122),u=e(306),a=e(47),c=e(307),f=e(22);t.exports=function(t,n,e){var s=-1;n=r(n.length?n:[f],a(i));var l=o(t,function(t,e,i){return{criteria:r(n,function(n){return n(t)}),index:++s,value:t}});return u(l,function(t,n){return c(t,n,e)})}},function(t,n){t.exports=function(t,n){var e=t.length;for(t.sort(n);e--;)t[e]=t[e].value;return t}},function(t,n,e){var r=e(308);t.exports=function(t,n,e){for(var i=-1,o=t.criteria,u=n.criteria,a=o.length,c=e.length;++i<a;){var f=r(o[i],u[i]);if(f)return i>=c?f:f*("desc"==e[i]?-1:1)}return t.index-n.index}},function(t,n,e){var r=e(30);t.exports=function(t,n){if(t!==n){var e=void 0!==t,i=null===t,o=t==t,u=r(t),a=void 0!==n,c=null===n,f=n==n,s=r(n);if(!c&&!s&&!u&&t>n||u&&a&&f&&!c&&!s||i&&a&&f||!e&&f||!o)return 1;if(!i&&!u&&!s&&t<n||s&&e&&o&&!i&&!u||c&&e&&o||!a&&o||!f)return-1}return 0}},function(t,n,e){var r=e(44),i=e(310);t.exports=function(t,n){return i(t||[],n||[],r)}},function(t,n){t.exports=function(t,n,e){for(var r=-1,i=t.length,o=n.length,u={};++r<i;){var a=r<o?n[r]:void 0;e(u,t[r],a)}return u}},function(t,n,e){"use strict";var r=e(3),i=e(312);t.exports={run:function(t){var n="greedy"===t.graph().acyclicer?i(t,function(t){return function(n){return t.edge(n).weight}}(t)):function(t){var n=[],e={},i={};return r.forEach(t.nodes(),function o(u){r.has(i,u)||(i[u]=!0,e[u]=!0,r.forEach(t.outEdges(u),function(t){r.has(e,t.w)?n.push(t):o(t.w)}),delete e[u])}),n}(t);r.forEach(n,function(n){var e=t.edge(n);t.removeEdge(n),e.forwardName=n.name,e.reversed=!0,t.setEdge(n.w,n.v,e,r.uniqueId("rev"))})},undo:function(t){r.forEach(t.edges(),function(n){var e=t.edge(n);if(e.reversed){t.removeEdge(n);var r=e.forwardName;delete e.reversed,delete e.forwardName,t.setEdge(n.w,n.v,e,r)}})}}},function(t,n,e){var r=e(3),i=e(11).Graph,o=e(313);t.exports=function(t,n){if(t.nodeCount()<=1)return[];var e=function(t,n){var e=new i,u=0,a=0;r.forEach(t.nodes(),function(t){e.setNode(t,{v:t,in:0,out:0})}),r.forEach(t.edges(),function(t){var r=e.edge(t.v,t.w)||0,i=n(t),o=r+i;e.setEdge(t.v,t.w,o),a=Math.max(a,e.node(t.v).out+=i),u=Math.max(u,e.node(t.w).in+=i)});var f=r.range(a+u+3).map(function(){return new o}),s=u+1;return r.forEach(e.nodes(),function(t){c(f,s,e.node(t))}),{graph:e,buckets:f,zeroIdx:s}}(t,n||u),f=function(t,n,e){var r,i=[],o=n[n.length-1],u=n[0];for(;t.nodeCount();){for(;r=u.dequeue();)a(t,n,e,r);for(;r=o.dequeue();)a(t,n,e,r);if(t.nodeCount())for(var c=n.length-2;c>0;--c)if(r=n[c].dequeue()){i=i.concat(a(t,n,e,r,!0));break}}return i}(e.graph,e.buckets,e.zeroIdx);return r.flatten(r.map(f,function(n){return t.outEdges(n.v,n.w)}),!0)};var u=r.constant(1);function a(t,n,e,i,o){var u=o?[]:void 0;return r.forEach(t.inEdges(i.v),function(r){var i=t.edge(r),a=t.node(r.v);o&&u.push({v:r.v,w:r.w}),a.out-=i,c(n,e,a)}),r.forEach(t.outEdges(i.v),function(r){var i=t.edge(r),o=r.w,u=t.node(o);u.in-=i,c(n,e,u)}),t.removeNode(i.v),u}function c(t,n,e){e.out?e.in?t[e.out-e.in+n].enqueue(e):t[t.length-1].enqueue(e):t[0].enqueue(e)}},function(t,n){function e(){var t={};t._next=t._prev=t,this._sentinel=t}function r(t){t._prev._next=t._next,t._next._prev=t._prev,delete t._next,delete t._prev}function i(t,n){if("_next"!==t&&"_prev"!==t)return n}t.exports=e,e.prototype.dequeue=function(){var t=this._sentinel,n=t._prev;if(n!==t)return r(n),n},e.prototype.enqueue=function(t){var n=this._sentinel;t._prev&&t._next&&r(t),t._next=n._next,n._next._prev=t,n._next=t,t._prev=n},e.prototype.toString=function(){for(var t=[],n=this._sentinel,e=n._prev;e!==n;)t.push(JSON.stringify(e,i)),e=e._prev;return"["+t.join(", ")+"]"}},function(t,n,e){"use strict";var r=e(3),i=e(5);t.exports={run:function(t){t.graph().dummyChains=[],r.forEach(t.edges(),function(n){!function(t,n){var e,r,o,u=n.v,a=t.node(u).rank,c=n.w,f=t.node(c).rank,s=n.name,l=t.edge(n),h=l.labelRank;if(f===a+1)return;for(t.removeEdge(n),o=0,++a;a<f;++o,++a)l.points=[],r={width:0,height:0,edgeLabel:l,edgeObj:n,rank:a},e=i.addDummyNode(t,"edge",r,"_d"),a===h&&(r.width=l.width,r.height=l.height,r.dummy="edge-label",r.labelpos=l.labelpos),t.setEdge(u,e,{weight:l.weight},s),0===o&&t.graph().dummyChains.push(e),u=e;t.setEdge(u,c,{weight:l.weight},s)}(t,n)})},undo:function(t){r.forEach(t.graph().dummyChains,function(n){var e,r=t.node(n),i=r.edgeLabel;for(t.setEdge(r.edgeObj,i);r.dummy;)e=t.successors(n)[0],t.removeNode(n),i.points.push({x:r.x,y:r.y}),"edge-label"===r.dummy&&(i.x=r.x,i.y=r.y,i.width=r.width,i.height=r.height),n=e,r=t.node(n)})}}},function(t,n,e){"use strict";var r=e(55).longestPath,i=e(145),o=e(316);t.exports=function(t){switch(t.graph().ranker){case"network-simplex":a(t);break;case"tight-tree":!function(t){r(t),i(t)}(t);break;case"longest-path":u(t);break;default:a(t)}};var u=r;function a(t){o(t)}},function(t,n,e){"use strict";var r=e(3),i=e(145),o=e(55).slack,u=e(55).longestPath,a=e(11).alg.preorder,c=e(11).alg.postorder,f=e(5).simplify;function s(t){t=f(t),u(t);var n,e=i(t);for(d(e),l(e,t);n=p(e);)g(e,t,n,v(e,t,n))}function l(t,n){var e=c(t,t.nodes());e=e.slice(0,e.length-1),r.forEach(e,function(e){!function(t,n,e){var r=t.node(e).parent;t.edge(e,r).cutvalue=h(t,n,e)}(t,n,e)})}function h(t,n,e){var i=t.node(e).parent,o=!0,u=n.edge(e,i),a=0;return u||(o=!1,u=n.edge(i,e)),a=u.weight,r.forEach(n.nodeEdges(e),function(r){var u,c,f=r.v===e,s=f?r.w:r.v;if(s!==i){var l=f===o,h=n.edge(r).weight;if(a+=l?h:-h,u=e,c=s,t.hasEdge(u,c)){var d=t.edge(e,s).cutvalue;a+=l?-d:d}}}),a}function d(t,n){arguments.length<2&&(n=t.nodes()[0]),function t(n,e,i,o,u){var a=i,c=n.node(o);e[o]=!0;r.forEach(n.neighbors(o),function(u){r.has(e,u)||(i=t(n,e,i,u,o))});c.low=a;c.lim=i++;u?c.parent=u:delete c.parent;return i}(t,{},1,n)}function p(t){return r.find(t.edges(),function(n){return t.edge(n).cutvalue<0})}function v(t,n,e){var i=e.v,u=e.w;n.hasEdge(i,u)||(i=e.w,u=e.v);var a=t.node(i),c=t.node(u),f=a,s=!1;a.lim>c.lim&&(f=c,s=!0);var l=r.filter(n.edges(),function(n){return s===y(t,t.node(n.v),f)&&s!==y(t,t.node(n.w),f)});return r.minBy(l,function(t){return o(n,t)})}function g(t,n,e,i){var o=e.v,u=e.w;t.removeEdge(o,u),t.setEdge(i.v,i.w,{}),d(t),l(t,n),function(t,n){var e=r.find(t.nodes(),function(t){return!n.node(t).parent}),i=a(t,e);i=i.slice(1),r.forEach(i,function(e){var r=t.node(e).parent,i=n.edge(e,r),o=!1;i||(i=n.edge(r,e),o=!0),n.node(e).rank=n.node(r).rank+(o?i.minlen:-i.minlen)})}(t,n)}function y(t,n,e){return e.low<=n.lim&&n.lim<=e.lim}t.exports=s,s.initLowLimValues=d,s.initCutValues=l,s.calcCutValue=h,s.leaveEdge=p,s.enterEdge=v,s.exchangeEdges=g},function(t,n,e){var r=e(3);t.exports=function(t){var n=function(t){var n={},e=0;return r.forEach(t.children(),function i(o){var u=e;r.forEach(t.children(o),i),n[o]={low:u,lim:e++}}),n}(t);r.forEach(t.graph().dummyChains,function(e){for(var r=t.node(e),i=r.edgeObj,o=function(t,n,e,r){var i,o,u=[],a=[],c=Math.min(n[e].low,n[r].low),f=Math.max(n[e].lim,n[r].lim);i=e;do{i=t.parent(i),u.push(i)}while(i&&(n[i].low>c||f>n[i].lim));o=i,i=r;for(;(i=t.parent(i))!==o;)a.push(i);return{path:u.concat(a.reverse()),lca:o}}(t,n,i.v,i.w),u=o.path,a=o.lca,c=0,f=u[c],s=!0;e!==i.w;){if(r=t.node(e),s){for(;(f=u[c])!==a&&t.node(f).maxRank<r.rank;)c++;f===a&&(s=!1)}if(!s){for(;c<u.length-1&&t.node(f=u[c+1]).minRank<=r.rank;)c++;f=u[c]}t.setParent(e,f),e=t.successors(e)[0]}})}},function(t,n,e){var r=e(3),i=e(5);t.exports={run:function(t){var n=i.addDummyNode(t,"root",{},"_root"),e=function(t){var n={};return r.forEach(t.children(),function(e){!function e(i,o){var u=t.children(i);u&&u.length&&r.forEach(u,function(t){e(t,o+1)}),n[i]=o}(e,1)}),n}(t),o=r.max(r.values(e))-1,u=2*o+1;t.graph().nestingRoot=n,r.forEach(t.edges(),function(n){t.edge(n).minlen*=u});var a=function(t){return r.reduce(t.edges(),function(n,e){return n+t.edge(e).weight},0)}(t)+1;r.forEach(t.children(),function(c){!function t(n,e,o,u,a,c,f){var s=n.children(f);if(!s.length)return void(f!==e&&n.setEdge(e,f,{weight:0,minlen:o}));var l=i.addBorderNode(n,"_bt"),h=i.addBorderNode(n,"_bb"),d=n.node(f);n.setParent(l,f);d.borderTop=l;n.setParent(h,f);d.borderBottom=h;r.forEach(s,function(r){t(n,e,o,u,a,c,r);var i=n.node(r),s=i.borderTop?i.borderTop:r,d=i.borderBottom?i.borderBottom:r,p=i.borderTop?u:2*u,v=s!==d?1:a-c[f]+1;n.setEdge(l,s,{weight:p,minlen:v,nestingEdge:!0}),n.setEdge(d,h,{weight:p,minlen:v,nestingEdge:!0})});n.parent(f)||n.setEdge(e,l,{weight:0,minlen:a+c[f]})}(t,n,u,a,o,e,c)}),t.graph().nodeRankFactor=u},cleanup:function(t){var n=t.graph();t.removeNode(n.nestingRoot),delete n.nestingRoot,r.forEach(t.edges(),function(n){var e=t.edge(n);e.nestingEdge&&t.removeEdge(n)})}}},function(t,n,e){var r=e(3),i=e(5);function o(t,n,e,r,o,u){var a={width:0,height:0,rank:u,borderType:n},c=o[n][u-1],f=i.addDummyNode(t,"border",a,e);o[n][u]=f,t.setParent(f,r),c&&t.setEdge(c,f,{weight:1})}t.exports=function(t){r.forEach(t.children(),function n(e){var i=t.children(e),u=t.node(e);i.length&&r.forEach(i,n);if(r.has(u,"minRank")){u.borderLeft=[],u.borderRight=[];for(var a=u.minRank,c=u.maxRank+1;a<c;++a)o(t,"borderLeft","_bl",e,u,a),o(t,"borderRight","_br",e,u,a)}})}},function(t,n,e){"use strict";var r=e(3);function i(t){r.forEach(t.nodes(),function(n){o(t.node(n))}),r.forEach(t.edges(),function(n){o(t.edge(n))})}function o(t){var n=t.width;t.width=t.height,t.height=n}function u(t){t.y=-t.y}function a(t){var n=t.x;t.x=t.y,t.y=n}t.exports={adjust:function(t){var n=t.graph().rankdir.toLowerCase();"lr"!==n&&"rl"!==n||i(t)},undo:function(t){var n=t.graph().rankdir.toLowerCase();"bt"!==n&&"rl"!==n||function(t){r.forEach(t.nodes(),function(n){u(t.node(n))}),r.forEach(t.edges(),function(n){var e=t.edge(n);r.forEach(e.points,u),r.has(e,"y")&&u(e)})}(t);"lr"!==n&&"rl"!==n||(!function(t){r.forEach(t.nodes(),function(n){a(t.node(n))}),r.forEach(t.edges(),function(n){var e=t.edge(n);r.forEach(e.points,a),r.has(e,"x")&&a(e)})}(t),i(t))}}},function(t,n,e){"use strict";var r=e(3),i=e(322),o=e(323),u=e(324),a=e(328),c=e(329),f=e(11).Graph,s=e(5);function l(t,n,e){return r.map(n,function(n){return a(t,n,e)})}function h(t,n){var e=new f;r.forEach(t,function(t){var i=t.graph().root,o=u(t,i,e,n);r.forEach(o.vs,function(n,e){t.node(n).order=e}),c(t,e,o.vs)})}function d(t,n){r.forEach(n,function(n){r.forEach(n,function(n,e){t.node(n).order=e})})}t.exports=function(t){var n=s.maxRank(t),e=l(t,r.range(1,n+1),"inEdges"),u=l(t,r.range(n-1,-1,-1),"outEdges"),a=i(t);d(t,a);for(var c,f=Number.POSITIVE_INFINITY,p=0,v=0;v<4;++p,++v){h(p%2?e:u,p%4>=2),a=s.buildLayerMatrix(t);var g=o(t,a);g<f&&(v=0,c=r.cloneDeep(a),f=g)}d(t,c)}},function(t,n,e){"use strict";var r=e(3);t.exports=function(t){var n={},e=r.filter(t.nodes(),function(n){return!t.children(n).length}),i=r.max(r.map(e,function(n){return t.node(n).rank})),o=r.map(r.range(i+1),function(){return[]});var u=r.sortBy(e,function(n){return t.node(n).rank});return r.forEach(u,function e(i){if(!r.has(n,i)){n[i]=!0;var u=t.node(i);o[u.rank].push(i),r.forEach(t.successors(i),e)}}),o}},function(t,n,e){"use strict";var r=e(3);function i(t,n,e){for(var i=r.zipObject(e,r.map(e,function(t,n){return n})),o=r.flatten(r.map(n,function(n){return r.sortBy(r.map(t.outEdges(n),function(n){return{pos:i[n.w],weight:t.edge(n).weight}}),"pos")}),!0),u=1;u<e.length;)u<<=1;var a=2*u-1;u-=1;var c=r.map(new Array(a),function(){return 0}),f=0;return r.forEach(o.forEach(function(t){var n=t.pos+u;c[n]+=t.weight;for(var e=0;n>0;)n%2&&(e+=c[n+1]),c[n=n-1>>1]+=t.weight;f+=t.weight*e})),f}t.exports=function(t,n){for(var e=0,r=1;r<n.length;++r)e+=i(t,n[r-1],n[r]);return e}},function(t,n,e){var r=e(3),i=e(325),o=e(326),u=e(327);t.exports=function t(n,e,a,c){var f=n.children(e),s=n.node(e),l=s?s.borderLeft:void 0,h=s?s.borderRight:void 0,d={};l&&(f=r.filter(f,function(t){return t!==l&&t!==h}));var p=i(n,f);r.forEach(p,function(e){if(n.children(e.v).length){var i=t(n,e.v,a,c);d[e.v]=i,r.has(i,"barycenter")&&(o=e,u=i,r.isUndefined(o.barycenter)?(o.barycenter=u.barycenter,o.weight=u.weight):(o.barycenter=(o.barycenter*o.weight+u.barycenter*u.weight)/(o.weight+u.weight),o.weight+=u.weight))}var o,u});var v=o(p,a);!function(t,n){r.forEach(t,function(t){t.vs=r.flatten(t.vs.map(function(t){return n[t]?n[t].vs:t}),!0)})}(v,d);var g=u(v,c);if(l&&(g.vs=r.flatten([l,g.vs,h],!0),n.predecessors(l).length)){var y=n.node(n.predecessors(l)[0]),_=n.node(n.predecessors(h)[0]);r.has(g,"barycenter")||(g.barycenter=0,g.weight=0),g.barycenter=(g.barycenter*g.weight+y.order+_.order)/(g.weight+2),g.weight+=2}return g}},function(t,n,e){var r=e(3);t.exports=function(t,n){return r.map(n,function(n){var e=t.inEdges(n);if(e.length){var i=r.reduce(e,function(n,e){var r=t.edge(e),i=t.node(e.v);return{sum:n.sum+r.weight*i.order,weight:n.weight+r.weight}},{sum:0,weight:0});return{v:n,barycenter:i.sum/i.weight,weight:i.weight}}return{v:n}})}},function(t,n,e){"use strict";var r=e(3);t.exports=function(t,n){var e={};return r.forEach(t,function(t,n){var i=e[t.v]={indegree:0,in:[],out:[],vs:[t.v],i:n};r.isUndefined(t.barycenter)||(i.barycenter=t.barycenter,i.weight=t.weight)}),r.forEach(n.edges(),function(t){var n=e[t.v],i=e[t.w];r.isUndefined(n)||r.isUndefined(i)||(i.indegree++,n.out.push(e[t.w]))}),function(t){var n=[];function e(t){return function(n){var e,i,o,u;n.merged||(r.isUndefined(n.barycenter)||r.isUndefined(t.barycenter)||n.barycenter>=t.barycenter)&&(i=n,o=0,u=0,(e=t).weight&&(o+=e.barycenter*e.weight,u+=e.weight),i.weight&&(o+=i.barycenter*i.weight,u+=i.weight),e.vs=i.vs.concat(e.vs),e.barycenter=o/u,e.weight=u,e.i=Math.min(i.i,e.i),i.merged=!0)}}function i(n){return function(e){e.in.push(n),0==--e.indegree&&t.push(e)}}for(;t.length;){var o=t.pop();n.push(o),r.forEach(o.in.reverse(),e(o)),r.forEach(o.out,i(o))}return r.map(r.filter(n,function(t){return!t.merged}),function(t){return r.pick(t,["vs","i","barycenter","weight"])})}(r.filter(e,function(t){return!t.indegree}))}},function(t,n,e){var r=e(3),i=e(5);function o(t,n,e){for(var i;n.length&&(i=r.last(n)).i<=e;)n.pop(),t.push(i.vs),e++;return e}t.exports=function(t,n){var e=i.partition(t,function(t){return r.has(t,"barycenter")}),u=e.lhs,a=r.sortBy(e.rhs,function(t){return-t.i}),c=[],f=0,s=0,l=0;u.sort((h=!!n,function(t,n){return t.barycenter<n.barycenter?-1:t.barycenter>n.barycenter?1:h?n.i-t.i:t.i-n.i})),l=o(c,a,l),r.forEach(u,function(t){l+=t.vs.length,c.push(t.vs),f+=t.barycenter*t.weight,s+=t.weight,l=o(c,a,l)});var h;var d={vs:r.flatten(c,!0)};s&&(d.barycenter=f/s,d.weight=s);return d}},function(t,n,e){var r=e(3),i=e(11).Graph;t.exports=function(t,n,e){var o=function(t){var n;for(;t.hasNode(n=r.uniqueId("_root")););return n}(t),u=new i({compound:!0}).setGraph({root:o}).setDefaultNodeLabel(function(n){return t.node(n)});return r.forEach(t.nodes(),function(i){var a=t.node(i),c=t.parent(i);(a.rank===n||a.minRank<=n&&n<=a.maxRank)&&(u.setNode(i),u.setParent(i,c||o),r.forEach(t[e](i),function(n){var e=n.v===i?n.w:n.v,o=u.edge(e,i),a=r.isUndefined(o)?0:o.weight;u.setEdge(e,i,{weight:t.edge(n).weight+a})}),r.has(a,"minRank")&&u.setNode(i,{borderLeft:a.borderLeft[n],borderRight:a.borderRight[n]}))}),u}},function(t,n,e){var r=e(3);t.exports=function(t,n,e){var i,o={};r.forEach(e,function(e){for(var r,u,a=t.parent(e);a;){if((r=t.parent(a))?(u=o[r],o[r]=a):(u=i,i=a),u&&u!==a)return void n.setEdge(u,a);a=r}})}},function(t,n,e){"use strict";var r=e(3),i=e(5),o=e(331).positionX;t.exports=function(t){(function(t){var n=i.buildLayerMatrix(t),e=t.graph().ranksep,o=0;r.forEach(n,function(n){var i=r.max(r.map(n,function(n){return t.node(n).height}));r.forEach(n,function(n){t.node(n).y=o+i/2}),o+=i+e})})(t=i.asNonCompoundGraph(t)),r.forEach(o(t),function(n,e){t.node(e).x=n})}},function(t,n,e){"use strict";var r=e(3),i=e(11).Graph,o=e(5);function u(t,n){var e={};return r.reduce(n,function(n,i){var o=0,u=0,a=n.length,f=r.last(i);return r.forEach(i,function(n,s){var l=function(t,n){if(t.node(n).dummy)return r.find(t.predecessors(n),function(n){return t.node(n).dummy})}(t,n),h=l?t.node(l).order:a;(l||n===f)&&(r.forEach(i.slice(u,s+1),function(n){r.forEach(t.predecessors(n),function(r){var i=t.node(r),u=i.order;!(u<o||h<u)||i.dummy&&t.node(n).dummy||c(e,r,n)})}),u=s+1,o=h)}),i}),e}function a(t,n){var e={};function i(n,i,o,u,a){var f;r.forEach(r.range(i,o),function(i){f=n[i],t.node(f).dummy&&r.forEach(t.predecessors(f),function(n){var r=t.node(n);r.dummy&&(r.order<u||r.order>a)&&c(e,n,f)})})}return r.reduce(n,function(n,e){var o,u=-1,a=0;return r.forEach(e,function(r,c){if("border"===t.node(r).dummy){var f=t.predecessors(r);f.length&&(o=t.node(f[0]).order,i(e,a,c,u,o),a=c,u=o)}i(e,a,e.length,o,n.length)}),e}),e}function c(t,n,e){if(n>e){var r=n;n=e,e=r}var i=t[n];i||(t[n]=i={}),i[e]=!0}function f(t,n,e){if(n>e){var i=n;n=e,e=i}return r.has(t[n],e)}function s(t,n,e,i){var o={},u={},a={};return r.forEach(n,function(t){r.forEach(t,function(t,n){o[t]=t,u[t]=t,a[t]=n})}),r.forEach(n,function(t){var n=-1;r.forEach(t,function(t){var c=i(t);if(c.length)for(var s=((c=r.sortBy(c,function(t){return a[t]})).length-1)/2,l=Math.floor(s),h=Math.ceil(s);l<=h;++l){var d=c[l];u[t]===t&&n<a[d]&&!f(e,t,d)&&(u[d]=t,u[t]=o[t]=o[d],n=a[d])}})}),{root:o,align:u}}function l(t,n,e,o,u){var a={},c=function(t,n,e,o){var u=new i,a=t.graph(),c=function(t,n,e){return function(i,o,u){var a,c=i.node(o),f=i.node(u),s=0;if(s+=c.width/2,r.has(c,"labelpos"))switch(c.labelpos.toLowerCase()){case"l":a=-c.width/2;break;case"r":a=c.width/2}if(a&&(s+=e?a:-a),a=0,s+=(c.dummy?n:t)/2,s+=(f.dummy?n:t)/2,s+=f.width/2,r.has(f,"labelpos"))switch(f.labelpos.toLowerCase()){case"l":a=f.width/2;break;case"r":a=-f.width/2}return a&&(s+=e?a:-a),a=0,s}}(a.nodesep,a.edgesep,o);return r.forEach(n,function(n){var i;r.forEach(n,function(n){var r=e[n];if(u.setNode(r),i){var o=e[i],a=u.edge(o,r);u.setEdge(o,r,Math.max(c(t,n,i),a||0))}i=n})}),u}(t,n,e,u),f=u?"borderLeft":"borderRight";function s(t,n){for(var e=c.nodes(),r=e.pop(),i={};r;)i[r]?t(r):(i[r]=!0,e.push(r),e=e.concat(n(r))),r=e.pop()}return s(function(t){a[t]=c.inEdges(t).reduce(function(t,n){return Math.max(t,a[n.v]+c.edge(n))},0)},c.predecessors.bind(c)),s(function(n){var e=c.outEdges(n).reduce(function(t,n){return Math.min(t,a[n.w]-c.edge(n))},Number.POSITIVE_INFINITY),r=t.node(n);e!==Number.POSITIVE_INFINITY&&r.borderType!==f&&(a[n]=Math.max(a[n],e))},c.successors.bind(c)),r.forEach(o,function(t){a[t]=a[e[t]]}),a}function h(t,n){return r.minBy(r.values(n),function(n){var e=Number.NEGATIVE_INFINITY,i=Number.POSITIVE_INFINITY;return r.forIn(n,function(n,r){var o=function(t,n){return t.node(n).width}(t,r)/2;e=Math.max(n+o,e),i=Math.min(n-o,i)}),e-i})}function d(t,n){var e=r.values(n),i=r.min(e),o=r.max(e);r.forEach(["u","d"],function(e){r.forEach(["l","r"],function(u){var a,c=e+u,f=t[c];if(f!==n){var s=r.values(f);(a="l"===u?i-r.min(s):o-r.max(s))&&(t[c]=r.mapValues(f,function(t){return t+a}))}})})}function p(t,n){return r.mapValues(t.ul,function(e,i){if(n)return t[n.toLowerCase()][i];var o=r.sortBy(r.map(t,i));return(o[1]+o[2])/2})}t.exports={positionX:function(t){var n,e=o.buildLayerMatrix(t),i=r.merge(u(t,e),a(t,e)),c={};r.forEach(["u","d"],function(o){n="u"===o?e:r.values(e).reverse(),r.forEach(["l","r"],function(e){"r"===e&&(n=r.map(n,function(t){return r.values(t).reverse()}));var u=("u"===o?t.predecessors:t.successors).bind(t),a=s(t,n,i,u),f=l(t,n,a.root,a.align,"r"===e);"r"===e&&(f=r.mapValues(f,function(t){return-t})),c[o+e]=f})});var f=h(t,c);return d(c,f),p(c,t.graph().align)},findType1Conflicts:u,findType2Conflicts:a,addConflict:c,hasConflict:f,verticalAlignment:s,horizontalCompaction:l,alignCoordinates:d,findSmallestWidthAlignment:h,balance:p}},function(t,n,e){var r=e(3),i=e(5),o=e(11).Graph;t.exports={debugOrdering:function(t){var n=i.buildLayerMatrix(t),e=new o({compound:!0,multigraph:!0}).setGraph({});return r.forEach(t.nodes(),function(n){e.setNode(n,{label:n}),e.setParent(n,"layer"+t.node(n).rank)}),r.forEach(t.edges(),function(t){e.setEdge(t.v,t.w,{},t.name)}),r.forEach(n,function(t,n){var i="layer"+n;e.setNode(i,{rank:"same"}),r.reduce(t,function(t,n){return e.setEdge(t,n,{style:"invis"}),n})}),e}}},function(t,n){t.exports="0.8.4"},function(t,n,e){t.exports={node:e(146),circle:e(147),ellipse:e(79),polygon:e(148),rect:e(149)}},function(t,n){function e(t,n){return t*n>0}t.exports=function(t,n,r,i){var o,u,a,c,f,s,l,h,d,p,v,g,y;if(o=n.y-t.y,a=t.x-n.x,f=n.x*t.y-t.x*n.y,d=o*r.x+a*r.y+f,p=o*i.x+a*i.y+f,0!==d&&0!==p&&e(d,p))return;if(u=i.y-r.y,c=r.x-i.x,s=i.x*r.y-r.x*i.y,l=u*t.x+c*t.y+s,h=u*n.x+c*n.y+s,0!==l&&0!==h&&e(l,h))return;if(0==(v=o*c-u*a))return;return g=Math.abs(v/2),{x:(y=a*s-c*f)<0?(y-g)/v:(y+g)/v,y:(y=u*f-o*s)<0?(y-g)/v:(y+g)/v}}},function(t,n,e){var r=e(31),i=e(18),o=e(134).layout;t.exports=function(){var t=e(337),n=e(341),i=e(342),f=e(343),s=e(344),l=e(345),h=e(346),d=e(347),p=e(348),v=function(e,v){!function(t){t.nodes().forEach(function(n){var e=t.node(n);r.has(e,"label")||t.children(n).length||(e.label=n),r.has(e,"paddingX")&&r.defaults(e,{paddingLeft:e.paddingX,paddingRight:e.paddingX}),r.has(e,"paddingY")&&r.defaults(e,{paddingTop:e.paddingY,paddingBottom:e.paddingY}),r.has(e,"padding")&&r.defaults(e,{paddingLeft:e.padding,paddingRight:e.padding,paddingTop:e.padding,paddingBottom:e.padding}),r.defaults(e,u),r.each(["paddingLeft","paddingRight","paddingTop","paddingBottom"],function(t){e[t]=Number(e[t])}),r.has(e,"width")&&(e._prevWidth=e.width),r.has(e,"height")&&(e._prevHeight=e.height)}),t.edges().forEach(function(n){var e=t.edge(n);r.has(e,"label")||(e.label=""),r.defaults(e,a)})}(v);var g=c(e,"output"),y=c(g,"clusters"),_=c(g,"edgePaths"),m=i(c(g,"edgeLabels"),v),x=t(c(g,"nodes"),v,d);o(v),s(x,v),l(m,v),f(_,v,p);var b=n(y,v);h(b,v),function(t){r.each(t.nodes(),function(n){var e=t.node(n);r.has(e,"_prevWidth")?e.width=e._prevWidth:delete e.width,r.has(e,"_prevHeight")?e.height=e._prevHeight:delete e.height,delete e._prevWidth,delete e._prevHeight})}(v)};return v.createNodes=function(n){return arguments.length?(t=n,v):t},v.createClusters=function(t){return arguments.length?(n=t,v):n},v.createEdgeLabels=function(t){return arguments.length?(i=t,v):i},v.createEdgePaths=function(t){return arguments.length?(f=t,v):f},v.shapes=function(t){return arguments.length?(d=t,v):d},v.arrows=function(t){return arguments.length?(p=t,v):p},v};var u={paddingLeft:10,paddingRight:10,paddingTop:10,paddingBottom:10,rx:0,ry:0,shape:"rect"},a={arrowhead:"normal",curve:i.curveLinear};function c(t,n){var e=t.select("g."+n);return e.empty()&&(e=t.append("g").attr("class",n)),e}},function(t,n,e){"use strict";var r=e(31),i=e(80),o=e(9),u=e(18);t.exports=function(t,n,e){var a,c=n.nodes().filter(function(t){return!o.isSubgraph(n,t)}),f=t.selectAll("g.node").data(c,function(t){return t}).classed("update",!0);f.exit().remove(),f.enter().append("g").attr("class","node").style("opacity",0),(f=t.selectAll("g.node")).each(function(t){var a=n.node(t),c=u.select(this);o.applyClass(c,a.class,(c.classed("update")?"update ":"")+"node"),c.select("g.label").remove();var f=c.append("g").attr("class","label"),s=i(f,a),l=e[a.shape],h=r.pick(s.node().getBBox(),"width","height");a.elem=this,a.id&&c.attr("id",a.id),a.labelId&&f.attr("id",a.labelId),r.has(a,"width")&&(h.width=a.width),r.has(a,"height")&&(h.height=a.height),h.width+=a.paddingLeft+a.paddingRight,h.height+=a.paddingTop+a.paddingBottom,f.attr("transform","translate("+(a.paddingLeft-a.paddingRight)/2+","+(a.paddingTop-a.paddingBottom)/2+")");var d=u.select(this);d.select(".label-container").remove();var p=l(d,h,a).classed("label-container",!0);o.applyStyle(p,a.style);var v=p.node().getBBox();a.width=v.width,a.height=v.height}),a=f.exit?f.exit():f.selectAll(null);return o.applyTransition(a,n).style("opacity",0).remove(),f}},function(t,n,e){var r=e(9);t.exports=function(t,n){for(var e=t.append("text"),i=function(t){for(var n,e="",r=!1,i=0;i<t.length;++i)if(n=t[i],r){switch(n){case"n":e+="\n";break;default:e+=n}r=!1}else"\\"===n?r=!0:e+=n;return e}(n.label).split("\n"),o=0;o<i.length;o++)e.append("tspan").attr("xml:space","preserve").attr("dy","1em").attr("x","1").text(i[o]);return r.applyStyle(e,n.labelStyle),e}},function(t,n,e){var r=e(9);t.exports=function(t,n){var e=t.append("foreignObject").attr("width","100000"),i=e.append("xhtml:div");i.attr("xmlns","http://www.w3.org/1999/xhtml");var o=n.label;switch(typeof o){case"function":i.insert(o);break;case"object":i.insert(function(){return o});break;default:i.html(o)}r.applyStyle(i,n.labelStyle),i.style("display","inline-block"),i.style("white-space","nowrap");var u=i.node().getBoundingClientRect();return e.attr("width",u.width).attr("height",u.height),e}},function(t,n,e){var r=e(9);t.exports=function(t,n){var e=t;return e.node().appendChild(n.label),r.applyStyle(e,n.labelStyle),e}},function(t,n,e){var r=e(9),i=e(18),o=e(80);t.exports=function(t,n){var e,u=n.nodes().filter(function(t){return r.isSubgraph(n,t)}),a=t.selectAll("g.cluster").data(u,function(t){return t});a.selectAll("*").remove(),a.enter().append("g").attr("class","cluster").attr("id",function(t){return n.node(t).id}).style("opacity",0),a=t.selectAll("g.cluster"),r.applyTransition(a,n).style("opacity",1),a.each(function(t){var e=n.node(t),r=i.select(this);i.select(this).append("rect");var u=r.append("g").attr("class","label");o(u,e,e.clusterLabelPos)}),a.selectAll("rect").each(function(t){var e=n.node(t),o=i.select(this);r.applyStyle(o,e.style)}),e=a.exit?a.exit():a.selectAll(null);return r.applyTransition(e,n).style("opacity",0).remove(),a}},function(t,n,e){"use strict";var r=e(31),i=e(80),o=e(9),u=e(18);t.exports=function(t,n){var e,a=t.selectAll("g.edgeLabel").data(n.edges(),function(t){return o.edgeToId(t)}).classed("update",!0);a.exit().remove(),a.enter().append("g").classed("edgeLabel",!0).style("opacity",0),(a=t.selectAll("g.edgeLabel")).each(function(t){var e=u.select(this);e.select(".label").remove();var o=n.edge(t),a=i(e,n.edge(t),0,0).classed("label",!0),c=a.node().getBBox();o.labelId&&a.attr("id",o.labelId),r.has(o,"width")||(o.width=c.width),r.has(o,"height")||(o.height=c.height)}),e=a.exit?a.exit():a.selectAll(null);return o.applyTransition(e,n).style("opacity",0).remove(),a}},function(t,n,e){"use strict";var r=e(31),i=e(146),o=e(9),u=e(18);function a(t,n){var e=(u.line||u.svg.line)().x(function(t){return t.x}).y(function(t){return t.y});return(e.curve||e.interpolate)(t.curve),e(n)}t.exports=function(t,n,e){var c=t.selectAll("g.edgePath").data(n.edges(),function(t){return o.edgeToId(t)}).classed("update",!0),f=function(t,n){var e=t.enter().append("g").attr("class","edgePath").style("opacity",0);return e.append("path").attr("class","path").attr("d",function(t){var e=n.edge(t),i=n.node(t.v).elem;return a(e,r.range(e.points.length).map(function(){return n=(t=i).getBBox(),{x:(e=t.ownerSVGElement.getScreenCTM().inverse().multiply(t.getScreenCTM()).translate(n.width/2,n.height/2)).e,y:e.f};var t,n,e}))}),e.append("defs"),e}(c,n);!function(t,n){var e=t.exit();o.applyTransition(e,n).style("opacity",0).remove()}(c,n);var s=c.merge(f);return o.applyTransition(s,n).style("opacity",1),s.each(function(t){var e=u.select(this),r=n.edge(t);r.elem=this,r.id&&e.attr("id",r.id),o.applyClass(e,r.class,(e.classed("update")?"update ":"")+"edgePath")}),s.selectAll("path.path").each(function(t){var e=n.edge(t);e.arrowheadId=r.uniqueId("arrowhead");var c=u.select(this).attr("marker-end",function(){return"url("+(t=location.href,n=e.arrowheadId,t.split("#")[0]+"#"+n)+")";var t,n}).style("fill","none");o.applyTransition(c,n).attr("d",function(t){return function(t,n){var e=t.edge(n),r=t.node(n.v),o=t.node(n.w),u=e.points.slice(1,e.points.length-1);return u.unshift(i(r,u[0])),u.push(i(o,u[u.length-1])),a(e,u)}(n,t)}),o.applyStyle(c,e.style)}),s.selectAll("defs *").remove(),s.selectAll("defs").each(function(t){var r=n.edge(t);(0,e[r.arrowhead])(u.select(this),r.arrowheadId,r,"arrowhead")}),s}},function(t,n,e){"use strict";var r=e(9),i=e(18);t.exports=function(t,n){function e(t){var e=n.node(t);return"translate("+e.x+","+e.y+")"}t.filter(function(){return!i.select(this).classed("update")}).attr("transform",e),r.applyTransition(t,n).style("opacity",1).attr("transform",e)}},function(t,n,e){"use strict";var r=e(9),i=e(18),o=e(31);t.exports=function(t,n){function e(t){var e=n.edge(t);return o.has(e,"x")?"translate("+e.x+","+e.y+")":""}t.filter(function(){return!i.select(this).classed("update")}).attr("transform",e),r.applyTransition(t,n).style("opacity",1).attr("transform",e)}},function(t,n,e){"use strict";var r=e(9),i=e(18);t.exports=function(t,n){var e=t.filter(function(){return!i.select(this).classed("update")});function o(t){var e=n.node(t);return"translate("+e.x+","+e.y+")"}e.attr("transform",o),r.applyTransition(t,n).style("opacity",1).attr("transform",o),r.applyTransition(e.selectAll("rect"),n).attr("width",function(t){return n.node(t).width}).attr("height",function(t){return n.node(t).height}).attr("x",function(t){var e=n.node(t);return-e.width/2}).attr("y",function(t){var e=n.node(t);return-e.height/2})}},function(t,n,e){"use strict";var r=e(149),i=e(79),o=e(147),u=e(148);t.exports={rect:function(t,n,e){var i=t.insert("rect",":first-child").attr("rx",e.rx).attr("ry",e.ry).attr("x",-n.width/2).attr("y",-n.height/2).attr("width",n.width).attr("height",n.height);return e.intersect=function(t){return r(e,t)},i},ellipse:function(t,n,e){var r=n.width/2,o=n.height/2,u=t.insert("ellipse",":first-child").attr("x",-n.width/2).attr("y",-n.height/2).attr("rx",r).attr("ry",o);return e.intersect=function(t){return i(e,r,o,t)},u},circle:function(t,n,e){var r=Math.max(n.width,n.height)/2,i=t.insert("circle",":first-child").attr("x",-n.width/2).attr("y",-n.height/2).attr("r",r);return e.intersect=function(t){return o(e,r,t)},i},diamond:function(t,n,e){var r=n.width*Math.SQRT2/2,i=n.height*Math.SQRT2/2,o=[{x:0,y:-i},{x:-r,y:0},{x:0,y:i},{x:r,y:0}],a=t.insert("polygon",":first-child").attr("points",o.map(function(t){return t.x+","+t.y}).join(" "));return e.intersect=function(t){return u(e,o,t)},a}}},function(t,n,e){var r=e(9);function i(t,n,e,i){var o=t.append("marker").attr("id",n).attr("viewBox","0 0 10 10").attr("refX",9).attr("refY",5).attr("markerUnits","strokeWidth").attr("markerWidth",8).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M 0 0 L 10 5 L 0 10 z").style("stroke-width",1).style("stroke-dasharray","1,0");r.applyStyle(o,e[i+"Style"]),e[i+"Class"]&&o.attr("class",e[i+"Class"])}t.exports={default:i,normal:i,vee:function(t,n,e,i){var o=t.append("marker").attr("id",n).attr("viewBox","0 0 10 10").attr("refX",9).attr("refY",5).attr("markerUnits","strokeWidth").attr("markerWidth",8).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M 0 0 L 10 5 L 0 10 L 4 5 z").style("stroke-width",1).style("stroke-dasharray","1,0");r.applyStyle(o,e[i+"Style"]),e[i+"Class"]&&o.attr("class",e[i+"Class"])},undirected:function(t,n,e,i){var o=t.append("marker").attr("id",n).attr("viewBox","0 0 10 10").attr("refX",9).attr("refY",5).attr("markerUnits","strokeWidth").attr("markerWidth",8).attr("markerHeight",6).attr("orient","auto").append("path").attr("d","M 0 5 L 10 5").style("stroke-width",1).style("stroke-dasharray","1,0");r.applyStyle(o,e[i+"Style"]),e[i+"Class"]&&o.attr("class",e[i+"Class"])}}},function(t,n){t.exports="0.6.3"},function(t,n,e){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),function(t){for(var e in t)n.hasOwnProperty(e)||(n[e]=t[e])}(e(87))},,,,function(t,n,e){"use strict";e.r(n);var r=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},i=function(t){var n;return 1===t.length&&(n=t,t=function(t,e){return r(n(t),e)}),{left:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)<0?r=o+1:i=o}return r},right:function(n,e,r,i){for(null==r&&(r=0),null==i&&(i=n.length);r<i;){var o=r+i>>>1;t(n[o],e)>0?i=o:r=o+1}return r}}};var o=i(r),u=o.right,a=o.left,c=u,f=function(t,n){null==n&&(n=s);for(var e=0,r=t.length-1,i=t[0],o=new Array(r<0?0:r);e<r;)o[e]=n(i,i=t[++e]);return o};function s(t,n){return[t,n]}var l=function(t,n,e){var r,i,o,u,a=t.length,c=n.length,f=new Array(a*c);for(null==e&&(e=s),r=o=0;r<a;++r)for(u=t[r],i=0;i<c;++i,++o)f[o]=e(u,n[i]);return f},h=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},d=function(t){return null===t?NaN:+t},p=function(t,n){var e,r,i=t.length,o=0,u=-1,a=0,c=0;if(null==n)for(;++u<i;)isNaN(e=d(t[u]))||(c+=(r=e-a)*(e-(a+=r/++o)));else for(;++u<i;)isNaN(e=d(n(t[u],u,t)))||(c+=(r=e-a)*(e-(a+=r/++o)));if(o>1)return c/(o-1)},v=function(t,n){var e=p(t,n);return e?Math.sqrt(e):e},g=function(t,n){var e,r,i,o=t.length,u=-1;if(null==n){for(;++u<o;)if(null!=(e=t[u])&&e>=e)for(r=i=e;++u<o;)null!=(e=t[u])&&(r>e&&(r=e),i<e&&(i=e))}else for(;++u<o;)if(null!=(e=n(t[u],u,t))&&e>=e)for(r=i=e;++u<o;)null!=(e=n(t[u],u,t))&&(r>e&&(r=e),i<e&&(i=e));return[r,i]},y=Array.prototype,_=y.slice,m=y.map,x=function(t){return function(){return t}},b=function(t){return t},w=function(t,n,e){t=+t,n=+n,e=(i=arguments.length)<2?(n=t,t=0,1):i<3?1:+e;for(var r=-1,i=0|Math.max(0,Math.ceil((n-t)/e)),o=new Array(i);++r<i;)o[r]=t+r*e;return o},M=Math.sqrt(50),E=Math.sqrt(10),T=Math.sqrt(2),k=function(t,n,e){var r,i,o,u,a=-1;if(e=+e,(t=+t)===(n=+n)&&e>0)return[t];if((r=n<t)&&(i=t,t=n,n=i),0===(u=N(t,n,e))||!isFinite(u))return[];if(u>0)for(t=Math.ceil(t/u),n=Math.floor(n/u),o=new Array(i=Math.ceil(n-t+1));++a<i;)o[a]=(t+a)*u;else for(t=Math.floor(t*u),n=Math.ceil(n*u),o=new Array(i=Math.ceil(t-n+1));++a<i;)o[a]=(t-a)/u;return r&&o.reverse(),o};function N(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=M?10:o>=E?5:o>=T?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=M?10:o>=E?5:o>=T?2:1)}function S(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=M?i*=10:o>=E?i*=5:o>=T&&(i*=2),n<t?-i:i}var A=function(t){return Math.ceil(Math.log(t.length)/Math.LN2)+1},O=function(){var t=b,n=g,e=A;function r(r){var i,o,u=r.length,a=new Array(u);for(i=0;i<u;++i)a[i]=t(r[i],i,r);var f=n(a),s=f[0],l=f[1],h=e(a,s,l);Array.isArray(h)||(h=S(s,l,h),h=w(Math.ceil(s/h)*h,Math.floor(l/h)*h,h));for(var d=h.length;h[0]<=s;)h.shift(),--d;for(;h[d-1]>l;)h.pop(),--d;var p,v=new Array(d+1);for(i=0;i<=d;++i)(p=v[i]=[]).x0=i>0?h[i-1]:s,p.x1=i<d?h[i]:l;for(i=0;i<u;++i)s<=(o=a[i])&&o<=l&&v[c(h,o,0,d)].push(r[i]);return v}return r.value=function(n){return arguments.length?(t="function"==typeof n?n:x(n),r):t},r.domain=function(t){return arguments.length?(n="function"==typeof t?t:x([t[0],t[1]]),r):n},r.thresholds=function(t){return arguments.length?(e="function"==typeof t?t:Array.isArray(t)?x(_.call(t)):x(t),r):e},r},C=function(t,n,e){if(null==e&&(e=d),r=t.length){if((n=+n)<=0||r<2)return+e(t[0],0,t);if(n>=1)return+e(t[r-1],r-1,t);var r,i=(r-1)*n,o=Math.floor(i),u=+e(t[o],o,t);return u+(+e(t[o+1],o+1,t)-u)*(i-o)}},j=function(t,n,e){return t=m.call(t,d).sort(r),Math.ceil((e-n)/(2*(C(t,.75)-C(t,.25))*Math.pow(t.length,-1/3)))},I=function(t,n,e){return Math.ceil((e-n)/(3.5*v(t)*Math.pow(t.length,-1/3)))},P=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r},L=function(t,n){var e,r=t.length,i=r,o=-1,u=0;if(null==n)for(;++o<r;)isNaN(e=d(t[o]))?--i:u+=e;else for(;++o<r;)isNaN(e=d(n(t[o],o,t)))?--i:u+=e;if(i)return u/i},R=function(t,n){var e,i=t.length,o=-1,u=[];if(null==n)for(;++o<i;)isNaN(e=d(t[o]))||u.push(e);else for(;++o<i;)isNaN(e=d(n(t[o],o,t)))||u.push(e);return C(u.sort(r),.5)},z=function(t){for(var n,e,r,i=t.length,o=-1,u=0;++o<i;)u+=t[o].length;for(e=new Array(u);--i>=0;)for(n=(r=t[i]).length;--n>=0;)e[--u]=r[n];return e},D=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r},V=function(t,n){for(var e=n.length,r=new Array(e);e--;)r[e]=t[n[e]];return r},U=function(t,n){if(e=t.length){var e,i,o=0,u=0,a=t[u];for(null==n&&(n=r);++o<e;)(n(i=t[o],a)<0||0!==n(a,a))&&(a=i,u=o);return 0===n(a,a)?u:void 0}},F=function(t,n,e){for(var r,i,o=(null==e?t.length:e)-(n=null==n?0:+n);o;)i=Math.random()*o--|0,r=t[o+n],t[o+n]=t[i+n],t[i+n]=r;return t},q=function(t,n){var e,r=t.length,i=-1,o=0;if(null==n)for(;++i<r;)(e=+t[i])&&(o+=e);else for(;++i<r;)(e=+n(t[i],i,t))&&(o+=e);return o},B=function(t){if(!(i=t.length))return[];for(var n=-1,e=D(t,Y),r=new Array(e);++n<e;)for(var i,o=-1,u=r[n]=new Array(i);++o<i;)u[o]=t[o][n];return r};function Y(t){return t.length}var H=function(){return B(arguments)},X=Array.prototype.slice,W=function(t){return t},G=1,$=2,Z=3,Q=4,K=1e-6;function J(t){return"translate("+(t+.5)+",0)"}function tt(t){return"translate(0,"+(t+.5)+")"}function nt(){return!this.__axis}function et(t,n){var e=[],r=null,i=null,o=6,u=6,a=3,c=t===G||t===Q?-1:1,f=t===Q||t===$?"x":"y",s=t===G||t===Z?J:tt;function l(l){var h=null==r?n.ticks?n.ticks.apply(n,e):n.domain():r,d=null==i?n.tickFormat?n.tickFormat.apply(n,e):W:i,p=Math.max(o,0)+a,v=n.range(),g=+v[0]+.5,y=+v[v.length-1]+.5,_=(n.bandwidth?function(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return+t(e)+n}}:function(t){return function(n){return+t(n)}})(n.copy()),m=l.selection?l.selection():l,x=m.selectAll(".domain").data([null]),b=m.selectAll(".tick").data(h,n).order(),w=b.exit(),M=b.enter().append("g").attr("class","tick"),E=b.select("line"),T=b.select("text");x=x.merge(x.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),b=b.merge(M),E=E.merge(M.append("line").attr("stroke","#000").attr(f+"2",c*o)),T=T.merge(M.append("text").attr("fill","#000").attr(f,c*p).attr("dy",t===G?"0em":t===Z?"0.71em":"0.32em")),l!==m&&(x=x.transition(l),b=b.transition(l),E=E.transition(l),T=T.transition(l),w=w.transition(l).attr("opacity",K).attr("transform",function(t){return isFinite(t=_(t))?s(t):this.getAttribute("transform")}),M.attr("opacity",K).attr("transform",function(t){var n=this.parentNode.__axis;return s(n&&isFinite(n=n(t))?n:_(t))})),w.remove(),x.attr("d",t===Q||t==$?"M"+c*u+","+g+"H0.5V"+y+"H"+c*u:"M"+g+","+c*u+"V0.5H"+y+"V"+c*u),b.attr("opacity",1).attr("transform",function(t){return s(_(t))}),E.attr(f+"2",c*o),T.attr(f,c*p).text(d),m.filter(nt).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===$?"start":t===Q?"end":"middle"),m.each(function(){this.__axis=_})}return l.scale=function(t){return arguments.length?(n=t,l):n},l.ticks=function(){return e=X.call(arguments),l},l.tickArguments=function(t){return arguments.length?(e=null==t?[]:X.call(t),l):e.slice()},l.tickValues=function(t){return arguments.length?(r=null==t?null:X.call(t),l):r&&r.slice()},l.tickFormat=function(t){return arguments.length?(i=t,l):i},l.tickSize=function(t){return arguments.length?(o=u=+t,l):o},l.tickSizeInner=function(t){return arguments.length?(o=+t,l):o},l.tickSizeOuter=function(t){return arguments.length?(u=+t,l):u},l.tickPadding=function(t){return arguments.length?(a=+t,l):a},l}function rt(t){return et(G,t)}function it(t){return et($,t)}function ot(t){return et(Z,t)}function ut(t){return et(Q,t)}var at=e(6),ct=e(19),ft=e(2),st=e(0),lt=e(16),ht=function(t){return function(){return t}},dt=function(t,n,e){this.target=t,this.type=n,this.selection=e};function pt(){st.event.stopImmediatePropagation()}var vt=function(){st.event.preventDefault(),st.event.stopImmediatePropagation()},gt={name:"drag"},yt={name:"space"},_t={name:"handle"},mt={name:"center"},xt={name:"x",handles:["e","w"].map(St),input:function(t,n){return t&&[[t[0],n[0][1]],[t[1],n[1][1]]]},output:function(t){return t&&[t[0][0],t[1][0]]}},bt={name:"y",handles:["n","s"].map(St),input:function(t,n){return t&&[[n[0][0],t[0]],[n[1][0],t[1]]]},output:function(t){return t&&[t[0][1],t[1][1]]}},wt={name:"xy",handles:["n","e","s","w","nw","ne","se","sw"].map(St),input:function(t){return t},output:function(t){return t}},Mt={overlay:"crosshair",selection:"move",n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Et={e:"w",w:"e",nw:"ne",ne:"nw",se:"sw",sw:"se"},Tt={n:"s",s:"n",nw:"sw",ne:"se",se:"ne",sw:"nw"},kt={overlay:1,selection:1,n:null,e:1,s:null,w:-1,nw:-1,ne:1,se:1,sw:-1},Nt={overlay:1,selection:1,n:-1,e:null,s:1,w:null,nw:-1,ne:-1,se:1,sw:1};function St(t){return{type:t}}function At(){return!st.event.button}function Ot(){var t=this.ownerSVGElement||this;return[[0,0],[t.width.baseVal.value,t.height.baseVal.value]]}function Ct(t){for(;!t.__brush;)if(!(t=t.parentNode))return;return t.__brush}function jt(t){return t[0][0]===t[1][0]||t[0][1]===t[1][1]}function It(t){var n=t.__brush;return n?n.dim.output(n.selection):null}function Pt(){return zt(xt)}function Lt(){return zt(bt)}var Rt=function(){return zt(wt)};function zt(t){var n,e=Ot,r=At,i=Object(at.a)(u,"start","brush","end"),o=6;function u(n){var e=n.property("__brush",l).selectAll(".overlay").data([St("overlay")]);e.enter().append("rect").attr("class","overlay").attr("pointer-events","all").attr("cursor",Mt.overlay).merge(e).each(function(){var t=Ct(this).extent;Object(st.select)(this).attr("x",t[0][0]).attr("y",t[0][1]).attr("width",t[1][0]-t[0][0]).attr("height",t[1][1]-t[0][1])}),n.selectAll(".selection").data([St("selection")]).enter().append("rect").attr("class","selection").attr("cursor",Mt.selection).attr("fill","#777").attr("fill-opacity",.3).attr("stroke","#fff").attr("shape-rendering","crispEdges");var r=n.selectAll(".handle").data(t.handles,function(t){return t.type});r.exit().remove(),r.enter().append("rect").attr("class",function(t){return"handle handle--"+t.type}).attr("cursor",function(t){return Mt[t.type]}),n.each(a).attr("fill","none").attr("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush touchstart.brush",s)}function a(){var t=Object(st.select)(this),n=Ct(this).selection;n?(t.selectAll(".selection").style("display",null).attr("x",n[0][0]).attr("y",n[0][1]).attr("width",n[1][0]-n[0][0]).attr("height",n[1][1]-n[0][1]),t.selectAll(".handle").style("display",null).attr("x",function(t){return"e"===t.type[t.type.length-1]?n[1][0]-o/2:n[0][0]-o/2}).attr("y",function(t){return"s"===t.type[0]?n[1][1]-o/2:n[0][1]-o/2}).attr("width",function(t){return"n"===t.type||"s"===t.type?n[1][0]-n[0][0]+o:o}).attr("height",function(t){return"e"===t.type||"w"===t.type?n[1][1]-n[0][1]+o:o})):t.selectAll(".selection,.handle").style("display","none").attr("x",null).attr("y",null).attr("width",null).attr("height",null)}function c(t,n){return t.__brush.emitter||new f(t,n)}function f(t,n){this.that=t,this.args=n,this.state=t.__brush,this.active=0}function s(){if(st.event.touches){if(st.event.changedTouches.length<st.event.touches.length)return vt()}else if(n)return;if(r.apply(this,arguments)){var e,i,o,u,f,s,l,h,d,p,v,g,y,_=this,m=st.event.target.__data__.type,x="selection"===(st.event.metaKey?m="overlay":m)?gt:st.event.altKey?mt:_t,b=t===bt?null:kt[m],w=t===xt?null:Nt[m],M=Ct(_),E=M.extent,T=M.selection,k=E[0][0],N=E[0][1],S=E[1][0],A=E[1][1],O=b&&w&&st.event.shiftKey,C=Object(st.mouse)(_),j=C,I=c(_,arguments).beforestart();"overlay"===m?M.selection=T=[[e=t===bt?k:C[0],o=t===xt?N:C[1]],[f=t===bt?S:e,l=t===xt?A:o]]:(e=T[0][0],o=T[0][1],f=T[1][0],l=T[1][1]),i=e,u=o,s=f,h=l;var P=Object(st.select)(_).attr("pointer-events","none"),L=P.selectAll(".overlay").attr("cursor",Mt[m]);if(st.event.touches)P.on("touchmove.brush",z,!0).on("touchend.brush touchcancel.brush",V,!0);else{var R=Object(st.select)(st.event.view).on("keydown.brush",function(){switch(st.event.keyCode){case 16:O=b&&w;break;case 18:x===_t&&(b&&(f=s-d*b,e=i+d*b),w&&(l=h-p*w,o=u+p*w),x=mt,D());break;case 32:x!==_t&&x!==mt||(b<0?f=s-d:b>0&&(e=i-d),w<0?l=h-p:w>0&&(o=u-p),x=yt,L.attr("cursor",Mt.selection),D());break;default:return}vt()},!0).on("keyup.brush",function(){switch(st.event.keyCode){case 16:O&&(g=y=O=!1,D());break;case 18:x===mt&&(b<0?f=s:b>0&&(e=i),w<0?l=h:w>0&&(o=u),x=_t,D());break;case 32:x===yt&&(st.event.altKey?(b&&(f=s-d*b,e=i+d*b),w&&(l=h-p*w,o=u+p*w),x=mt):(b<0?f=s:b>0&&(e=i),w<0?l=h:w>0&&(o=u),x=_t),L.attr("cursor",Mt[m]),D());break;default:return}vt()},!0).on("mousemove.brush",z,!0).on("mouseup.brush",V,!0);Object(ct.b)(st.event.view)}pt(),Object(lt.b)(_),a.call(_),I.start()}function z(){var t=Object(st.mouse)(_);!O||g||y||(Math.abs(t[0]-j[0])>Math.abs(t[1]-j[1])?y=!0:g=!0),j=t,v=!0,vt(),D()}function D(){var t;switch(d=j[0]-C[0],p=j[1]-C[1],x){case yt:case gt:b&&(d=Math.max(k-e,Math.min(S-f,d)),i=e+d,s=f+d),w&&(p=Math.max(N-o,Math.min(A-l,p)),u=o+p,h=l+p);break;case _t:b<0?(d=Math.max(k-e,Math.min(S-e,d)),i=e+d,s=f):b>0&&(d=Math.max(k-f,Math.min(S-f,d)),i=e,s=f+d),w<0?(p=Math.max(N-o,Math.min(A-o,p)),u=o+p,h=l):w>0&&(p=Math.max(N-l,Math.min(A-l,p)),u=o,h=l+p);break;case mt:b&&(i=Math.max(k,Math.min(S,e-d*b)),s=Math.max(k,Math.min(S,f+d*b))),w&&(u=Math.max(N,Math.min(A,o-p*w)),h=Math.max(N,Math.min(A,l+p*w)))}s<i&&(b*=-1,t=e,e=f,f=t,t=i,i=s,s=t,m in Et&&L.attr("cursor",Mt[m=Et[m]])),h<u&&(w*=-1,t=o,o=l,l=t,t=u,u=h,h=t,m in Tt&&L.attr("cursor",Mt[m=Tt[m]])),M.selection&&(T=M.selection),g&&(i=T[0][0],s=T[1][0]),y&&(u=T[0][1],h=T[1][1]),T[0][0]===i&&T[0][1]===u&&T[1][0]===s&&T[1][1]===h||(M.selection=[[i,u],[s,h]],a.call(_),I.brush())}function V(){if(pt(),st.event.touches){if(st.event.touches.length)return;n&&clearTimeout(n),n=setTimeout(function(){n=null},500),P.on("touchmove.brush touchend.brush touchcancel.brush",null)}else Object(ct.c)(st.event.view,v),R.on("keydown.brush keyup.brush mousemove.brush mouseup.brush",null);P.attr("pointer-events","all"),L.attr("cursor",Mt.overlay),M.selection&&(T=M.selection),jt(T)&&(M.selection=null,a.call(_)),I.end()}}function l(){var n=this.__brush||{selection:null};return n.extent=e.apply(this,arguments),n.dim=t,n}return u.move=function(n,e){n.selection?n.on("start.brush",function(){c(this,arguments).beforestart().start()}).on("interrupt.brush end.brush",function(){c(this,arguments).end()}).tween("brush",function(){var n=this,r=n.__brush,i=c(n,arguments),o=r.selection,u=t.input("function"==typeof e?e.apply(this,arguments):e,r.extent),f=Object(ft.a)(o,u);function s(t){r.selection=1===t&&jt(u)?null:f(t),a.call(n),i.brush()}return o&&u?s:s(1)}):n.each(function(){var n=this,r=arguments,i=n.__brush,o=t.input("function"==typeof e?e.apply(n,r):e,i.extent),u=c(n,r).beforestart();Object(lt.b)(n),i.selection=null==o||jt(o)?null:o,a.call(n),u.start().brush().end()})},f.prototype={beforestart:function(){return 1==++this.active&&(this.state.emitter=this,this.starting=!0),this},start:function(){return this.starting&&(this.starting=!1,this.emit("start")),this},brush:function(){return this.emit("brush"),this},end:function(){return 0==--this.active&&(delete this.state.emitter,this.emit("end")),this},emit:function(n){Object(st.customEvent)(new dt(u,n,t.output(this.state.selection)),i.apply,i,[n,this.that,this.args])}},u.extent=function(t){return arguments.length?(e="function"==typeof t?t:ht([[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]]),u):e},u.filter=function(t){return arguments.length?(r="function"==typeof t?t:ht(!!t),u):r},u.handleSize=function(t){return arguments.length?(o=+t,u):o},u.on=function(){var t=i.on.apply(i,arguments);return t===i?u:t},u}var Dt=Math.cos,Vt=Math.sin,Ut=Math.PI,Ft=Ut/2,qt=2*Ut,Bt=Math.max;function Yt(t){return function(n,e){return t(n.source.value+n.target.value,e.source.value+e.target.value)}}var Ht=function(){var t=0,n=null,e=null,r=null;function i(i){var o,u,a,c,f,s,l=i.length,h=[],d=w(l),p=[],v=[],g=v.groups=new Array(l),y=new Array(l*l);for(o=0,f=-1;++f<l;){for(u=0,s=-1;++s<l;)u+=i[f][s];h.push(u),p.push(w(l)),o+=u}for(n&&d.sort(function(t,e){return n(h[t],h[e])}),e&&p.forEach(function(t,n){t.sort(function(t,r){return e(i[n][t],i[n][r])})}),c=(o=Bt(0,qt-t*l)/o)?t:qt/l,u=0,f=-1;++f<l;){for(a=u,s=-1;++s<l;){var _=d[f],m=p[_][s],x=i[_][m],b=u,M=u+=x*o;y[m*l+_]={index:_,subindex:m,startAngle:b,endAngle:M,value:x}}g[_]={index:_,startAngle:a,endAngle:u,value:h[_]},u+=c}for(f=-1;++f<l;)for(s=f-1;++s<l;){var E=y[s*l+f],T=y[f*l+s];(E.value||T.value)&&v.push(E.value<T.value?{source:T,target:E}:{source:E,target:T})}return r?v.sort(r):v}return i.padAngle=function(n){return arguments.length?(t=Bt(0,n),i):t},i.sortGroups=function(t){return arguments.length?(n=t,i):n},i.sortSubgroups=function(t){return arguments.length?(e=t,i):e},i.sortChords=function(t){return arguments.length?(null==t?r=null:(r=Yt(t))._=t,i):r&&r._},i},Xt=Array.prototype.slice,Wt=function(t){return function(){return t}},Gt=Math.PI,$t=2*Gt,Zt=$t-1e-6;function Qt(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Kt(){return new Qt}Qt.prototype=Kt.prototype={constructor:Qt,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,u=this._y1,a=e-t,c=r-n,f=o-t,s=u-n,l=f*f+s*s;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(l>1e-6)if(Math.abs(s*a-c*f)>1e-6&&i){var h=e-o,d=r-u,p=a*a+c*c,v=h*h+d*d,g=Math.sqrt(p),y=Math.sqrt(l),_=i*Math.tan((Gt-Math.acos((p+l-v)/(2*g*y)))/2),m=_/y,x=_/g;Math.abs(m-1)>1e-6&&(this._+="L"+(t+m*f)+","+(n+m*s)),this._+="A"+i+","+i+",0,0,"+ +(s*h>f*d)+","+(this._x1=t+x*a)+","+(this._y1=n+x*c)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n;var u=(e=+e)*Math.cos(r),a=e*Math.sin(r),c=t+u,f=n+a,s=1^o,l=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+c+","+f:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-f)>1e-6)&&(this._+="L"+c+","+f),e&&(l<0&&(l=l%$t+$t),l>Zt?this._+="A"+e+","+e+",0,1,"+s+","+(t-u)+","+(n-a)+"A"+e+","+e+",0,1,"+s+","+(this._x1=c)+","+(this._y1=f):l>1e-6&&(this._+="A"+e+","+e+",0,"+ +(l>=Gt)+","+s+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};var Jt=Kt;function tn(t){return t.source}function nn(t){return t.target}function en(t){return t.radius}function rn(t){return t.startAngle}function on(t){return t.endAngle}var un=function(){var t=tn,n=nn,e=en,r=rn,i=on,o=null;function u(){var u,a=Xt.call(arguments),c=t.apply(this,a),f=n.apply(this,a),s=+e.apply(this,(a[0]=c,a)),l=r.apply(this,a)-Ft,h=i.apply(this,a)-Ft,d=s*Dt(l),p=s*Vt(l),v=+e.apply(this,(a[0]=f,a)),g=r.apply(this,a)-Ft,y=i.apply(this,a)-Ft;if(o||(o=u=Jt()),o.moveTo(d,p),o.arc(0,0,s,l,h),l===g&&h===y||(o.quadraticCurveTo(0,0,v*Dt(g),v*Vt(g)),o.arc(0,0,v,g,y)),o.quadraticCurveTo(0,0,d,p),o.closePath(),u)return o=null,u+""||null}return u.radius=function(t){return arguments.length?(e="function"==typeof t?t:Wt(+t),u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:Wt(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:Wt(+t),u):i},u.source=function(n){return arguments.length?(t=n,u):t},u.target=function(t){return arguments.length?(n=t,u):n},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u};function an(){}function cn(t,n){var e=new an;if(t instanceof an)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var u in t)e.set(u,t[u]);return e}an.prototype=cn.prototype={constructor:an,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var fn=cn,sn=function(){var t,n,e,r=[],i=[];function o(e,i,u,a){if(i>=r.length)return null!=t&&e.sort(t),null!=n?n(e):e;for(var c,f,s,l=-1,h=e.length,d=r[i++],p=fn(),v=u();++l<h;)(s=p.get(c=d(f=e[l])+""))?s.push(f):p.set(c,[f]);return p.each(function(t,n){a(v,n,o(t,i,u,a))}),v}return e={object:function(t){return o(t,0,ln,hn)},map:function(t){return o(t,0,dn,pn)},entries:function(t){return function t(e,o){if(++o>r.length)return e;var u,a=i[o-1];return null!=n&&o>=r.length?u=e.entries():(u=[],e.each(function(n,e){u.push({key:e,values:t(n,o)})})),null!=a?u.sort(function(t,n){return a(t.key,n.key)}):u}(o(t,0,dn,pn),0)},key:function(t){return r.push(t),e},sortKeys:function(t){return i[r.length-1]=t,e},sortValues:function(n){return t=n,e},rollup:function(t){return n=t,e}}};function ln(){return{}}function hn(t,n,e){t[n]=e}function dn(){return fn()}function pn(t,n,e){t.set(n,e)}function vn(){}var gn=fn.prototype;function yn(t,n){var e=new vn;if(t instanceof vn)t.each(function(t){e.add(t)});else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}vn.prototype=yn.prototype={constructor:vn,has:gn.has,add:function(t){return this["$"+(t+="")]=t,this},remove:gn.remove,clear:gn.clear,values:gn.keys,size:gn.size,empty:gn.empty,each:gn.each};var _n=yn,mn=function(t){var n=[];for(var e in t)n.push(e);return n},xn=function(t){var n=[];for(var e in t)n.push(t[e]);return n},bn=function(t){var n=[];for(var e in t)n.push({key:e,value:t[e]});return n},wn=e(1),Mn={},En={},Tn=34,kn=10,Nn=13;function Sn(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}var An=function(t){var n=new RegExp('["'+t+"\n\r]"),e=t.charCodeAt(0);function r(t,n){var r,i=[],o=t.length,u=0,a=0,c=o<=0,f=!1;function s(){if(c)return En;if(f)return f=!1,Mn;var n,r,i=u;if(t.charCodeAt(i)===Tn){for(;u++<o&&t.charCodeAt(u)!==Tn||t.charCodeAt(++u)===Tn;);return(n=u)>=o?c=!0:(r=t.charCodeAt(u++))===kn?f=!0:r===Nn&&(f=!0,t.charCodeAt(u)===kn&&++u),t.slice(i+1,n-1).replace(/""/g,'"')}for(;u<o;){if((r=t.charCodeAt(n=u++))===kn)f=!0;else if(r===Nn)f=!0,t.charCodeAt(u)===kn&&++u;else if(r!==e)continue;return t.slice(i,n)}return c=!0,t.slice(i,o)}for(t.charCodeAt(o-1)===kn&&--o,t.charCodeAt(o-1)===Nn&&--o;(r=s())!==En;){for(var l=[];r!==Mn&&r!==En;)l.push(r),r=s();n&&null==(l=n(l,a++))||i.push(l)}return i}function i(n){return n.map(o).join(t)}function o(t){return null==t?"":n.test(t+="")?'"'+t.replace(/"/g,'""')+'"':t}return{parse:function(t,n){var e,i,o=r(t,function(t,r){if(e)return e(t,r-1);i=t,e=n?function(t,n){var e=Sn(t);return function(r,i){return n(e(r),i,t)}}(t,n):Sn(t)});return o.columns=i||[],o},parseRows:r,format:function(n,e){return null==e&&(e=function(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}(n)),[e.map(o).join(t)].concat(n.map(function(n){return e.map(function(t){return o(n[t])}).join(t)})).join("\n")},formatRows:function(t){return t.map(i).join("\n")}}},On=An(","),Cn=On.parse,jn=On.parseRows,In=On.format,Pn=On.formatRows,Ln=An("\t"),Rn=Ln.parse,zn=Ln.parseRows,Dn=Ln.format,Vn=Ln.formatRows,Un=e(56),Fn=function(t,n){var e;function r(){var r,i,o=e.length,u=0,a=0;for(r=0;r<o;++r)u+=(i=e[r]).x,a+=i.y;for(u=u/o-t,a=a/o-n,r=0;r<o;++r)(i=e[r]).x-=u,i.y-=a}return null==t&&(t=0),null==n&&(n=0),r.initialize=function(t){e=t},r.x=function(n){return arguments.length?(t=+n,r):t},r.y=function(t){return arguments.length?(n=+t,r):n},r},qn=function(t){return function(){return t}},Bn=function(){return 1e-6*(Math.random()-.5)};function Yn(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,u,a,c,f,s,l,h,d=t._root,p={data:r},v=t._x0,g=t._y0,y=t._x1,_=t._y1;if(!d)return t._root=p,t;for(;d.length;)if((f=n>=(o=(v+y)/2))?v=o:y=o,(s=e>=(u=(g+_)/2))?g=u:_=u,i=d,!(d=d[l=s<<1|f]))return i[l]=p,t;if(a=+t._x.call(null,d.data),c=+t._y.call(null,d.data),n===a&&e===c)return p.next=d,i?i[l]=p:t._root=p,t;do{i=i?i[l]=new Array(4):t._root=new Array(4),(f=n>=(o=(v+y)/2))?v=o:y=o,(s=e>=(u=(g+_)/2))?g=u:_=u}while((l=s<<1|f)==(h=(c>=u)<<1|a>=o));return i[h]=d,i[l]=p,t}var Hn=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i};function Xn(t){return t[0]}function Wn(t){return t[1]}function Gn(t,n,e){var r=new $n(null==n?Xn:n,null==e?Wn:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function $n(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function Zn(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}var Qn=Gn.prototype=$n.prototype;function Kn(t){return t.x+t.vx}function Jn(t){return t.y+t.vy}Qn.copy=function(){var t,n,e=new $n(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=Zn(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=Zn(n));return e},Qn.add=function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return Yn(this.cover(n,e),n,e,t)},Qn.addAll=function(t){var n,e,r,i,o=t.length,u=new Array(o),a=new Array(o),c=1/0,f=1/0,s=-1/0,l=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(u[e]=r,a[e]=i,r<c&&(c=r),r>s&&(s=r),i<f&&(f=i),i>l&&(l=i));for(s<c&&(c=this._x0,s=this._x1),l<f&&(f=this._y0,l=this._y1),this.cover(c,f).cover(s,l),e=0;e<o;++e)Yn(this,u[e],a[e],t[e]);return this},Qn.cover=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{if(!(e>t||t>i||r>n||n>o))return this;var u,a,c=i-e,f=this._root;switch(a=(n<(r+o)/2)<<1|t<(e+i)/2){case 0:do{(u=new Array(4))[a]=f,f=u}while(o=r+(c*=2),t>(i=e+c)||n>o);break;case 1:do{(u=new Array(4))[a]=f,f=u}while(o=r+(c*=2),(e=i-c)>t||n>o);break;case 2:do{(u=new Array(4))[a]=f,f=u}while(r=o-(c*=2),t>(i=e+c)||r>n);break;case 3:do{(u=new Array(4))[a]=f,f=u}while(r=o-(c*=2),(e=i-c)>t||r>n)}this._root&&this._root.length&&(this._root=f)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},Qn.data=function(){var t=[];return this.visit(function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)}),t},Qn.extent=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},Qn.find=function(t,n,e){var r,i,o,u,a,c,f,s=this._x0,l=this._y0,h=this._x1,d=this._y1,p=[],v=this._root;for(v&&p.push(new Hn(v,s,l,h,d)),null==e?e=1/0:(s=t-e,l=n-e,h=t+e,d=n+e,e*=e);c=p.pop();)if(!(!(v=c.node)||(i=c.x0)>h||(o=c.y0)>d||(u=c.x1)<s||(a=c.y1)<l))if(v.length){var g=(i+u)/2,y=(o+a)/2;p.push(new Hn(v[3],g,y,u,a),new Hn(v[2],i,y,g,a),new Hn(v[1],g,o,u,y),new Hn(v[0],i,o,g,y)),(f=(n>=y)<<1|t>=g)&&(c=p[p.length-1],p[p.length-1]=p[p.length-1-f],p[p.length-1-f]=c)}else{var _=t-+this._x.call(null,v.data),m=n-+this._y.call(null,v.data),x=_*_+m*m;if(x<e){var b=Math.sqrt(e=x);s=t-b,l=n-b,h=t+b,d=n+b,r=v.data}}return r},Qn.remove=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(u=+this._y.call(null,t)))return this;var n,e,r,i,o,u,a,c,f,s,l,h,d=this._root,p=this._x0,v=this._y0,g=this._x1,y=this._y1;if(!d)return this;if(d.length)for(;;){if((f=o>=(a=(p+g)/2))?p=a:g=a,(s=u>=(c=(v+y)/2))?v=c:y=c,n=d,!(d=d[l=s<<1|f]))return this;if(!d.length)break;(n[l+1&3]||n[l+2&3]||n[l+3&3])&&(e=n,h=l)}for(;d.data!==t;)if(r=d,!(d=d.next))return this;return(i=d.next)&&delete d.next,r?(i?r.next=i:delete r.next,this):n?(i?n[l]=i:delete n[l],(d=n[0]||n[1]||n[2]||n[3])&&d===(n[3]||n[2]||n[1]||n[0])&&!d.length&&(e?e[h]=d:this._root=d),this):(this._root=i,this)},Qn.removeAll=function(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this},Qn.root=function(){return this._root},Qn.size=function(){var t=0;return this.visit(function(n){if(!n.length)do{++t}while(n=n.next)}),t},Qn.visit=function(t){var n,e,r,i,o,u,a=[],c=this._root;for(c&&a.push(new Hn(c,this._x0,this._y0,this._x1,this._y1));n=a.pop();)if(!t(c=n.node,r=n.x0,i=n.y0,o=n.x1,u=n.y1)&&c.length){var f=(r+o)/2,s=(i+u)/2;(e=c[3])&&a.push(new Hn(e,f,s,o,u)),(e=c[2])&&a.push(new Hn(e,r,s,f,u)),(e=c[1])&&a.push(new Hn(e,f,i,o,s)),(e=c[0])&&a.push(new Hn(e,r,i,f,s))}return this},Qn.visitAfter=function(t){var n,e=[],r=[];for(this._root&&e.push(new Hn(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,u=n.x0,a=n.y0,c=n.x1,f=n.y1,s=(u+c)/2,l=(a+f)/2;(o=i[0])&&e.push(new Hn(o,u,a,s,l)),(o=i[1])&&e.push(new Hn(o,s,a,c,l)),(o=i[2])&&e.push(new Hn(o,u,l,s,f)),(o=i[3])&&e.push(new Hn(o,s,l,c,f))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},Qn.x=function(t){return arguments.length?(this._x=t,this):this._x},Qn.y=function(t){return arguments.length?(this._y=t,this):this._y};var te=function(t){var n,e,r=1,i=1;function o(){for(var t,o,a,c,f,s,l,h=n.length,d=0;d<i;++d)for(o=Gn(n,Kn,Jn).visitAfter(u),t=0;t<h;++t)a=n[t],s=e[a.index],l=s*s,c=a.x+a.vx,f=a.y+a.vy,o.visit(p);function p(t,n,e,i,o){var u=t.data,h=t.r,d=s+h;if(!u)return n>c+d||i<c-d||e>f+d||o<f-d;if(u.index>a.index){var p=c-u.x-u.vx,v=f-u.y-u.vy,g=p*p+v*v;g<d*d&&(0===p&&(g+=(p=Bn())*p),0===v&&(g+=(v=Bn())*v),g=(d-(g=Math.sqrt(g)))/g*r,a.vx+=(p*=g)*(d=(h*=h)/(l+h)),a.vy+=(v*=g)*d,u.vx-=p*(d=1-d),u.vy-=v*d)}}}function u(t){if(t.data)return t.r=e[t.data.index];for(var n=t.r=0;n<4;++n)t[n]&&t[n].r>t.r&&(t.r=t[n].r)}function a(){if(n){var r,i,o=n.length;for(e=new Array(o),r=0;r<o;++r)i=n[r],e[i.index]=+t(i,r,n)}}return"function"!=typeof t&&(t=qn(null==t?1:+t)),o.initialize=function(t){n=t,a()},o.iterations=function(t){return arguments.length?(i=+t,o):i},o.strength=function(t){return arguments.length?(r=+t,o):r},o.radius=function(n){return arguments.length?(t="function"==typeof n?n:qn(+n),a(),o):t},o};function ne(t){return t.index}function ee(t,n){var e=t.get(n);if(!e)throw new Error("missing: "+n);return e}var re=function(t){var n,e,r,i,o,u=ne,a=function(t){return 1/Math.min(i[t.source.index],i[t.target.index])},c=qn(30),f=1;function s(r){for(var i=0,u=t.length;i<f;++i)for(var a,c,s,l,h,d,p,v=0;v<u;++v)c=(a=t[v]).source,l=(s=a.target).x+s.vx-c.x-c.vx||Bn(),h=s.y+s.vy-c.y-c.vy||Bn(),l*=d=((d=Math.sqrt(l*l+h*h))-e[v])/d*r*n[v],h*=d,s.vx-=l*(p=o[v]),s.vy-=h*p,c.vx+=l*(p=1-p),c.vy+=h*p}function l(){if(r){var a,c,f=r.length,s=t.length,l=fn(r,u);for(a=0,i=new Array(f);a<s;++a)(c=t[a]).index=a,"object"!=typeof c.source&&(c.source=ee(l,c.source)),"object"!=typeof c.target&&(c.target=ee(l,c.target)),i[c.source.index]=(i[c.source.index]||0)+1,i[c.target.index]=(i[c.target.index]||0)+1;for(a=0,o=new Array(s);a<s;++a)c=t[a],o[a]=i[c.source.index]/(i[c.source.index]+i[c.target.index]);n=new Array(s),h(),e=new Array(s),d()}}function h(){if(r)for(var e=0,i=t.length;e<i;++e)n[e]=+a(t[e],e,t)}function d(){if(r)for(var n=0,i=t.length;n<i;++n)e[n]=+c(t[n],n,t)}return null==t&&(t=[]),s.initialize=function(t){r=t,l()},s.links=function(n){return arguments.length?(t=n,l(),s):t},s.id=function(t){return arguments.length?(u=t,s):u},s.iterations=function(t){return arguments.length?(f=+t,s):f},s.strength=function(t){return arguments.length?(a="function"==typeof t?t:qn(+t),h(),s):a},s.distance=function(t){return arguments.length?(c="function"==typeof t?t:qn(+t),d(),s):c},s},ie=e(12);function oe(t){return t.x}function ue(t){return t.y}var ae,ce=10,fe=Math.PI*(3-Math.sqrt(5)),se=function(t){var n,e=1,r=.001,i=1-Math.pow(r,1/300),o=0,u=.6,a=fn(),c=Object(ie.d)(s),f=Object(at.a)("tick","end");function s(){l(),f.call("tick",n),e<r&&(c.stop(),f.call("end",n))}function l(){var n,r,c=t.length;for(e+=(o-e)*i,a.each(function(t){t(e)}),n=0;n<c;++n)null==(r=t[n]).fx?r.x+=r.vx*=u:(r.x=r.fx,r.vx=0),null==r.fy?r.y+=r.vy*=u:(r.y=r.fy,r.vy=0)}function h(){for(var n,e=0,r=t.length;e<r;++e){if((n=t[e]).index=e,isNaN(n.x)||isNaN(n.y)){var i=ce*Math.sqrt(e),o=e*fe;n.x=i*Math.cos(o),n.y=i*Math.sin(o)}(isNaN(n.vx)||isNaN(n.vy))&&(n.vx=n.vy=0)}}function d(n){return n.initialize&&n.initialize(t),n}return null==t&&(t=[]),h(),n={tick:l,restart:function(){return c.restart(s),n},stop:function(){return c.stop(),n},nodes:function(e){return arguments.length?(t=e,h(),a.each(d),n):t},alpha:function(t){return arguments.length?(e=+t,n):e},alphaMin:function(t){return arguments.length?(r=+t,n):r},alphaDecay:function(t){return arguments.length?(i=+t,n):+i},alphaTarget:function(t){return arguments.length?(o=+t,n):o},velocityDecay:function(t){return arguments.length?(u=1-t,n):1-u},force:function(t,e){return arguments.length>1?(null==e?a.remove(t):a.set(t,d(e)),n):a.get(t)},find:function(n,e,r){var i,o,u,a,c,f=0,s=t.length;for(null==r?r=1/0:r*=r,f=0;f<s;++f)(u=(i=n-(a=t[f]).x)*i+(o=e-a.y)*o)<r&&(c=a,r=u);return c},on:function(t,e){return arguments.length>1?(f.on(t,e),n):f.on(t)}}},le=function(){var t,n,e,r,i=qn(-30),o=1,u=1/0,a=.81;function c(r){var i,o=t.length,u=Gn(t,oe,ue).visitAfter(s);for(e=r,i=0;i<o;++i)n=t[i],u.visit(l)}function f(){if(t){var n,e,o=t.length;for(r=new Array(o),n=0;n<o;++n)e=t[n],r[e.index]=+i(e,n,t)}}function s(t){var n,e,i,o,u,a=0,c=0;if(t.length){for(i=o=u=0;u<4;++u)(n=t[u])&&(e=Math.abs(n.value))&&(a+=n.value,c+=e,i+=e*n.x,o+=e*n.y);t.x=i/c,t.y=o/c}else{(n=t).x=n.data.x,n.y=n.data.y;do{a+=r[n.data.index]}while(n=n.next)}t.value=a}function l(t,i,c,f){if(!t.value)return!0;var s=t.x-n.x,l=t.y-n.y,h=f-i,d=s*s+l*l;if(h*h/a<d)return d<u&&(0===s&&(d+=(s=Bn())*s),0===l&&(d+=(l=Bn())*l),d<o&&(d=Math.sqrt(o*d)),n.vx+=s*t.value*e/d,n.vy+=l*t.value*e/d),!0;if(!(t.length||d>=u)){(t.data!==n||t.next)&&(0===s&&(d+=(s=Bn())*s),0===l&&(d+=(l=Bn())*l),d<o&&(d=Math.sqrt(o*d)));do{t.data!==n&&(h=r[t.data.index]*e/d,n.vx+=s*h,n.vy+=l*h)}while(t=t.next)}}return c.initialize=function(n){t=n,f()},c.strength=function(t){return arguments.length?(i="function"==typeof t?t:qn(+t),f(),c):i},c.distanceMin=function(t){return arguments.length?(o=t*t,c):Math.sqrt(o)},c.distanceMax=function(t){return arguments.length?(u=t*t,c):Math.sqrt(u)},c.theta=function(t){return arguments.length?(a=t*t,c):Math.sqrt(a)},c},he=function(t,n,e){var r,i,o,u=qn(.1);function a(t){for(var u=0,a=r.length;u<a;++u){var c=r[u],f=c.x-n||1e-6,s=c.y-e||1e-6,l=Math.sqrt(f*f+s*s),h=(o[u]-l)*i[u]*t/l;c.vx+=f*h,c.vy+=s*h}}function c(){if(r){var n,e=r.length;for(i=new Array(e),o=new Array(e),n=0;n<e;++n)o[n]=+t(r[n],n,r),i[n]=isNaN(o[n])?0:+u(r[n],n,r)}}return"function"!=typeof t&&(t=qn(+t)),null==n&&(n=0),null==e&&(e=0),a.initialize=function(t){r=t,c()},a.strength=function(t){return arguments.length?(u="function"==typeof t?t:qn(+t),c(),a):u},a.radius=function(n){return arguments.length?(t="function"==typeof n?n:qn(+n),c(),a):t},a.x=function(t){return arguments.length?(n=+t,a):n},a.y=function(t){return arguments.length?(e=+t,a):e},a},de=function(t){var n,e,r,i=qn(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vx+=(r[o]-i.x)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=qn(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:qn(+t),u(),o):i},o.x=function(n){return arguments.length?(t="function"==typeof n?n:qn(+n),u(),o):t},o},pe=function(t){var n,e,r,i=qn(.1);function o(t){for(var i,o=0,u=n.length;o<u;++o)(i=n[o]).vy+=(r[o]-i.y)*e[o]*t}function u(){if(n){var o,u=n.length;for(e=new Array(u),r=new Array(u),o=0;o<u;++o)e[o]=isNaN(r[o]=+t(n[o],o,n))?0:+i(n[o],o,n)}}return"function"!=typeof t&&(t=qn(null==t?0:+t)),o.initialize=function(t){n=t,u()},o.strength=function(t){return arguments.length?(i="function"==typeof t?t:qn(+t),u(),o):i},o.y=function(n){return arguments.length?(t="function"==typeof n?n:qn(+n),u(),o):t},o},ve=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},ge=function(t){return(t=ve(Math.abs(t)))?t[1]:NaN},ye=function(t,n){var e=ve(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},_e={"":function(t,n){t:for(var e,r=(t=t.toPrecision(n)).length,i=1,o=-1;i<r;++i)switch(t[i]){case".":o=e=i;break;case"0":0===o&&(o=i),e=i;break;case"e":break t;default:o>0&&(o=0)}return o>0?t.slice(0,o)+t.slice(e+1):t},"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return ye(100*t,n)},r:ye,s:function(t,n){var e=ve(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(ae=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,u=r.length;return o===u?r:o>u?r+new Array(o-u+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+ve(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},me=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;function xe(t){return new be(t)}function be(t){if(!(n=me.exec(t)))throw new Error("invalid format: "+t);var n,e=n[1]||" ",r=n[2]||">",i=n[3]||"-",o=n[4]||"",u=!!n[5],a=n[6]&&+n[6],c=!!n[7],f=n[8]&&+n[8].slice(1),s=n[9]||"";"n"===s?(c=!0,s="g"):_e[s]||(s=""),(u||"0"===e&&"="===r)&&(u=!0,e="0",r="="),this.fill=e,this.align=r,this.sign=i,this.symbol=o,this.zero=u,this.width=a,this.comma=c,this.precision=f,this.type=s}xe.prototype=be.prototype,be.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var we,Me,Ee,Te=function(t){return t},ke=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],Ne=function(t){var n,e,r=t.grouping&&t.thousands?(n=t.grouping,e=t.thousands,function(t,r){for(var i=t.length,o=[],u=0,a=n[0],c=0;i>0&&a>0&&(c+a+1>r&&(a=Math.max(1,r-c)),o.push(t.substring(i-=a,i+a)),!((c+=a+1)>r));)a=n[u=(u+1)%n.length];return o.reverse().join(e)}):Te,i=t.currency,o=t.decimal,u=t.numerals?function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}}(t.numerals):Te,a=t.percent||"%";function c(t){var n=(t=xe(t)).fill,e=t.align,c=t.sign,f=t.symbol,s=t.zero,l=t.width,h=t.comma,d=t.precision,p=t.type,v="$"===f?i[0]:"#"===f&&/[boxX]/.test(p)?"0"+p.toLowerCase():"",g="$"===f?i[1]:/[%p]/.test(p)?a:"",y=_e[p],_=!p||/[defgprs%]/.test(p);function m(t){var i,a,f,m=v,x=g;if("c"===p)x=y(t)+x,t="";else{var b=(t=+t)<0;if(t=y(Math.abs(t),d),b&&0==+t&&(b=!1),m=(b?"("===c?c:"-":"-"===c||"("===c?"":c)+m,x=("s"===p?ke[8+ae/3]:"")+x+(b&&"("===c?")":""),_)for(i=-1,a=t.length;++i<a;)if(48>(f=t.charCodeAt(i))||f>57){x=(46===f?o+t.slice(i+1):t.slice(i))+x,t=t.slice(0,i);break}}h&&!s&&(t=r(t,1/0));var w=m.length+t.length+x.length,M=w<l?new Array(l-w+1).join(n):"";switch(h&&s&&(t=r(M+t,M.length?l-x.length:1/0),M=""),e){case"<":t=m+t+x+M;break;case"=":t=m+M+t+x;break;case"^":t=M.slice(0,w=M.length>>1)+m+t+x+M.slice(w);break;default:t=M+m+t+x}return u(t)}return d=null==d?p?6:12:/[gprs]/.test(p)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),m.toString=function(){return t+""},m}return{format:c,formatPrefix:function(t,n){var e=c(((t=xe(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(ge(n)/3))),i=Math.pow(10,-r),o=ke[8+r/3];return function(t){return e(i*t)+o}}}};function Se(t){return we=Ne(t),Me=we.format,Ee=we.formatPrefix,we}Se({decimal:".",thousands:",",grouping:[3],currency:["$",""]});var Ae=function(t){return Math.max(0,-ge(Math.abs(t)))},Oe=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(ge(n)/3)))-ge(Math.abs(t)))},Ce=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,ge(n)-ge(t))+1},je=function(){return new Ie};function Ie(){this.reset()}Ie.prototype={constructor:Ie,reset:function(){this.s=this.t=0},add:function(t){Le(Pe,t,this.t),Le(this,Pe.s,this.s),this.s?this.t+=Pe.t:this.s=Pe.t},valueOf:function(){return this.s}};var Pe=new Ie;function Le(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}var Re=1e-6,ze=Math.PI,De=ze/2,Ve=ze/4,Ue=2*ze,Fe=180/ze,qe=ze/180,Be=Math.abs,Ye=Math.atan,He=Math.atan2,Xe=Math.cos,We=Math.ceil,Ge=Math.exp,$e=(Math.floor,Math.log),Ze=Math.pow,Qe=Math.sin,Ke=Math.sign||function(t){return t>0?1:t<0?-1:0},Je=Math.sqrt,tr=Math.tan;function nr(t){return t>1?0:t<-1?ze:Math.acos(t)}function er(t){return t>1?De:t<-1?-De:Math.asin(t)}function rr(t){return(t=Qe(t/2))*t}function ir(){}function or(t,n){t&&ar.hasOwnProperty(t.type)&&ar[t.type](t,n)}var ur={Feature:function(t,n){or(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)or(e[r].geometry,n)}},ar={Sphere:function(t,n){n.sphere()},Point:function(t,n){t=t.coordinates,n.point(t[0],t[1],t[2])},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)t=e[r],n.point(t[0],t[1],t[2])},LineString:function(t,n){cr(t.coordinates,n,0)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)cr(e[r],n,0)},Polygon:function(t,n){fr(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)fr(e[r],n)},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)or(e[r],n)}};function cr(t,n,e){var r,i=-1,o=t.length-e;for(n.lineStart();++i<o;)r=t[i],n.point(r[0],r[1],r[2]);n.lineEnd()}function fr(t,n){var e=-1,r=t.length;for(n.polygonStart();++e<r;)cr(t[e],n,1);n.polygonEnd()}var sr,lr,hr,dr,pr,vr=function(t,n){t&&ur.hasOwnProperty(t.type)?ur[t.type](t,n):or(t,n)},gr=je(),yr=je(),_r={point:ir,lineStart:ir,lineEnd:ir,polygonStart:function(){gr.reset(),_r.lineStart=mr,_r.lineEnd=xr},polygonEnd:function(){var t=+gr;yr.add(t<0?Ue+t:t),this.lineStart=this.lineEnd=this.point=ir},sphere:function(){yr.add(Ue)}};function mr(){_r.point=br}function xr(){wr(sr,lr)}function br(t,n){_r.point=wr,sr=t,lr=n,hr=t*=qe,dr=Xe(n=(n*=qe)/2+Ve),pr=Qe(n)}function wr(t,n){var e=(t*=qe)-hr,r=e>=0?1:-1,i=r*e,o=Xe(n=(n*=qe)/2+Ve),u=Qe(n),a=pr*u,c=dr*o+a*Xe(i),f=a*r*Qe(i);gr.add(He(f,c)),hr=t,dr=o,pr=u}var Mr=function(t){return yr.reset(),vr(t,_r),2*yr};function Er(t){return[He(t[1],t[0]),er(t[2])]}function Tr(t){var n=t[0],e=t[1],r=Xe(e);return[r*Xe(n),r*Qe(n),Qe(e)]}function kr(t,n){return t[0]*n[0]+t[1]*n[1]+t[2]*n[2]}function Nr(t,n){return[t[1]*n[2]-t[2]*n[1],t[2]*n[0]-t[0]*n[2],t[0]*n[1]-t[1]*n[0]]}function Sr(t,n){t[0]+=n[0],t[1]+=n[1],t[2]+=n[2]}function Ar(t,n){return[t[0]*n,t[1]*n,t[2]*n]}function Or(t){var n=Je(t[0]*t[0]+t[1]*t[1]+t[2]*t[2]);t[0]/=n,t[1]/=n,t[2]/=n}var Cr,jr,Ir,Pr,Lr,Rr,zr,Dr,Vr,Ur,Fr=je(),qr={point:Br,lineStart:Hr,lineEnd:Xr,polygonStart:function(){qr.point=Wr,qr.lineStart=Gr,qr.lineEnd=$r,Fr.reset(),_r.polygonStart()},polygonEnd:function(){_r.polygonEnd(),qr.point=Br,qr.lineStart=Hr,qr.lineEnd=Xr,gr<0?(Cr=-(Ir=180),jr=-(Pr=90)):Fr>Re?Pr=90:Fr<-Re&&(jr=-90),Ur[0]=Cr,Ur[1]=Ir}};function Br(t,n){Vr.push(Ur=[Cr=t,Ir=t]),n<jr&&(jr=n),n>Pr&&(Pr=n)}function Yr(t,n){var e=Tr([t*qe,n*qe]);if(Dr){var r=Nr(Dr,e),i=Nr([r[1],-r[0],0],r);Or(i),i=Er(i);var o,u=t-Lr,a=u>0?1:-1,c=i[0]*Fe*a,f=Be(u)>180;f^(a*Lr<c&&c<a*t)?(o=i[1]*Fe)>Pr&&(Pr=o):f^(a*Lr<(c=(c+360)%360-180)&&c<a*t)?(o=-i[1]*Fe)<jr&&(jr=o):(n<jr&&(jr=n),n>Pr&&(Pr=n)),f?t<Lr?Zr(Cr,t)>Zr(Cr,Ir)&&(Ir=t):Zr(t,Ir)>Zr(Cr,Ir)&&(Cr=t):Ir>=Cr?(t<Cr&&(Cr=t),t>Ir&&(Ir=t)):t>Lr?Zr(Cr,t)>Zr(Cr,Ir)&&(Ir=t):Zr(t,Ir)>Zr(Cr,Ir)&&(Cr=t)}else Vr.push(Ur=[Cr=t,Ir=t]);n<jr&&(jr=n),n>Pr&&(Pr=n),Dr=e,Lr=t}function Hr(){qr.point=Yr}function Xr(){Ur[0]=Cr,Ur[1]=Ir,qr.point=Br,Dr=null}function Wr(t,n){if(Dr){var e=t-Lr;Fr.add(Be(e)>180?e+(e>0?360:-360):e)}else Rr=t,zr=n;_r.point(t,n),Yr(t,n)}function Gr(){_r.lineStart()}function $r(){Wr(Rr,zr),_r.lineEnd(),Be(Fr)>Re&&(Cr=-(Ir=180)),Ur[0]=Cr,Ur[1]=Ir,Dr=null}function Zr(t,n){return(n-=t)<0?n+360:n}function Qr(t,n){return t[0]-n[0]}function Kr(t,n){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}var Jr,ti,ni,ei,ri,ii,oi,ui,ai,ci,fi,si,li,hi,di,pi,vi=function(t){var n,e,r,i,o,u,a;if(Pr=Ir=-(Cr=jr=1/0),Vr=[],vr(t,qr),e=Vr.length){for(Vr.sort(Qr),n=1,o=[r=Vr[0]];n<e;++n)Kr(r,(i=Vr[n])[0])||Kr(r,i[1])?(Zr(r[0],i[1])>Zr(r[0],r[1])&&(r[1]=i[1]),Zr(i[0],r[1])>Zr(r[0],r[1])&&(r[0]=i[0])):o.push(r=i);for(u=-1/0,n=0,r=o[e=o.length-1];n<=e;r=i,++n)i=o[n],(a=Zr(r[1],i[0]))>u&&(u=a,Cr=i[0],Ir=r[1])}return Vr=Ur=null,Cr===1/0||jr===1/0?[[NaN,NaN],[NaN,NaN]]:[[Cr,jr],[Ir,Pr]]},gi={sphere:ir,point:yi,lineStart:mi,lineEnd:wi,polygonStart:function(){gi.lineStart=Mi,gi.lineEnd=Ei},polygonEnd:function(){gi.lineStart=mi,gi.lineEnd=wi}};function yi(t,n){t*=qe;var e=Xe(n*=qe);_i(e*Xe(t),e*Qe(t),Qe(n))}function _i(t,n,e){ni+=(t-ni)/++Jr,ei+=(n-ei)/Jr,ri+=(e-ri)/Jr}function mi(){gi.point=xi}function xi(t,n){t*=qe;var e=Xe(n*=qe);hi=e*Xe(t),di=e*Qe(t),pi=Qe(n),gi.point=bi,_i(hi,di,pi)}function bi(t,n){t*=qe;var e=Xe(n*=qe),r=e*Xe(t),i=e*Qe(t),o=Qe(n),u=He(Je((u=di*o-pi*i)*u+(u=pi*r-hi*o)*u+(u=hi*i-di*r)*u),hi*r+di*i+pi*o);ti+=u,ii+=u*(hi+(hi=r)),oi+=u*(di+(di=i)),ui+=u*(pi+(pi=o)),_i(hi,di,pi)}function wi(){gi.point=yi}function Mi(){gi.point=Ti}function Ei(){ki(si,li),gi.point=yi}function Ti(t,n){si=t,li=n,t*=qe,n*=qe,gi.point=ki;var e=Xe(n);hi=e*Xe(t),di=e*Qe(t),pi=Qe(n),_i(hi,di,pi)}function ki(t,n){t*=qe;var e=Xe(n*=qe),r=e*Xe(t),i=e*Qe(t),o=Qe(n),u=di*o-pi*i,a=pi*r-hi*o,c=hi*i-di*r,f=Je(u*u+a*a+c*c),s=er(f),l=f&&-s/f;ai+=l*u,ci+=l*a,fi+=l*c,ti+=s,ii+=s*(hi+(hi=r)),oi+=s*(di+(di=i)),ui+=s*(pi+(pi=o)),_i(hi,di,pi)}var Ni=function(t){Jr=ti=ni=ei=ri=ii=oi=ui=ai=ci=fi=0,vr(t,gi);var n=ai,e=ci,r=fi,i=n*n+e*e+r*r;return i<1e-12&&(n=ii,e=oi,r=ui,ti<Re&&(n=ni,e=ei,r=ri),(i=n*n+e*e+r*r)<1e-12)?[NaN,NaN]:[He(e,n)*Fe,er(r/Je(i))*Fe]},Si=function(t){return function(){return t}},Ai=function(t,n){function e(e,r){return e=t(e,r),n(e[0],e[1])}return t.invert&&n.invert&&(e.invert=function(e,r){return(e=n.invert(e,r))&&t.invert(e[0],e[1])}),e};function Oi(t,n){return[t>ze?t-Ue:t<-ze?t+Ue:t,n]}function Ci(t,n,e){return(t%=Ue)?n||e?Ai(Ii(t),Pi(n,e)):Ii(t):n||e?Pi(n,e):Oi}function ji(t){return function(n,e){return[(n+=t)>ze?n-Ue:n<-ze?n+Ue:n,e]}}function Ii(t){var n=ji(t);return n.invert=ji(-t),n}function Pi(t,n){var e=Xe(t),r=Qe(t),i=Xe(n),o=Qe(n);function u(t,n){var u=Xe(n),a=Xe(t)*u,c=Qe(t)*u,f=Qe(n),s=f*e+a*r;return[He(c*i-s*o,a*e-f*r),er(s*i+c*o)]}return u.invert=function(t,n){var u=Xe(n),a=Xe(t)*u,c=Qe(t)*u,f=Qe(n),s=f*i-c*o;return[He(c*i+f*o,a*e+s*r),er(s*e-a*r)]},u}Oi.invert=Oi;var Li=function(t){function n(n){return(n=t(n[0]*qe,n[1]*qe))[0]*=Fe,n[1]*=Fe,n}return t=Ci(t[0]*qe,t[1]*qe,t.length>2?t[2]*qe:0),n.invert=function(n){return(n=t.invert(n[0]*qe,n[1]*qe))[0]*=Fe,n[1]*=Fe,n},n};function Ri(t,n,e,r,i,o){if(e){var u=Xe(n),a=Qe(n),c=r*e;null==i?(i=n+r*Ue,o=n-c/2):(i=zi(u,i),o=zi(u,o),(r>0?i<o:i>o)&&(i+=r*Ue));for(var f,s=i;r>0?s>o:s<o;s-=c)f=Er([u,-a*Xe(s),-a*Qe(s)]),t.point(f[0],f[1])}}function zi(t,n){(n=Tr(n))[0]-=t,Or(n);var e=nr(-n[1]);return((-n[2]<0?-e:e)+Ue-Re)%Ue}var Di=function(){var t,n,e=Si([0,0]),r=Si(90),i=Si(6),o={point:function(e,r){t.push(e=n(e,r)),e[0]*=Fe,e[1]*=Fe}};function u(){var u=e.apply(this,arguments),a=r.apply(this,arguments)*qe,c=i.apply(this,arguments)*qe;return t=[],n=Ci(-u[0]*qe,-u[1]*qe,0).invert,Ri(o,a,c,1),u={type:"Polygon",coordinates:[t]},t=n=null,u}return u.center=function(t){return arguments.length?(e="function"==typeof t?t:Si([+t[0],+t[1]]),u):e},u.radius=function(t){return arguments.length?(r="function"==typeof t?t:Si(+t),u):r},u.precision=function(t){return arguments.length?(i="function"==typeof t?t:Si(+t),u):i},u},Vi=function(){var t,n=[];return{point:function(n,e){t.push([n,e])},lineStart:function(){n.push(t=[])},lineEnd:ir,rejoin:function(){n.length>1&&n.push(n.pop().concat(n.shift()))},result:function(){var e=n;return n=[],t=null,e}}},Ui=function(t,n){return Be(t[0]-n[0])<Re&&Be(t[1]-n[1])<Re};function Fi(t,n,e,r){this.x=t,this.z=n,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}var qi=function(t,n,e,r,i){var o,u,a=[],c=[];if(t.forEach(function(t){if(!((n=t.length-1)<=0)){var n,e,r=t[0],u=t[n];if(Ui(r,u)){for(i.lineStart(),o=0;o<n;++o)i.point((r=t[o])[0],r[1]);i.lineEnd()}else a.push(e=new Fi(r,t,null,!0)),c.push(e.o=new Fi(r,null,e,!1)),a.push(e=new Fi(u,t,null,!1)),c.push(e.o=new Fi(u,null,e,!0))}}),a.length){for(c.sort(n),Bi(a),Bi(c),o=0,u=c.length;o<u;++o)c[o].e=e=!e;for(var f,s,l=a[0];;){for(var h=l,d=!0;h.v;)if((h=h.n)===l)return;f=h.z,i.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(o=0,u=f.length;o<u;++o)i.point((s=f[o])[0],s[1]);else r(h.x,h.n.x,1,i);h=h.n}else{if(d)for(f=h.p.z,o=f.length-1;o>=0;--o)i.point((s=f[o])[0],s[1]);else r(h.x,h.p.x,-1,i);h=h.p}f=(h=h.o).z,d=!d}while(!h.v);i.lineEnd()}}};function Bi(t){if(n=t.length){for(var n,e,r=0,i=t[0];++r<n;)i.n=e=t[r],e.p=i,i=e;i.n=e=t[0],e.p=i}}var Yi=je(),Hi=function(t,n){var e=n[0],r=n[1],i=[Qe(e),-Xe(e),0],o=0,u=0;Yi.reset();for(var a=0,c=t.length;a<c;++a)if(s=(f=t[a]).length)for(var f,s,l=f[s-1],h=l[0],d=l[1]/2+Ve,p=Qe(d),v=Xe(d),g=0;g<s;++g,h=_,p=x,v=b,l=y){var y=f[g],_=y[0],m=y[1]/2+Ve,x=Qe(m),b=Xe(m),w=_-h,M=w>=0?1:-1,E=M*w,T=E>ze,k=p*x;if(Yi.add(He(k*M*Qe(E),v*b+k*Xe(E))),o+=T?w+M*Ue:w,T^h>=e^_>=e){var N=Nr(Tr(l),Tr(y));Or(N);var S=Nr(i,N);Or(S);var A=(T^w>=0?-1:1)*er(S[2]);(r>A||r===A&&(N[0]||N[1]))&&(u+=T^w>=0?1:-1)}}return(o<-Re||o<Re&&Yi<-Re)^1&u},Xi=function(t,n,e,r){return function(i){var o,u,a,c=n(i),f=Vi(),s=n(f),l=!1,h={point:d,lineStart:v,lineEnd:g,polygonStart:function(){h.point=y,h.lineStart=_,h.lineEnd=m,u=[],o=[]},polygonEnd:function(){h.point=d,h.lineStart=v,h.lineEnd=g,u=z(u);var t=Hi(o,r);u.length?(l||(i.polygonStart(),l=!0),qi(u,Gi,t,e,i)):t&&(l||(i.polygonStart(),l=!0),i.lineStart(),e(null,null,1,i),i.lineEnd()),l&&(i.polygonEnd(),l=!1),u=o=null},sphere:function(){i.polygonStart(),i.lineStart(),e(null,null,1,i),i.lineEnd(),i.polygonEnd()}};function d(n,e){t(n,e)&&i.point(n,e)}function p(t,n){c.point(t,n)}function v(){h.point=p,c.lineStart()}function g(){h.point=d,c.lineEnd()}function y(t,n){a.push([t,n]),s.point(t,n)}function _(){s.lineStart(),a=[]}function m(){y(a[0][0],a[0][1]),s.lineEnd();var t,n,e,r,c=s.clean(),h=f.result(),d=h.length;if(a.pop(),o.push(a),a=null,d)if(1&c){if((n=(e=h[0]).length-1)>0){for(l||(i.polygonStart(),l=!0),i.lineStart(),t=0;t<n;++t)i.point((r=e[t])[0],r[1]);i.lineEnd()}}else d>1&&2&c&&h.push(h.pop().concat(h.shift())),u.push(h.filter(Wi))}return h}};function Wi(t){return t.length>1}function Gi(t,n){return((t=t.x)[0]<0?t[1]-De-Re:De-t[1])-((n=n.x)[0]<0?n[1]-De-Re:De-n[1])}var $i=Xi(function(){return!0},function(t){var n,e=NaN,r=NaN,i=NaN;return{lineStart:function(){t.lineStart(),n=1},point:function(o,u){var a=o>0?ze:-ze,c=Be(o-e);Be(c-ze)<Re?(t.point(e,r=(r+u)/2>0?De:-De),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),t.point(o,r),n=0):i!==a&&c>=ze&&(Be(e-i)<Re&&(e-=i*Re),Be(o-a)<Re&&(o-=a*Re),r=function(t,n,e,r){var i,o,u=Qe(t-e);return Be(u)>Re?Ye((Qe(n)*(o=Xe(r))*Qe(e)-Qe(r)*(i=Xe(n))*Qe(t))/(i*o*u)):(n+r)/2}(e,r,o,u),t.point(i,r),t.lineEnd(),t.lineStart(),t.point(a,r),n=0),t.point(e=o,r=u),i=a},lineEnd:function(){t.lineEnd(),e=r=NaN},clean:function(){return 2-n}}},function(t,n,e,r){var i;if(null==t)i=e*De,r.point(-ze,i),r.point(0,i),r.point(ze,i),r.point(ze,0),r.point(ze,-i),r.point(0,-i),r.point(-ze,-i),r.point(-ze,0),r.point(-ze,i);else if(Be(t[0]-n[0])>Re){var o=t[0]<n[0]?ze:-ze;i=e*o/2,r.point(-o,i),r.point(0,i),r.point(o,i)}else r.point(n[0],n[1])},[-ze,-De]);var Zi=function(t){var n=Xe(t),e=6*qe,r=n>0,i=Be(n)>Re;function o(t,e){return Xe(t)*Xe(e)>n}function u(t,e,r){var i=[1,0,0],o=Nr(Tr(t),Tr(e)),u=kr(o,o),a=o[0],c=u-a*a;if(!c)return!r&&t;var f=n*u/c,s=-n*a/c,l=Nr(i,o),h=Ar(i,f);Sr(h,Ar(o,s));var d=l,p=kr(h,d),v=kr(d,d),g=p*p-v*(kr(h,h)-1);if(!(g<0)){var y=Je(g),_=Ar(d,(-p-y)/v);if(Sr(_,h),_=Er(_),!r)return _;var m,x=t[0],b=e[0],w=t[1],M=e[1];b<x&&(m=x,x=b,b=m);var E=b-x,T=Be(E-ze)<Re;if(!T&&M<w&&(m=w,w=M,M=m),T||E<Re?T?w+M>0^_[1]<(Be(_[0]-x)<Re?w:M):w<=_[1]&&_[1]<=M:E>ze^(x<=_[0]&&_[0]<=b)){var k=Ar(d,(-p+y)/v);return Sr(k,h),[_,Er(k)]}}}function a(n,e){var i=r?t:ze-t,o=0;return n<-i?o|=1:n>i&&(o|=2),e<-i?o|=4:e>i&&(o|=8),o}return Xi(o,function(t){var n,e,c,f,s;return{lineStart:function(){f=c=!1,s=1},point:function(l,h){var d,p=[l,h],v=o(l,h),g=r?v?0:a(l,h):v?a(l+(l<0?ze:-ze),h):0;if(!n&&(f=c=v)&&t.lineStart(),v!==c&&(!(d=u(n,p))||Ui(n,d)||Ui(p,d))&&(p[0]+=Re,p[1]+=Re,v=o(p[0],p[1])),v!==c)s=0,v?(t.lineStart(),d=u(p,n),t.point(d[0],d[1])):(d=u(n,p),t.point(d[0],d[1]),t.lineEnd()),n=d;else if(i&&n&&r^v){var y;g&e||!(y=u(p,n,!0))||(s=0,r?(t.lineStart(),t.point(y[0][0],y[0][1]),t.point(y[1][0],y[1][1]),t.lineEnd()):(t.point(y[1][0],y[1][1]),t.lineEnd(),t.lineStart(),t.point(y[0][0],y[0][1])))}!v||n&&Ui(n,p)||t.point(p[0],p[1]),n=p,c=v,e=g},lineEnd:function(){c&&t.lineEnd(),n=null},clean:function(){return s|(f&&c)<<1}}},function(n,r,i,o){Ri(o,t,e,i,n,r)},r?[0,-t]:[-ze,t-ze])},Qi=function(t,n,e,r,i,o){var u,a=t[0],c=t[1],f=0,s=1,l=n[0]-a,h=n[1]-c;if(u=e-a,l||!(u>0)){if(u/=l,l<0){if(u<f)return;u<s&&(s=u)}else if(l>0){if(u>s)return;u>f&&(f=u)}if(u=i-a,l||!(u<0)){if(u/=l,l<0){if(u>s)return;u>f&&(f=u)}else if(l>0){if(u<f)return;u<s&&(s=u)}if(u=r-c,h||!(u>0)){if(u/=h,h<0){if(u<f)return;u<s&&(s=u)}else if(h>0){if(u>s)return;u>f&&(f=u)}if(u=o-c,h||!(u<0)){if(u/=h,h<0){if(u>s)return;u>f&&(f=u)}else if(h>0){if(u<f)return;u<s&&(s=u)}return f>0&&(t[0]=a+f*l,t[1]=c+f*h),s<1&&(n[0]=a+s*l,n[1]=c+s*h),!0}}}}},Ki=1e9,Ji=-Ki;function to(t,n,e,r){function i(i,o){return t<=i&&i<=e&&n<=o&&o<=r}function o(i,o,a,f){var s=0,l=0;if(null==i||(s=u(i,a))!==(l=u(o,a))||c(i,o)<0^a>0)do{f.point(0===s||3===s?t:e,s>1?r:n)}while((s=(s+a+4)%4)!==l);else f.point(o[0],o[1])}function u(r,i){return Be(r[0]-t)<Re?i>0?0:3:Be(r[0]-e)<Re?i>0?2:1:Be(r[1]-n)<Re?i>0?1:0:i>0?3:2}function a(t,n){return c(t.x,n.x)}function c(t,n){var e=u(t,1),r=u(n,1);return e!==r?e-r:0===e?n[1]-t[1]:1===e?t[0]-n[0]:2===e?t[1]-n[1]:n[0]-t[0]}return function(u){var c,f,s,l,h,d,p,v,g,y,_,m=u,x=Vi(),b={point:w,lineStart:function(){b.point=M,f&&f.push(s=[]);y=!0,g=!1,p=v=NaN},lineEnd:function(){c&&(M(l,h),d&&g&&x.rejoin(),c.push(x.result()));b.point=w,g&&m.lineEnd()},polygonStart:function(){m=x,c=[],f=[],_=!0},polygonEnd:function(){var n=function(){for(var n=0,e=0,i=f.length;e<i;++e)for(var o,u,a=f[e],c=1,s=a.length,l=a[0],h=l[0],d=l[1];c<s;++c)o=h,u=d,l=a[c],h=l[0],d=l[1],u<=r?d>r&&(h-o)*(r-u)>(d-u)*(t-o)&&++n:d<=r&&(h-o)*(r-u)<(d-u)*(t-o)&&--n;return n}(),e=_&&n,i=(c=z(c)).length;(e||i)&&(u.polygonStart(),e&&(u.lineStart(),o(null,null,1,u),u.lineEnd()),i&&qi(c,a,n,o,u),u.polygonEnd());m=u,c=f=s=null}};function w(t,n){i(t,n)&&m.point(t,n)}function M(o,u){var a=i(o,u);if(f&&s.push([o,u]),y)l=o,h=u,d=a,y=!1,a&&(m.lineStart(),m.point(o,u));else if(a&&g)m.point(o,u);else{var c=[p=Math.max(Ji,Math.min(Ki,p)),v=Math.max(Ji,Math.min(Ki,v))],x=[o=Math.max(Ji,Math.min(Ki,o)),u=Math.max(Ji,Math.min(Ki,u))];Qi(c,x,t,n,e,r)?(g||(m.lineStart(),m.point(c[0],c[1])),m.point(x[0],x[1]),a||m.lineEnd(),_=!1):a&&(m.lineStart(),m.point(o,u),_=!1)}p=o,v=u,g=a}return b}}var no,eo,ro,io=function(){var t,n,e,r=0,i=0,o=960,u=500;return e={stream:function(e){return t&&n===e?t:t=to(r,i,o,u)(n=e)},extent:function(a){return arguments.length?(r=+a[0][0],i=+a[0][1],o=+a[1][0],u=+a[1][1],t=n=null,e):[[r,i],[o,u]]}}},oo=je(),uo={sphere:ir,point:ir,lineStart:function(){uo.point=co,uo.lineEnd=ao},lineEnd:ir,polygonStart:ir,polygonEnd:ir};function ao(){uo.point=uo.lineEnd=ir}function co(t,n){no=t*=qe,eo=Qe(n*=qe),ro=Xe(n),uo.point=fo}function fo(t,n){t*=qe;var e=Qe(n*=qe),r=Xe(n),i=Be(t-no),o=Xe(i),u=r*Qe(i),a=ro*e-eo*r*o,c=eo*e+ro*r*o;oo.add(He(Je(u*u+a*a),c)),no=t,eo=e,ro=r}var so=function(t){return oo.reset(),vr(t,uo),+oo},lo=[null,null],ho={type:"LineString",coordinates:lo},po=function(t,n){return lo[0]=t,lo[1]=n,so(ho)},vo={Feature:function(t,n){return yo(t.geometry,n)},FeatureCollection:function(t,n){for(var e=t.features,r=-1,i=e.length;++r<i;)if(yo(e[r].geometry,n))return!0;return!1}},go={Sphere:function(){return!0},Point:function(t,n){return _o(t.coordinates,n)},MultiPoint:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(_o(e[r],n))return!0;return!1},LineString:function(t,n){return mo(t.coordinates,n)},MultiLineString:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(mo(e[r],n))return!0;return!1},Polygon:function(t,n){return xo(t.coordinates,n)},MultiPolygon:function(t,n){for(var e=t.coordinates,r=-1,i=e.length;++r<i;)if(xo(e[r],n))return!0;return!1},GeometryCollection:function(t,n){for(var e=t.geometries,r=-1,i=e.length;++r<i;)if(yo(e[r],n))return!0;return!1}};function yo(t,n){return!(!t||!go.hasOwnProperty(t.type))&&go[t.type](t,n)}function _o(t,n){return 0===po(t,n)}function mo(t,n){var e=po(t[0],t[1]);return po(t[0],n)+po(n,t[1])<=e+Re}function xo(t,n){return!!Hi(t.map(bo),wo(n))}function bo(t){return(t=t.map(wo)).pop(),t}function wo(t){return[t[0]*qe,t[1]*qe]}var Mo=function(t,n){return(t&&vo.hasOwnProperty(t.type)?vo[t.type]:yo)(t,n)};function Eo(t,n,e){var r=w(t,n-Re,e).concat(n);return function(t){return r.map(function(n){return[t,n]})}}function To(t,n,e){var r=w(t,n-Re,e).concat(n);return function(t){return r.map(function(n){return[n,t]})}}function ko(){var t,n,e,r,i,o,u,a,c,f,s,l,h=10,d=h,p=90,v=360,g=2.5;function y(){return{type:"MultiLineString",coordinates:_()}}function _(){return w(We(r/p)*p,e,p).map(s).concat(w(We(a/v)*v,u,v).map(l)).concat(w(We(n/h)*h,t,h).filter(function(t){return Be(t%p)>Re}).map(c)).concat(w(We(o/d)*d,i,d).filter(function(t){return Be(t%v)>Re}).map(f))}return y.lines=function(){return _().map(function(t){return{type:"LineString",coordinates:t}})},y.outline=function(){return{type:"Polygon",coordinates:[s(r).concat(l(u).slice(1),s(e).reverse().slice(1),l(a).reverse().slice(1))]}},y.extent=function(t){return arguments.length?y.extentMajor(t).extentMinor(t):y.extentMinor()},y.extentMajor=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],a=+t[0][1],u=+t[1][1],r>e&&(t=r,r=e,e=t),a>u&&(t=a,a=u,u=t),y.precision(g)):[[r,a],[e,u]]},y.extentMinor=function(e){return arguments.length?(n=+e[0][0],t=+e[1][0],o=+e[0][1],i=+e[1][1],n>t&&(e=n,n=t,t=e),o>i&&(e=o,o=i,i=e),y.precision(g)):[[n,o],[t,i]]},y.step=function(t){return arguments.length?y.stepMajor(t).stepMinor(t):y.stepMinor()},y.stepMajor=function(t){return arguments.length?(p=+t[0],v=+t[1],y):[p,v]},y.stepMinor=function(t){return arguments.length?(h=+t[0],d=+t[1],y):[h,d]},y.precision=function(h){return arguments.length?(g=+h,c=Eo(o,i,90),f=To(n,t,g),s=Eo(a,u,90),l=To(r,e,g),y):g},y.extentMajor([[-180,-90+Re],[180,90-Re]]).extentMinor([[-180,-80-Re],[180,80+Re]])}function No(){return ko()()}var So,Ao,Oo,Co,jo=function(t,n){var e=t[0]*qe,r=t[1]*qe,i=n[0]*qe,o=n[1]*qe,u=Xe(r),a=Qe(r),c=Xe(o),f=Qe(o),s=u*Xe(e),l=u*Qe(e),h=c*Xe(i),d=c*Qe(i),p=2*er(Je(rr(o-r)+u*c*rr(i-e))),v=Qe(p),g=p?function(t){var n=Qe(t*=p)/v,e=Qe(p-t)/v,r=e*s+n*h,i=e*l+n*d,o=e*a+n*f;return[He(i,r)*Fe,He(o,Je(r*r+i*i))*Fe]}:function(){return[e*Fe,r*Fe]};return g.distance=p,g},Io=function(t){return t},Po=je(),Lo=je(),Ro={point:ir,lineStart:ir,lineEnd:ir,polygonStart:function(){Ro.lineStart=zo,Ro.lineEnd=Uo},polygonEnd:function(){Ro.lineStart=Ro.lineEnd=Ro.point=ir,Po.add(Be(Lo)),Lo.reset()},result:function(){var t=Po/2;return Po.reset(),t}};function zo(){Ro.point=Do}function Do(t,n){Ro.point=Vo,So=Oo=t,Ao=Co=n}function Vo(t,n){Lo.add(Co*t-Oo*n),Oo=t,Co=n}function Uo(){Vo(So,Ao)}var Fo=Ro,qo=1/0,Bo=qo,Yo=-qo,Ho=Yo;var Xo,Wo,Go,$o,Zo={point:function(t,n){t<qo&&(qo=t);t>Yo&&(Yo=t);n<Bo&&(Bo=n);n>Ho&&(Ho=n)},lineStart:ir,lineEnd:ir,polygonStart:ir,polygonEnd:ir,result:function(){var t=[[qo,Bo],[Yo,Ho]];return Yo=Ho=-(Bo=qo=1/0),t}},Qo=0,Ko=0,Jo=0,tu=0,nu=0,eu=0,ru=0,iu=0,ou=0,uu={point:au,lineStart:cu,lineEnd:lu,polygonStart:function(){uu.lineStart=hu,uu.lineEnd=du},polygonEnd:function(){uu.point=au,uu.lineStart=cu,uu.lineEnd=lu},result:function(){var t=ou?[ru/ou,iu/ou]:eu?[tu/eu,nu/eu]:Jo?[Qo/Jo,Ko/Jo]:[NaN,NaN];return Qo=Ko=Jo=tu=nu=eu=ru=iu=ou=0,t}};function au(t,n){Qo+=t,Ko+=n,++Jo}function cu(){uu.point=fu}function fu(t,n){uu.point=su,au(Go=t,$o=n)}function su(t,n){var e=t-Go,r=n-$o,i=Je(e*e+r*r);tu+=i*(Go+t)/2,nu+=i*($o+n)/2,eu+=i,au(Go=t,$o=n)}function lu(){uu.point=au}function hu(){uu.point=pu}function du(){vu(Xo,Wo)}function pu(t,n){uu.point=vu,au(Xo=Go=t,Wo=$o=n)}function vu(t,n){var e=t-Go,r=n-$o,i=Je(e*e+r*r);tu+=i*(Go+t)/2,nu+=i*($o+n)/2,eu+=i,ru+=(i=$o*t-Go*n)*(Go+t),iu+=i*($o+n),ou+=3*i,au(Go=t,$o=n)}var gu=uu;function yu(t){this._context=t}yu.prototype={_radius:4.5,pointRadius:function(t){return this._radius=t,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._context.moveTo(t,n),this._point=1;break;case 1:this._context.lineTo(t,n);break;default:this._context.moveTo(t+this._radius,n),this._context.arc(t,n,this._radius,0,Ue)}},result:ir};var _u,mu,xu,bu,wu,Mu=je(),Eu={point:ir,lineStart:function(){Eu.point=Tu},lineEnd:function(){_u&&ku(mu,xu),Eu.point=ir},polygonStart:function(){_u=!0},polygonEnd:function(){_u=null},result:function(){var t=+Mu;return Mu.reset(),t}};function Tu(t,n){Eu.point=ku,mu=bu=t,xu=wu=n}function ku(t,n){bu-=t,wu-=n,Mu.add(Je(bu*bu+wu*wu)),bu=t,wu=n}var Nu=Eu;function Su(){this._string=[]}function Au(t){return"m0,"+t+"a"+t+","+t+" 0 1,1 0,"+-2*t+"a"+t+","+t+" 0 1,1 0,"+2*t+"z"}Su.prototype={_radius:4.5,_circle:Au(4.5),pointRadius:function(t){return(t=+t)!==this._radius&&(this._radius=t,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(t,n){switch(this._point){case 0:this._string.push("M",t,",",n),this._point=1;break;case 1:this._string.push("L",t,",",n);break;default:null==this._circle&&(this._circle=Au(this._radius)),this._string.push("M",t,",",n,this._circle)}},result:function(){if(this._string.length){var t=this._string.join("");return this._string=[],t}return null}};var Ou=function(t,n){var e,r,i=4.5;function o(t){return t&&("function"==typeof i&&r.pointRadius(+i.apply(this,arguments)),vr(t,e(r))),r.result()}return o.area=function(t){return vr(t,e(Fo)),Fo.result()},o.measure=function(t){return vr(t,e(Nu)),Nu.result()},o.bounds=function(t){return vr(t,e(Zo)),Zo.result()},o.centroid=function(t){return vr(t,e(gu)),gu.result()},o.projection=function(n){return arguments.length?(e=null==n?(t=null,Io):(t=n).stream,o):t},o.context=function(t){return arguments.length?(r=null==t?(n=null,new Su):new yu(n=t),"function"!=typeof i&&r.pointRadius(i),o):n},o.pointRadius=function(t){return arguments.length?(i="function"==typeof t?t:(r.pointRadius(+t),+t),o):i},o.projection(t).context(n)},Cu=function(t){return{stream:ju(t)}};function ju(t){return function(n){var e=new Iu;for(var r in t)e[r]=t[r];return e.stream=n,e}}function Iu(){}function Pu(t,n,e){var r=t.clipExtent&&t.clipExtent();return t.scale(150).translate([0,0]),null!=r&&t.clipExtent(null),vr(e,t.stream(Zo)),n(Zo.result()),null!=r&&t.clipExtent(r),t}function Lu(t,n,e){return Pu(t,function(e){var r=n[1][0]-n[0][0],i=n[1][1]-n[0][1],o=Math.min(r/(e[1][0]-e[0][0]),i/(e[1][1]-e[0][1])),u=+n[0][0]+(r-o*(e[1][0]+e[0][0]))/2,a=+n[0][1]+(i-o*(e[1][1]+e[0][1]))/2;t.scale(150*o).translate([u,a])},e)}function Ru(t,n,e){return Lu(t,[[0,0],n],e)}function zu(t,n,e){return Pu(t,function(e){var r=+n,i=r/(e[1][0]-e[0][0]),o=(r-i*(e[1][0]+e[0][0]))/2,u=-i*e[0][1];t.scale(150*i).translate([o,u])},e)}function Du(t,n,e){return Pu(t,function(e){var r=+n,i=r/(e[1][1]-e[0][1]),o=-i*e[0][0],u=(r-i*(e[1][1]+e[0][1]))/2;t.scale(150*i).translate([o,u])},e)}Iu.prototype={constructor:Iu,point:function(t,n){this.stream.point(t,n)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};var Vu=16,Uu=Xe(30*qe),Fu=function(t,n){return+n?function(t,n){function e(r,i,o,u,a,c,f,s,l,h,d,p,v,g){var y=f-r,_=s-i,m=y*y+_*_;if(m>4*n&&v--){var x=u+h,b=a+d,w=c+p,M=Je(x*x+b*b+w*w),E=er(w/=M),T=Be(Be(w)-1)<Re||Be(o-l)<Re?(o+l)/2:He(b,x),k=t(T,E),N=k[0],S=k[1],A=N-r,O=S-i,C=_*A-y*O;(C*C/m>n||Be((y*A+_*O)/m-.5)>.3||u*h+a*d+c*p<Uu)&&(e(r,i,o,u,a,c,N,S,T,x/=M,b/=M,w,v,g),g.point(N,S),e(N,S,T,x,b,w,f,s,l,h,d,p,v,g))}}return function(n){var r,i,o,u,a,c,f,s,l,h,d,p,v={point:g,lineStart:y,lineEnd:m,polygonStart:function(){n.polygonStart(),v.lineStart=x},polygonEnd:function(){n.polygonEnd(),v.lineStart=y}};function g(e,r){e=t(e,r),n.point(e[0],e[1])}function y(){s=NaN,v.point=_,n.lineStart()}function _(r,i){var o=Tr([r,i]),u=t(r,i);e(s,l,f,h,d,p,s=u[0],l=u[1],f=r,h=o[0],d=o[1],p=o[2],Vu,n),n.point(s,l)}function m(){v.point=g,n.lineEnd()}function x(){y(),v.point=b,v.lineEnd=w}function b(t,n){_(r=t,n),i=s,o=l,u=h,a=d,c=p,v.point=_}function w(){e(s,l,f,h,d,p,i,o,r,u,a,c,Vu,n),v.lineEnd=m,m()}return v}}(t,n):function(t){return ju({point:function(n,e){n=t(n,e),this.stream.point(n[0],n[1])}})}(t)};var qu=ju({point:function(t,n){this.stream.point(t*qe,n*qe)}});function Bu(t){return Yu(function(){return t})()}function Yu(t){var n,e,r,i,o,u,a,c,f,s,l=150,h=480,d=250,p=0,v=0,g=0,y=0,_=0,m=null,x=$i,b=null,w=Io,M=.5,E=Fu(N,M);function T(t){return[(t=o(t[0]*qe,t[1]*qe))[0]*l+e,r-t[1]*l]}function k(t){return(t=o.invert((t[0]-e)/l,(r-t[1])/l))&&[t[0]*Fe,t[1]*Fe]}function N(t,i){return[(t=n(t,i))[0]*l+e,r-t[1]*l]}function S(){o=Ai(i=Ci(g,y,_),n);var t=n(p,v);return e=h-t[0]*l,r=d+t[1]*l,A()}function A(){return f=s=null,T}return T.stream=function(t){return f&&s===t?f:f=qu(function(t){return ju({point:function(n,e){var r=t(n,e);return this.stream.point(r[0],r[1])}})}(i)(x(E(w(s=t)))))},T.preclip=function(t){return arguments.length?(x=t,m=void 0,A()):x},T.postclip=function(t){return arguments.length?(w=t,b=u=a=c=null,A()):w},T.clipAngle=function(t){return arguments.length?(x=+t?Zi(m=t*qe):(m=null,$i),A()):m*Fe},T.clipExtent=function(t){return arguments.length?(w=null==t?(b=u=a=c=null,Io):to(b=+t[0][0],u=+t[0][1],a=+t[1][0],c=+t[1][1]),A()):null==b?null:[[b,u],[a,c]]},T.scale=function(t){return arguments.length?(l=+t,S()):l},T.translate=function(t){return arguments.length?(h=+t[0],d=+t[1],S()):[h,d]},T.center=function(t){return arguments.length?(p=t[0]%360*qe,v=t[1]%360*qe,S()):[p*Fe,v*Fe]},T.rotate=function(t){return arguments.length?(g=t[0]%360*qe,y=t[1]%360*qe,_=t.length>2?t[2]%360*qe:0,S()):[g*Fe,y*Fe,_*Fe]},T.precision=function(t){return arguments.length?(E=Fu(N,M=t*t),A()):Je(M)},T.fitExtent=function(t,n){return Lu(T,t,n)},T.fitSize=function(t,n){return Ru(T,t,n)},T.fitWidth=function(t,n){return zu(T,t,n)},T.fitHeight=function(t,n){return Du(T,t,n)},function(){return n=t.apply(this,arguments),T.invert=n.invert&&k,S()}}function Hu(t){var n=0,e=ze/3,r=Yu(t),i=r(n,e);return i.parallels=function(t){return arguments.length?r(n=t[0]*qe,e=t[1]*qe):[n*Fe,e*Fe]},i}function Xu(t,n){var e=Qe(t),r=(e+Qe(n))/2;if(Be(r)<Re)return function(t){var n=Xe(t);function e(t,e){return[t*n,Qe(e)/n]}return e.invert=function(t,e){return[t/n,er(e*n)]},e}(t);var i=1+e*(2*r-e),o=Je(i)/r;function u(t,n){var e=Je(i-2*r*Qe(n))/r;return[e*Qe(t*=r),o-e*Xe(t)]}return u.invert=function(t,n){var e=o-n;return[He(t,Be(e))/r*Ke(e),er((i-(t*t+e*e)*r*r)/(2*r))]},u}var Wu=function(){return Hu(Xu).scale(155.424).center([0,33.6442])},Gu=function(){return Wu().parallels([29.5,45.5]).scale(1070).translate([480,250]).rotate([96,0]).center([-.6,38.7])};var $u=function(){var t,n,e,r,i,o,u=Gu(),a=Wu().rotate([154,0]).center([-2,58.5]).parallels([55,65]),c=Wu().rotate([157,0]).center([-3,19.9]).parallels([8,18]),f={point:function(t,n){o=[t,n]}};function s(t){var n=t[0],u=t[1];return o=null,e.point(n,u),o||(r.point(n,u),o)||(i.point(n,u),o)}function l(){return t=n=null,s}return s.invert=function(t){var n=u.scale(),e=u.translate(),r=(t[0]-e[0])/n,i=(t[1]-e[1])/n;return(i>=.12&&i<.234&&r>=-.425&&r<-.214?a:i>=.166&&i<.234&&r>=-.214&&r<-.115?c:u).invert(t)},s.stream=function(e){return t&&n===e?t:(r=[u.stream(n=e),a.stream(e),c.stream(e)],i=r.length,t={point:function(t,n){for(var e=-1;++e<i;)r[e].point(t,n)},sphere:function(){for(var t=-1;++t<i;)r[t].sphere()},lineStart:function(){for(var t=-1;++t<i;)r[t].lineStart()},lineEnd:function(){for(var t=-1;++t<i;)r[t].lineEnd()},polygonStart:function(){for(var t=-1;++t<i;)r[t].polygonStart()},polygonEnd:function(){for(var t=-1;++t<i;)r[t].polygonEnd()}});var r,i},s.precision=function(t){return arguments.length?(u.precision(t),a.precision(t),c.precision(t),l()):u.precision()},s.scale=function(t){return arguments.length?(u.scale(t),a.scale(.35*t),c.scale(t),s.translate(u.translate())):u.scale()},s.translate=function(t){if(!arguments.length)return u.translate();var n=u.scale(),o=+t[0],s=+t[1];return e=u.translate(t).clipExtent([[o-.455*n,s-.238*n],[o+.455*n,s+.238*n]]).stream(f),r=a.translate([o-.307*n,s+.201*n]).clipExtent([[o-.425*n+Re,s+.12*n+Re],[o-.214*n-Re,s+.234*n-Re]]).stream(f),i=c.translate([o-.205*n,s+.212*n]).clipExtent([[o-.214*n+Re,s+.166*n+Re],[o-.115*n-Re,s+.234*n-Re]]).stream(f),l()},s.fitExtent=function(t,n){return Lu(s,t,n)},s.fitSize=function(t,n){return Ru(s,t,n)},s.fitWidth=function(t,n){return zu(s,t,n)},s.fitHeight=function(t,n){return Du(s,t,n)},s.scale(1070)};function Zu(t){return function(n,e){var r=Xe(n),i=Xe(e),o=t(r*i);return[o*i*Qe(n),o*Qe(e)]}}function Qu(t){return function(n,e){var r=Je(n*n+e*e),i=t(r),o=Qe(i),u=Xe(i);return[He(n*o,r*u),er(r&&e*o/r)]}}var Ku=Zu(function(t){return Je(2/(1+t))});Ku.invert=Qu(function(t){return 2*er(t/2)});var Ju=function(){return Bu(Ku).scale(124.75).clipAngle(179.999)},ta=Zu(function(t){return(t=nr(t))&&t/Qe(t)});ta.invert=Qu(function(t){return t});var na=function(){return Bu(ta).scale(79.4188).clipAngle(179.999)};function ea(t,n){return[t,$e(tr((De+n)/2))]}ea.invert=function(t,n){return[t,2*Ye(Ge(n))-De]};var ra=function(){return ia(ea).scale(961/Ue)};function ia(t){var n,e,r,i=Bu(t),o=i.center,u=i.scale,a=i.translate,c=i.clipExtent,f=null;function s(){var o=ze*u(),a=i(Li(i.rotate()).invert([0,0]));return c(null==f?[[a[0]-o,a[1]-o],[a[0]+o,a[1]+o]]:t===ea?[[Math.max(a[0]-o,f),n],[Math.min(a[0]+o,e),r]]:[[f,Math.max(a[1]-o,n)],[e,Math.min(a[1]+o,r)]])}return i.scale=function(t){return arguments.length?(u(t),s()):u()},i.translate=function(t){return arguments.length?(a(t),s()):a()},i.center=function(t){return arguments.length?(o(t),s()):o()},i.clipExtent=function(t){return arguments.length?(null==t?f=n=e=r=null:(f=+t[0][0],n=+t[0][1],e=+t[1][0],r=+t[1][1]),s()):null==f?null:[[f,n],[e,r]]},s()}function oa(t){return tr((De+t)/2)}function ua(t,n){var e=Xe(t),r=t===n?Qe(t):$e(e/Xe(n))/$e(oa(n)/oa(t)),i=e*Ze(oa(t),r)/r;if(!r)return ea;function o(t,n){i>0?n<-De+Re&&(n=-De+Re):n>De-Re&&(n=De-Re);var e=i/Ze(oa(n),r);return[e*Qe(r*t),i-e*Xe(r*t)]}return o.invert=function(t,n){var e=i-n,o=Ke(r)*Je(t*t+e*e);return[He(t,Be(e))/r*Ke(e),2*Ye(Ze(i/o,1/r))-De]},o}var aa=function(){return Hu(ua).scale(109.5).parallels([30,30])};function ca(t,n){return[t,n]}ca.invert=ca;var fa=function(){return Bu(ca).scale(152.63)};function sa(t,n){var e=Xe(t),r=t===n?Qe(t):(e-Xe(n))/(n-t),i=e/r+t;if(Be(r)<Re)return ca;function o(t,n){var e=i-n,o=r*t;return[e*Qe(o),i-e*Xe(o)]}return o.invert=function(t,n){var e=i-n;return[He(t,Be(e))/r*Ke(e),i-Ke(r)*Je(t*t+e*e)]},o}var la=function(){return Hu(sa).scale(131.154).center([0,13.9389])};function ha(t,n){var e=Xe(n),r=Xe(t)*e;return[e*Qe(t)/r,Qe(n)/r]}ha.invert=Qu(Ye);var da=function(){return Bu(ha).scale(144.049).clipAngle(60)};function pa(t,n,e,r){return 1===t&&1===n&&0===e&&0===r?Io:ju({point:function(i,o){this.stream.point(i*t+e,o*n+r)}})}var va=function(){var t,n,e,r,i,o,u=1,a=0,c=0,f=1,s=1,l=Io,h=null,d=Io;function p(){return r=i=null,o}return o={stream:function(t){return r&&i===t?r:r=l(d(i=t))},postclip:function(r){return arguments.length?(d=r,h=t=n=e=null,p()):d},clipExtent:function(r){return arguments.length?(d=null==r?(h=t=n=e=null,Io):to(h=+r[0][0],t=+r[0][1],n=+r[1][0],e=+r[1][1]),p()):null==h?null:[[h,t],[n,e]]},scale:function(t){return arguments.length?(l=pa((u=+t)*f,u*s,a,c),p()):u},translate:function(t){return arguments.length?(l=pa(u*f,u*s,a=+t[0],c=+t[1]),p()):[a,c]},reflectX:function(t){return arguments.length?(l=pa(u*(f=t?-1:1),u*s,a,c),p()):f<0},reflectY:function(t){return arguments.length?(l=pa(u*f,u*(s=t?-1:1),a,c),p()):s<0},fitExtent:function(t,n){return Lu(o,t,n)},fitSize:function(t,n){return Ru(o,t,n)},fitWidth:function(t,n){return zu(o,t,n)},fitHeight:function(t,n){return Du(o,t,n)}}};function ga(t,n){var e=n*n,r=e*e;return[t*(.8707-.131979*e+r*(r*(.003971*e-.001529*r)-.013791)),n*(1.007226+e*(.015085+r*(.028874*e-.044475-.005916*r)))]}ga.invert=function(t,n){var e,r=n,i=25;do{var o=r*r,u=o*o;r-=e=(r*(1.007226+o*(.015085+u*(.028874*o-.044475-.005916*u)))-n)/(1.007226+o*(.045255+u*(.259866*o-.311325-.005916*11*u)))}while(Be(e)>Re&&--i>0);return[t/(.8707+(o=r*r)*(o*(o*o*o*(.003971-.001529*o)-.013791)-.131979)),r]};var ya=function(){return Bu(ga).scale(175.295)};function _a(t,n){return[Xe(n)*Qe(t),Qe(n)]}_a.invert=Qu(er);var ma=function(){return Bu(_a).scale(249.5).clipAngle(90+Re)};function xa(t,n){var e=Xe(n),r=1+Xe(t)*e;return[e*Qe(t)/r,Qe(n)/r]}xa.invert=Qu(function(t){return 2*Ye(t)});var ba=function(){return Bu(xa).scale(250).clipAngle(142)};function wa(t,n){return[$e(tr((De+n)/2)),-t]}wa.invert=function(t,n){return[-n,2*Ye(Ge(t))-De]};var Ma=function(){var t=ia(wa),n=t.center,e=t.rotate;return t.center=function(t){return arguments.length?n([-t[1],t[0]]):[(t=n())[1],-t[0]]},t.rotate=function(t){return arguments.length?e([t[0],t[1],t.length>2?t[2]+90:90]):[(t=e())[0],t[1],t[2]-90]},e([0,0,90]).scale(159.155)};function Ea(t,n){return t.parent===n.parent?1:2}function Ta(t,n){return t+n.x}function ka(t,n){return Math.max(t,n.y)}var Na=function(){var t=Ea,n=1,e=1,r=!1;function i(i){var o,u=0;i.eachAfter(function(n){var e=n.children;e?(n.x=function(t){return t.reduce(Ta,0)/t.length}(e),n.y=function(t){return 1+t.reduce(ka,0)}(e)):(n.x=o?u+=t(n,o):0,n.y=0,o=n)});var a=function(t){for(var n;n=t.children;)t=n[0];return t}(i),c=function(t){for(var n;n=t.children;)t=n[n.length-1];return t}(i),f=a.x-t(a,c)/2,s=c.x+t(c,a)/2;return i.eachAfter(r?function(t){t.x=(t.x-i.x)*n,t.y=(i.y-t.y)*e}:function(t){t.x=(t.x-f)/(s-f)*n,t.y=(1-(i.y?t.y/i.y:1))*e})}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i};function Sa(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function Aa(t,n){var e,r,i,o,u,a=new Ia(t),c=+t.value&&(a.value=t.value),f=[a];for(null==n&&(n=Oa);e=f.pop();)if(c&&(e.value=+e.data.value),(i=n(e.data))&&(u=i.length))for(e.children=new Array(u),o=u-1;o>=0;--o)f.push(r=e.children[o]=new Ia(i[o])),r.parent=e,r.depth=e.depth+1;return a.eachBefore(ja)}function Oa(t){return t.children}function Ca(t){t.data=t.data.data}function ja(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function Ia(t){this.data=t,this.depth=this.height=0,this.parent=null}Ia.prototype=Aa.prototype={constructor:Ia,count:function(){return this.eachAfter(Sa)},each:function(t){var n,e,r,i,o=this,u=[o];do{for(n=u.reverse(),u=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)u.push(e[r])}while(u.length);return this},eachAfter:function(t){for(var n,e,r,i=this,o=[i],u=[];i=o.pop();)if(u.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=u.pop();)t(i);return this},eachBefore:function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},sum:function(t){return this.eachAfter(function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e})},sort:function(t){return this.eachBefore(function(n){n.children&&n.children.sort(t)})},path:function(t){for(var n=this,e=function(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ancestors:function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},descendants:function(){var t=[];return this.each(function(n){t.push(n)}),t},leaves:function(){var t=[];return this.eachBefore(function(n){n.children||t.push(n)}),t},links:function(){var t=this,n=[];return t.each(function(e){e!==t&&n.push({source:e.parent,target:e})}),n},copy:function(){return Aa(this).eachBefore(Ca)}};var Pa=Array.prototype.slice;var La=function(t){for(var n,e,r=0,i=(t=function(t){for(var n,e,r=t.length;r;)e=Math.random()*r--|0,n=t[r],t[r]=t[e],t[e]=n;return t}(Pa.call(t))).length,o=[];r<i;)n=t[r],e&&Da(e,n)?++r:(e=Ua(o=Ra(o,n)),r=0);return e};function Ra(t,n){var e,r;if(Va(n,t))return[n];for(e=0;e<t.length;++e)if(za(n,t[e])&&Va(Fa(t[e],n),t))return[t[e],n];for(e=0;e<t.length-1;++e)for(r=e+1;r<t.length;++r)if(za(Fa(t[e],t[r]),n)&&za(Fa(t[e],n),t[r])&&za(Fa(t[r],n),t[e])&&Va(qa(t[e],t[r],n),t))return[t[e],t[r],n];throw new Error}function za(t,n){var e=t.r-n.r,r=n.x-t.x,i=n.y-t.y;return e<0||e*e<r*r+i*i}function Da(t,n){var e=t.r-n.r+1e-6,r=n.x-t.x,i=n.y-t.y;return e>0&&e*e>r*r+i*i}function Va(t,n){for(var e=0;e<n.length;++e)if(!Da(t,n[e]))return!1;return!0}function Ua(t){switch(t.length){case 1:return{x:(n=t[0]).x,y:n.y,r:n.r};case 2:return Fa(t[0],t[1]);case 3:return qa(t[0],t[1],t[2])}var n}function Fa(t,n){var e=t.x,r=t.y,i=t.r,o=n.x,u=n.y,a=n.r,c=o-e,f=u-r,s=a-i,l=Math.sqrt(c*c+f*f);return{x:(e+o+c/l*s)/2,y:(r+u+f/l*s)/2,r:(l+i+a)/2}}function qa(t,n,e){var r=t.x,i=t.y,o=t.r,u=n.x,a=n.y,c=n.r,f=e.x,s=e.y,l=e.r,h=r-u,d=r-f,p=i-a,v=i-s,g=c-o,y=l-o,_=r*r+i*i-o*o,m=_-u*u-a*a+c*c,x=_-f*f-s*s+l*l,b=d*p-h*v,w=(p*x-v*m)/(2*b)-r,M=(v*g-p*y)/b,E=(d*m-h*x)/(2*b)-i,T=(h*y-d*g)/b,k=M*M+T*T-1,N=2*(o+w*M+E*T),S=w*w+E*E-o*o,A=-(k?(N+Math.sqrt(N*N-4*k*S))/(2*k):S/N);return{x:r+w+M*A,y:i+E+T*A,r:A}}function Ba(t,n,e){var r=t.x,i=t.y,o=n.r+e.r,u=t.r+e.r,a=n.x-r,c=n.y-i,f=a*a+c*c;if(f){var s=.5+((u*=u)-(o*=o))/(2*f),l=Math.sqrt(Math.max(0,2*o*(u+f)-(u-=f)*u-o*o))/(2*f);e.x=r+s*a+l*c,e.y=i+s*c-l*a}else e.x=r+u,e.y=i}function Ya(t,n){var e=n.x-t.x,r=n.y-t.y,i=t.r+n.r;return i*i-1e-6>e*e+r*r}function Ha(t){var n=t._,e=t.next._,r=n.r+e.r,i=(n.x*e.r+e.x*n.r)/r,o=(n.y*e.r+e.y*n.r)/r;return i*i+o*o}function Xa(t){this._=t,this.next=null,this.previous=null}function Wa(t){if(!(i=t.length))return 0;var n,e,r,i,o,u,a,c,f,s,l;if((n=t[0]).x=0,n.y=0,!(i>1))return n.r;if(e=t[1],n.x=-e.r,e.x=n.r,e.y=0,!(i>2))return n.r+e.r;Ba(e,n,r=t[2]),n=new Xa(n),e=new Xa(e),r=new Xa(r),n.next=r.previous=e,e.next=n.previous=r,r.next=e.previous=n;t:for(a=3;a<i;++a){Ba(n._,e._,r=t[a]),r=new Xa(r),c=e.next,f=n.previous,s=e._.r,l=n._.r;do{if(s<=l){if(Ya(c._,r._)){e=c,n.next=e,e.previous=n,--a;continue t}s+=c._.r,c=c.next}else{if(Ya(f._,r._)){(n=f).next=e,e.previous=n,--a;continue t}l+=f._.r,f=f.previous}}while(c!==f.next);for(r.previous=n,r.next=e,n.next=e.previous=e=r,o=Ha(n);(r=r.next)!==e;)(u=Ha(r))<o&&(n=r,o=u);e=n.next}for(n=[e._],r=e;(r=r.next)!==e;)n.push(r._);for(r=La(n),a=0;a<i;++a)(n=t[a]).x-=r.x,n.y-=r.y;return r.r}var Ga=function(t){return Wa(t),t};function $a(t){return null==t?null:Za(t)}function Za(t){if("function"!=typeof t)throw new Error;return t}function Qa(){return 0}var Ka=function(t){return function(){return t}};function Ja(t){return Math.sqrt(t.value)}var tc=function(){var t=null,n=1,e=1,r=Qa;function i(i){return i.x=n/2,i.y=e/2,t?i.eachBefore(nc(t)).eachAfter(ec(r,.5)).eachBefore(rc(1)):i.eachBefore(nc(Ja)).eachAfter(ec(Qa,1)).eachAfter(ec(r,i.r/Math.min(n,e))).eachBefore(rc(Math.min(n,e)/(2*i.r))),i}return i.radius=function(n){return arguments.length?(t=$a(n),i):t},i.size=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.padding=function(t){return arguments.length?(r="function"==typeof t?t:Ka(+t),i):r},i};function nc(t){return function(n){n.children||(n.r=Math.max(0,+t(n)||0))}}function ec(t,n){return function(e){if(r=e.children){var r,i,o,u=r.length,a=t(e)*n||0;if(a)for(i=0;i<u;++i)r[i].r+=a;if(o=Wa(r),a)for(i=0;i<u;++i)r[i].r-=a;e.r=o+a}}}function rc(t){return function(n){var e=n.parent;n.r*=t,e&&(n.x=e.x+t*n.x,n.y=e.y+t*n.y)}}var ic=function(t){t.x0=Math.round(t.x0),t.y0=Math.round(t.y0),t.x1=Math.round(t.x1),t.y1=Math.round(t.y1)},oc=function(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,f=t.value&&(r-n)/t.value;++a<c;)(o=u[a]).y0=e,o.y1=i,o.x0=n,o.x1=n+=o.value*f},uc=function(){var t=1,n=1,e=0,r=!1;function i(i){var o=i.height+1;return i.x0=i.y0=e,i.x1=t,i.y1=n/o,i.eachBefore(function(t,n){return function(r){r.children&&oc(r,r.x0,t*(r.depth+1)/n,r.x1,t*(r.depth+2)/n);var i=r.x0,o=r.y0,u=r.x1-e,a=r.y1-e;u<i&&(i=u=(i+u)/2),a<o&&(o=a=(o+a)/2),r.x0=i,r.y0=o,r.x1=u,r.y1=a}}(n,o)),r&&i.eachBefore(ic),i}return i.round=function(t){return arguments.length?(r=!!t,i):r},i.size=function(e){return arguments.length?(t=+e[0],n=+e[1],i):[t,n]},i.padding=function(t){return arguments.length?(e=+t,i):e},i},ac="$",cc={depth:-1},fc={};function sc(t){return t.id}function lc(t){return t.parentId}var hc=function(){var t=sc,n=lc;function e(e){var r,i,o,u,a,c,f,s=e.length,l=new Array(s),h={};for(i=0;i<s;++i)r=e[i],a=l[i]=new Ia(r),null!=(c=t(r,i,e))&&(c+="")&&(h[f=ac+(a.id=c)]=f in h?fc:a);for(i=0;i<s;++i)if(a=l[i],null!=(c=n(e[i],i,e))&&(c+="")){if(!(u=h[ac+c]))throw new Error("missing: "+c);if(u===fc)throw new Error("ambiguous: "+c);u.children?u.children.push(a):u.children=[a],a.parent=u}else{if(o)throw new Error("multiple roots");o=a}if(!o)throw new Error("no root");if(o.parent=cc,o.eachBefore(function(t){t.depth=t.parent.depth+1,--s}).eachBefore(ja),o.parent=null,s>0)throw new Error("cycle");return o}return e.id=function(n){return arguments.length?(t=Za(n),e):t},e.parentId=function(t){return arguments.length?(n=Za(t),e):n},e};function dc(t,n){return t.parent===n.parent?1:2}function pc(t){var n=t.children;return n?n[0]:t.t}function vc(t){var n=t.children;return n?n[n.length-1]:t.t}function gc(t,n,e){var r=e/(n.i-t.i);n.c-=r,n.s+=e,t.c+=r,n.z+=e,n.m+=e}function yc(t,n,e){return t.a.parent===n.parent?t.a:e}function _c(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}_c.prototype=Object.create(Ia.prototype);var mc=function(){var t=dc,n=1,e=1,r=null;function i(i){var c=function(t){for(var n,e,r,i,o,u=new _c(t,0),a=[u];n=a.pop();)if(r=n._.children)for(n.children=new Array(o=r.length),i=o-1;i>=0;--i)a.push(e=n.children[i]=new _c(r[i],i)),e.parent=n;return(u.parent=new _c(null,0)).children=[u],u}(i);if(c.eachAfter(o),c.parent.m=-c.z,c.eachBefore(u),r)i.eachBefore(a);else{var f=i,s=i,l=i;i.eachBefore(function(t){t.x<f.x&&(f=t),t.x>s.x&&(s=t),t.depth>l.depth&&(l=t)});var h=f===s?1:t(f,s)/2,d=h-f.x,p=n/(s.x+h+d),v=e/(l.depth||1);i.eachBefore(function(t){t.x=(t.x+d)*p,t.y=t.depth*v})}return i}function o(n){var e=n.children,r=n.parent.children,i=n.i?r[n.i-1]:null;if(e){!function(t){for(var n,e=0,r=0,i=t.children,o=i.length;--o>=0;)(n=i[o]).z+=e,n.m+=e,e+=n.s+(r+=n.c)}(n);var o=(e[0].z+e[e.length-1].z)/2;i?(n.z=i.z+t(n._,i._),n.m=n.z-o):n.z=o}else i&&(n.z=i.z+t(n._,i._));n.parent.A=function(n,e,r){if(e){for(var i,o=n,u=n,a=e,c=o.parent.children[0],f=o.m,s=u.m,l=a.m,h=c.m;a=vc(a),o=pc(o),a&&o;)c=pc(c),(u=vc(u)).a=n,(i=a.z+l-o.z-f+t(a._,o._))>0&&(gc(yc(a,n,r),n,i),f+=i,s+=i),l+=a.m,f+=o.m,h+=c.m,s+=u.m;a&&!vc(u)&&(u.t=a,u.m+=l-s),o&&!pc(c)&&(c.t=o,c.m+=f-h,r=n)}return r}(n,i,n.parent.A||r[0])}function u(t){t._.x=t.z+t.parent.m,t.m+=t.parent.m}function a(t){t.x*=n,t.y=t.depth*e}return i.separation=function(n){return arguments.length?(t=n,i):t},i.size=function(t){return arguments.length?(r=!1,n=+t[0],e=+t[1],i):r?null:[n,e]},i.nodeSize=function(t){return arguments.length?(r=!0,n=+t[0],e=+t[1],i):r?[n,e]:null},i},xc=function(t,n,e,r,i){for(var o,u=t.children,a=-1,c=u.length,f=t.value&&(i-e)/t.value;++a<c;)(o=u[a]).x0=n,o.x1=r,o.y0=e,o.y1=e+=o.value*f},bc=(1+Math.sqrt(5))/2;function wc(t,n,e,r,i,o){for(var u,a,c,f,s,l,h,d,p,v,g,y=[],_=n.children,m=0,x=0,b=_.length,w=n.value;m<b;){c=i-e,f=o-r;do{s=_[x++].value}while(!s&&x<b);for(l=h=s,g=s*s*(v=Math.max(f/c,c/f)/(w*t)),p=Math.max(h/g,g/l);x<b;++x){if(s+=a=_[x].value,a<l&&(l=a),a>h&&(h=a),g=s*s*v,(d=Math.max(h/g,g/l))>p){s-=a;break}p=d}y.push(u={value:s,dice:c<f,children:_.slice(m,x)}),u.dice?oc(u,e,r,i,w?r+=f*s/w:o):xc(u,e,r,w?e+=c*s/w:i,o),w-=s,m=x}return y}var Mc=function t(n){function e(t,e,r,i,o){wc(n,t,e,r,i,o)}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(bc),Ec=function(){var t=Mc,n=!1,e=1,r=1,i=[0],o=Qa,u=Qa,a=Qa,c=Qa,f=Qa;function s(t){return t.x0=t.y0=0,t.x1=e,t.y1=r,t.eachBefore(l),i=[0],n&&t.eachBefore(ic),t}function l(n){var e=i[n.depth],r=n.x0+e,s=n.y0+e,l=n.x1-e,h=n.y1-e;l<r&&(r=l=(r+l)/2),h<s&&(s=h=(s+h)/2),n.x0=r,n.y0=s,n.x1=l,n.y1=h,n.children&&(e=i[n.depth+1]=o(n)/2,r+=f(n)-e,s+=u(n)-e,(l-=a(n)-e)<r&&(r=l=(r+l)/2),(h-=c(n)-e)<s&&(s=h=(s+h)/2),t(n,r,s,l,h))}return s.round=function(t){return arguments.length?(n=!!t,s):n},s.size=function(t){return arguments.length?(e=+t[0],r=+t[1],s):[e,r]},s.tile=function(n){return arguments.length?(t=Za(n),s):t},s.padding=function(t){return arguments.length?s.paddingInner(t).paddingOuter(t):s.paddingInner()},s.paddingInner=function(t){return arguments.length?(o="function"==typeof t?t:Ka(+t),s):o},s.paddingOuter=function(t){return arguments.length?s.paddingTop(t).paddingRight(t).paddingBottom(t).paddingLeft(t):s.paddingTop()},s.paddingTop=function(t){return arguments.length?(u="function"==typeof t?t:Ka(+t),s):u},s.paddingRight=function(t){return arguments.length?(a="function"==typeof t?t:Ka(+t),s):a},s.paddingBottom=function(t){return arguments.length?(c="function"==typeof t?t:Ka(+t),s):c},s.paddingLeft=function(t){return arguments.length?(f="function"==typeof t?t:Ka(+t),s):f},s},Tc=function(t,n,e,r,i){var o,u,a=t.children,c=a.length,f=new Array(c+1);for(f[0]=u=o=0;o<c;++o)f[o+1]=u+=a[o].value;!function t(n,e,r,i,o,u,c){if(n>=e-1){var s=a[n];return s.x0=i,s.y0=o,s.x1=u,void(s.y1=c)}var l=f[n],h=r/2+l,d=n+1,p=e-1;for(;d<p;){var v=d+p>>>1;f[v]<h?d=v+1:p=v}h-f[d-1]<f[d]-h&&n+1<d&&--d;var g=f[d]-l,y=r-g;if(u-i>c-o){var _=(i*y+u*g)/r;t(n,d,g,i,o,_,c),t(d,e,y,_,o,u,c)}else{var m=(o*y+c*g)/r;t(n,d,g,i,o,u,m),t(d,e,y,i,m,u,c)}}(0,c,t.value,n,e,r,i)},kc=function(t,n,e,r,i){(1&t.depth?xc:oc)(t,n,e,r,i)},Nc=function t(n){function e(t,e,r,i,o){if((u=t._squarify)&&u.ratio===n)for(var u,a,c,f,s,l=-1,h=u.length,d=t.value;++l<h;){for(c=(a=u[l]).children,f=a.value=0,s=c.length;f<s;++f)a.value+=c[f].value;a.dice?oc(a,e,r,i,r+=(o-r)*a.value/d):xc(a,e,r,e+=(i-e)*a.value/d,o),d-=a.value}else t._squarify=u=wc(n,t,e,r,i,o),u.ratio=n}return e.ratio=function(n){return t((n=+n)>1?n:1)},e}(bc),Sc=function(t){for(var n,e=-1,r=t.length,i=t[r-1],o=0;++e<r;)n=i,i=t[e],o+=n[1]*i[0]-n[0]*i[1];return o/2},Ac=function(t){for(var n,e,r=-1,i=t.length,o=0,u=0,a=t[i-1],c=0;++r<i;)n=a,a=t[r],c+=e=n[0]*a[1]-a[0]*n[1],o+=(n[0]+a[0])*e,u+=(n[1]+a[1])*e;return[o/(c*=3),u/c]},Oc=function(t,n,e){return(n[0]-t[0])*(e[1]-t[1])-(n[1]-t[1])*(e[0]-t[0])};function Cc(t,n){return t[0]-n[0]||t[1]-n[1]}function jc(t){for(var n=t.length,e=[0,1],r=2,i=2;i<n;++i){for(;r>1&&Oc(t[e[r-2]],t[e[r-1]],t[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}var Ic=function(t){if((e=t.length)<3)return null;var n,e,r=new Array(e),i=new Array(e);for(n=0;n<e;++n)r[n]=[+t[n][0],+t[n][1],n];for(r.sort(Cc),n=0;n<e;++n)i[n]=[r[n][0],-r[n][1]];var o=jc(r),u=jc(i),a=u[0]===o[0],c=u[u.length-1]===o[o.length-1],f=[];for(n=o.length-1;n>=0;--n)f.push(t[r[o[n]][2]]);for(n=+a;n<u.length-c;++n)f.push(t[r[u[n]][2]]);return f},Pc=function(t,n){for(var e,r,i=t.length,o=t[i-1],u=n[0],a=n[1],c=o[0],f=o[1],s=!1,l=0;l<i;++l)e=(o=t[l])[0],(r=o[1])>a!=f>a&&u<(c-e)*(a-r)/(f-r)+e&&(s=!s),c=e,f=r;return s},Lc=function(t){for(var n,e,r=-1,i=t.length,o=t[i-1],u=o[0],a=o[1],c=0;++r<i;)n=u,e=a,n-=u=(o=t[r])[0],e-=a=o[1],c+=Math.sqrt(n*n+e*e);return c},Rc=[].slice,zc={};function Dc(t){this._size=t,this._call=this._error=null,this._tasks=[],this._data=[],this._waiting=this._active=this._ended=this._start=0}function Vc(t){if(!t._start)try{!function(t){for(;t._start=t._waiting&&t._active<t._size;){var n=t._ended+t._active,e=t._tasks[n],r=e.length-1,i=e[r];e[r]=Uc(t,n),--t._waiting,++t._active,e=i.apply(null,e),t._tasks[n]&&(t._tasks[n]=e||zc)}}(t)}catch(n){if(t._tasks[t._ended+t._active-1])Fc(t,n);else if(!t._data)throw n}}function Uc(t,n){return function(e,r){t._tasks[n]&&(--t._active,++t._ended,t._tasks[n]=null,null==t._error&&(null!=e?Fc(t,e):(t._data[n]=r,t._waiting?Vc(t):qc(t))))}}function Fc(t,n){var e,r=t._tasks.length;for(t._error=n,t._data=void 0,t._waiting=NaN;--r>=0;)if((e=t._tasks[r])&&(t._tasks[r]=null,e.abort))try{e.abort()}catch(n){}t._active=NaN,qc(t)}function qc(t){if(!t._active&&t._call){var n=t._data;t._data=void 0,t._call(t._error,n)}}function Bc(t){if(null==t)t=1/0;else if(!((t=+t)>=1))throw new Error("invalid concurrency");return new Dc(t)}Dc.prototype=Bc.prototype={constructor:Dc,defer:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("defer after await");if(null!=this._error)return this;var n=Rc.call(arguments,1);return n.push(t),++this._waiting,this._tasks.push(n),Vc(this),this},abort:function(){return null==this._error&&Fc(this,new Error("abort")),this},await:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=function(n,e){t.apply(null,[n].concat(e))},qc(this),this},awaitAll:function(t){if("function"!=typeof t)throw new Error("invalid callback");if(this._call)throw new Error("multiple await");return this._call=t,qc(this),this}};var Yc=function(){return Math.random()},Hc=function t(n){function e(t,e){return t=null==t?0:+t,e=null==e?1:+e,1===arguments.length?(e=t,t=0):e-=t,function(){return n()*e+t}}return e.source=t,e}(Yc),Xc=function t(n){function e(t,e){var r,i;return t=null==t?0:+t,e=null==e?1:+e,function(){var o;if(null!=r)o=r,r=null;else do{r=2*n()-1,o=2*n()-1,i=r*r+o*o}while(!i||i>1);return t+e*o*Math.sqrt(-2*Math.log(i)/i)}}return e.source=t,e}(Yc),Wc=function t(n){function e(){var t=Xc.source(n).apply(this,arguments);return function(){return Math.exp(t())}}return e.source=t,e}(Yc),Gc=function t(n){function e(t){return function(){for(var e=0,r=0;r<t;++r)e+=n();return e}}return e.source=t,e}(Yc),$c=function t(n){function e(t){var e=Gc.source(n)(t);return function(){return e()/t}}return e.source=t,e}(Yc),Zc=function t(n){function e(t){return function(){return-Math.log(1-n())/t}}return e.source=t,e}(Yc),Qc=function(t,n){var e,r,i,o,u=Object(at.a)("beforesend","progress","load","error"),a=fn(),c=new XMLHttpRequest,f=null,s=null,l=0;function h(t){var n,r=c.status;if(!r&&function(t){var n=t.responseType;return n&&"text"!==n?t.response:t.responseText}(c)||r>=200&&r<300||304===r){if(i)try{n=i.call(e,c)}catch(t){return void u.call("error",e,t)}else n=c;u.call("load",e,n)}else u.call("error",e,t)}if("undefined"==typeof XDomainRequest||"withCredentials"in c||!/^(http(s)?:)?\/\//.test(t)||(c=new XDomainRequest),"onload"in c?c.onload=c.onerror=c.ontimeout=h:c.onreadystatechange=function(t){c.readyState>3&&h(t)},c.onprogress=function(t){u.call("progress",e,t)},e={header:function(t,n){return t=(t+"").toLowerCase(),arguments.length<2?a.get(t):(null==n?a.remove(t):a.set(t,n+""),e)},mimeType:function(t){return arguments.length?(r=null==t?null:t+"",e):r},responseType:function(t){return arguments.length?(o=t,e):o},timeout:function(t){return arguments.length?(l=+t,e):l},user:function(t){return arguments.length<1?f:(f=null==t?null:t+"",e)},password:function(t){return arguments.length<1?s:(s=null==t?null:t+"",e)},response:function(t){return i=t,e},get:function(t,n){return e.send("GET",t,n)},post:function(t,n){return e.send("POST",t,n)},send:function(n,i,h){return c.open(n,t,!0,f,s),null==r||a.has("accept")||a.set("accept",r+",*/*"),c.setRequestHeader&&a.each(function(t,n){c.setRequestHeader(n,t)}),null!=r&&c.overrideMimeType&&c.overrideMimeType(r),null!=o&&(c.responseType=o),l>0&&(c.timeout=l),null==h&&"function"==typeof i&&(h=i,i=null),null!=h&&1===h.length&&(h=function(t){return function(n,e){t(null==n?e:null)}}(h)),null!=h&&e.on("error",h).on("load",function(t){h(null,t)}),u.call("beforesend",e,c),c.send(null==i?null:i),e},abort:function(){return c.abort(),e},on:function(){var t=u.on.apply(u,arguments);return t===u?e:t}},null!=n){if("function"!=typeof n)throw new Error("invalid callback: "+n);return e.get(n)}return e};var Kc=function(t,n){return function(e,r){var i=Qc(e).mimeType(t).response(n);if(null!=r){if("function"!=typeof r)throw new Error("invalid callback: "+r);return i.get(r)}return i}},Jc=Kc("text/html",function(t){return document.createRange().createContextualFragment(t.responseText)}),tf=Kc("application/json",function(t){return JSON.parse(t.responseText)}),nf=Kc("text/plain",function(t){return t.responseText}),ef=Kc("application/xml",function(t){var n=t.responseXML;if(!n)throw new Error("parse error");return n}),rf=function(t,n){return function(e,r,i){arguments.length<3&&(i=r,r=null);var o=Qc(e).mimeType(t);return o.row=function(t){return arguments.length?o.response(of(n,r=t)):r},o.row(r),i?o.get(i):o}};function of(t,n){return function(e){return t(e.responseText,n)}}var uf=rf("text/csv",Cn),af=rf("text/tab-separated-values",Rn),cf=Array.prototype,ff=cf.map,sf=cf.slice,lf={name:"implicit"};function hf(t){var n=fn(),e=[],r=lf;function i(i){var o=i+"",u=n.get(o);if(!u){if(r!==lf)return r;n.set(o,u=e.push(i))}return t[(u-1)%t.length]}return t=null==t?[]:sf.call(t),i.domain=function(t){if(!arguments.length)return e.slice();e=[],n=fn();for(var r,o,u=-1,a=t.length;++u<a;)n.has(o=(r=t[u])+"")||n.set(o,e.push(r));return i},i.range=function(n){return arguments.length?(t=sf.call(n),i):t.slice()},i.unknown=function(t){return arguments.length?(r=t,i):r},i.copy=function(){return hf().domain(e).range(t).unknown(r)},i}function df(){var t,n,e=hf().unknown(void 0),r=e.domain,i=e.range,o=[0,1],u=!1,a=0,c=0,f=.5;function s(){var e=r().length,s=o[1]<o[0],l=o[s-0],h=o[1-s];t=(h-l)/Math.max(1,e-a+2*c),u&&(t=Math.floor(t)),l+=(h-l-t*(e-a))*f,n=t*(1-a),u&&(l=Math.round(l),n=Math.round(n));var d=w(e).map(function(n){return l+t*n});return i(s?d.reverse():d)}return delete e.unknown,e.domain=function(t){return arguments.length?(r(t),s()):r()},e.range=function(t){return arguments.length?(o=[+t[0],+t[1]],s()):o.slice()},e.rangeRound=function(t){return o=[+t[0],+t[1]],u=!0,s()},e.bandwidth=function(){return n},e.step=function(){return t},e.round=function(t){return arguments.length?(u=!!t,s()):u},e.padding=function(t){return arguments.length?(a=c=Math.max(0,Math.min(1,t)),s()):a},e.paddingInner=function(t){return arguments.length?(a=Math.max(0,Math.min(1,t)),s()):a},e.paddingOuter=function(t){return arguments.length?(c=Math.max(0,Math.min(1,t)),s()):c},e.align=function(t){return arguments.length?(f=Math.max(0,Math.min(1,t)),s()):f},e.copy=function(){return df().domain(r()).range(o).round(u).paddingInner(a).paddingOuter(c).align(f)},s()}function pf(){return function t(n){var e=n.copy;return n.padding=n.paddingOuter,delete n.paddingInner,delete n.paddingOuter,n.copy=function(){return t(e())},n}(df().paddingInner(1))}var vf=function(t){return function(){return t}},gf=function(t){return+t},yf=[0,1];function _f(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:vf(n)}function mf(t,n,e,r){var i=t[0],o=t[1],u=n[0],a=n[1];return o<i?(i=e(o,i),u=r(a,u)):(i=e(i,o),u=r(u,a)),function(t){return u(i(t))}}function xf(t,n,e,r){var i=Math.min(t.length,n.length)-1,o=new Array(i),u=new Array(i),a=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++a<i;)o[a]=e(t[a],t[a+1]),u[a]=r(n[a],n[a+1]);return function(n){var e=c(t,n,1,i)-1;return u[e](o[e](n))}}function bf(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function wf(t,n){var e,r,i,o=yf,u=yf,a=ft.a,c=!1;function f(){return e=Math.min(o.length,u.length)>2?xf:mf,r=i=null,s}function s(n){return(r||(r=e(o,u,c?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}(t):t,a)))(+n)}return s.invert=function(t){return(i||(i=e(u,o,_f,c?function(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}(n):n)))(+t)},s.domain=function(t){return arguments.length?(o=ff.call(t,gf),f()):o.slice()},s.range=function(t){return arguments.length?(u=sf.call(t),f()):u.slice()},s.rangeRound=function(t){return u=sf.call(t),a=ft.r,f()},s.clamp=function(t){return arguments.length?(c=!!t,f()):c},s.interpolate=function(t){return arguments.length?(a=t,f()):a},f()}var Mf=function(t,n,e){var r,i=t[0],o=t[t.length-1],u=S(i,o,null==n?10:n);switch((e=xe(null==e?",f":e)).type){case"s":var a=Math.max(Math.abs(i),Math.abs(o));return null!=e.precision||isNaN(r=Oe(u,a))||(e.precision=r),Ee(e,a);case"":case"e":case"g":case"p":case"r":null!=e.precision||isNaN(r=Ce(u,Math.max(Math.abs(i),Math.abs(o))))||(e.precision=r-("e"===e.type));break;case"f":case"%":null!=e.precision||isNaN(r=Ae(u))||(e.precision=r-2*("%"===e.type))}return Me(e)};function Ef(t){var n=t.domain;return t.ticks=function(t){var e=n();return k(e[0],e[e.length-1],null==t?10:t)},t.tickFormat=function(t,e){return Mf(n(),t,e)},t.nice=function(e){null==e&&(e=10);var r,i=n(),o=0,u=i.length-1,a=i[o],c=i[u];return c<a&&(r=a,a=c,c=r,r=o,o=u,u=r),(r=N(a,c,e))>0?r=N(a=Math.floor(a/r)*r,c=Math.ceil(c/r)*r,e):r<0&&(r=N(a=Math.ceil(a*r)/r,c=Math.floor(c*r)/r,e)),r>0?(i[o]=Math.floor(a/r)*r,i[u]=Math.ceil(c/r)*r,n(i)):r<0&&(i[o]=Math.ceil(a*r)/r,i[u]=Math.floor(c*r)/r,n(i)),t},t}function Tf(){var t=wf(_f,ft.m);return t.copy=function(){return bf(t,Tf())},Ef(t)}function kf(){var t=[0,1];function n(t){return+t}return n.invert=n,n.domain=n.range=function(e){return arguments.length?(t=ff.call(e,gf),n):t.slice()},n.copy=function(){return kf().domain(t)},Ef(n)}var Nf=function(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],u=t[i];return u<o&&(e=r,r=i,i=e,e=o,o=u,u=e),t[r]=n.floor(o),t[i]=n.ceil(u),t};function Sf(t,n){return(n=Math.log(n/t))?function(e){return Math.log(e/t)/n}:vf(n)}function Af(t,n){return t<0?function(e){return-Math.pow(-n,e)*Math.pow(-t,1-e)}:function(e){return Math.pow(n,e)*Math.pow(t,1-e)}}function Of(t){return isFinite(t)?+("1e"+t):t<0?0:t}function Cf(t){return 10===t?Of:t===Math.E?Math.exp:function(n){return Math.pow(t,n)}}function jf(t){return t===Math.E?Math.log:10===t&&Math.log10||2===t&&Math.log2||(t=Math.log(t),function(n){return Math.log(n)/t})}function If(t){return function(n){return-t(-n)}}function Pf(){var t=wf(Sf,Af).domain([1,10]),n=t.domain,e=10,r=jf(10),i=Cf(10);function o(){return r=jf(e),i=Cf(e),n()[0]<0&&(r=If(r),i=If(i)),t}return t.base=function(t){return arguments.length?(e=+t,o()):e},t.domain=function(t){return arguments.length?(n(t),o()):n()},t.ticks=function(t){var o,u=n(),a=u[0],c=u[u.length-1];(o=c<a)&&(h=a,a=c,c=h);var f,s,l,h=r(a),d=r(c),p=null==t?10:+t,v=[];if(!(e%1)&&d-h<p){if(h=Math.round(h)-1,d=Math.round(d)+1,a>0){for(;h<d;++h)for(s=1,f=i(h);s<e;++s)if(!((l=f*s)<a)){if(l>c)break;v.push(l)}}else for(;h<d;++h)for(s=e-1,f=i(h);s>=1;--s)if(!((l=f*s)<a)){if(l>c)break;v.push(l)}}else v=k(h,d,Math.min(d-h,p)).map(i);return o?v.reverse():v},t.tickFormat=function(n,o){if(null==o&&(o=10===e?".0e":","),"function"!=typeof o&&(o=Me(o)),n===1/0)return o;null==n&&(n=10);var u=Math.max(1,e*n/t.ticks().length);return function(t){var n=t/i(Math.round(r(t)));return n*e<e-.5&&(n*=e),n<=u?o(t):""}},t.nice=function(){return n(Nf(n(),{floor:function(t){return i(Math.floor(r(t)))},ceil:function(t){return i(Math.ceil(r(t)))}}))},t.copy=function(){return bf(t,Pf().base(e))},t}function Lf(t,n){return t<0?-Math.pow(-t,n):Math.pow(t,n)}function Rf(){var t=1,n=wf(function(n,e){return(e=Lf(e,t)-(n=Lf(n,t)))?function(r){return(Lf(r,t)-n)/e}:vf(e)},function(n,e){return e=Lf(e,t)-(n=Lf(n,t)),function(r){return Lf(n+e*r,1/t)}}),e=n.domain;return n.exponent=function(n){return arguments.length?(t=+n,e(e())):t},n.copy=function(){return bf(n,Rf().exponent(t))},Ef(n)}function zf(){return Rf().exponent(.5)}function Df(){var t=[],n=[],e=[];function i(){var r=0,i=Math.max(1,n.length);for(e=new Array(i-1);++r<i;)e[r-1]=C(t,r/i);return o}function o(t){if(!isNaN(t=+t))return n[c(e,t)]}return o.invertExtent=function(r){var i=n.indexOf(r);return i<0?[NaN,NaN]:[i>0?e[i-1]:t[0],i<e.length?e[i]:t[t.length-1]]},o.domain=function(n){if(!arguments.length)return t.slice();t=[];for(var e,o=0,u=n.length;o<u;++o)null==(e=n[o])||isNaN(e=+e)||t.push(e);return t.sort(r),i()},o.range=function(t){return arguments.length?(n=sf.call(t),i()):n.slice()},o.quantiles=function(){return e.slice()},o.copy=function(){return Df().domain(t).range(n)},o}function Vf(){var t=0,n=1,e=1,r=[.5],i=[0,1];function o(t){if(t<=t)return i[c(r,t,0,e)]}function u(){var i=-1;for(r=new Array(e);++i<e;)r[i]=((i+1)*n-(i-e)*t)/(e+1);return o}return o.domain=function(e){return arguments.length?(t=+e[0],n=+e[1],u()):[t,n]},o.range=function(t){return arguments.length?(e=(i=sf.call(t)).length-1,u()):i.slice()},o.invertExtent=function(o){var u=i.indexOf(o);return u<0?[NaN,NaN]:u<1?[t,r[0]]:u>=e?[r[e-1],n]:[r[u-1],r[u]]},o.copy=function(){return Vf().domain([t,n]).range(i)},Ef(o)}function Uf(){var t=[.5],n=[0,1],e=1;function r(r){if(r<=r)return n[c(t,r,0,e)]}return r.domain=function(i){return arguments.length?(t=sf.call(i),e=Math.min(t.length,n.length-1),r):t.slice()},r.range=function(i){return arguments.length?(n=sf.call(i),e=Math.min(t.length,n.length-1),r):n.slice()},r.invertExtent=function(e){var r=n.indexOf(e);return[t[r-1],t[r]]},r.copy=function(){return Uf().domain(t).range(n)},r}var Ff=new Date,qf=new Date;function Bf(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var u,a=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return a;do{a.push(u=new Date(+e)),n(e,o),t(e)}while(u<e&&e<r);return a},i.filter=function(e){return Bf(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)if(r<0)for(;++r<=0;)for(;n(t,-1),!e(t););else for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return Ff.setTime(+n),qf.setTime(+r),t(Ff),t(qf),Math.floor(e(Ff,qf))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}var Yf=Bf(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});Yf.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Bf(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):Yf:null};var Hf=Yf,Xf=Yf.range,Wf=6e4,Gf=6048e5,$f=Bf(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),Zf=$f,Qf=$f.range,Kf=Bf(function(t){t.setTime(Math.floor(t/Wf)*Wf)},function(t,n){t.setTime(+t+n*Wf)},function(t,n){return(n-t)/Wf},function(t){return t.getMinutes()}),Jf=Kf,ts=Kf.range,ns=Bf(function(t){var n=t.getTimezoneOffset()*Wf%36e5;n<0&&(n+=36e5),t.setTime(36e5*Math.floor((+t-n)/36e5)+n)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()}),es=ns,rs=ns.range,is=Bf(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Wf)/864e5},function(t){return t.getDate()-1}),os=is,us=is.range;function as(t){return Bf(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*Wf)/Gf})}var cs=as(0),fs=as(1),ss=as(2),ls=as(3),hs=as(4),ds=as(5),ps=as(6),vs=cs.range,gs=fs.range,ys=ss.range,_s=ls.range,ms=hs.range,xs=ds.range,bs=ps.range,ws=Bf(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()}),Ms=ws,Es=ws.range,Ts=Bf(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()});Ts.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Bf(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};var ks=Ts,Ns=Ts.range,Ss=Bf(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*Wf)},function(t,n){return(n-t)/Wf},function(t){return t.getUTCMinutes()}),As=Ss,Os=Ss.range,Cs=Bf(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()}),js=Cs,Is=Cs.range,Ps=Bf(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1}),Ls=Ps,Rs=Ps.range;function zs(t){return Bf(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/Gf})}var Ds=zs(0),Vs=zs(1),Us=zs(2),Fs=zs(3),qs=zs(4),Bs=zs(5),Ys=zs(6),Hs=Ds.range,Xs=Vs.range,Ws=Us.range,Gs=Fs.range,$s=qs.range,Zs=Bs.range,Qs=Ys.range,Ks=Bf(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),Js=Ks,tl=Ks.range,nl=Bf(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()});nl.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Bf(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var el=nl,rl=nl.range;function il(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function ol(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function ul(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function al(t){var n=t.dateTime,e=t.date,r=t.time,i=t.periods,o=t.days,u=t.shortDays,a=t.months,c=t.shortMonths,f=ml(i),s=xl(i),l=ml(o),h=xl(o),d=ml(u),p=xl(u),v=ml(a),g=xl(a),y=ml(c),_=xl(c),m={a:function(t){return u[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return c[t.getMonth()]},B:function(t){return a[t.getMonth()]},c:null,d:Ul,e:Ul,f:Hl,H:Fl,I:ql,j:Bl,L:Yl,m:Xl,M:Wl,p:function(t){return i[+(t.getHours()>=12)]},Q:bh,s:wh,S:Gl,u:$l,U:Zl,V:Ql,w:Kl,W:Jl,x:null,X:null,y:th,Y:nh,Z:eh,"%":xh},x={a:function(t){return u[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return c[t.getUTCMonth()]},B:function(t){return a[t.getUTCMonth()]},c:null,d:rh,e:rh,f:ch,H:ih,I:oh,j:uh,L:ah,m:fh,M:sh,p:function(t){return i[+(t.getUTCHours()>=12)]},Q:bh,s:wh,S:lh,u:hh,U:dh,V:ph,w:vh,W:gh,x:null,X:null,y:yh,Y:_h,Z:mh,"%":xh},b={a:function(t,n,e){var r=d.exec(n.slice(e));return r?(t.w=p[r[0].toLowerCase()],e+r[0].length):-1},A:function(t,n,e){var r=l.exec(n.slice(e));return r?(t.w=h[r[0].toLowerCase()],e+r[0].length):-1},b:function(t,n,e){var r=y.exec(n.slice(e));return r?(t.m=_[r[0].toLowerCase()],e+r[0].length):-1},B:function(t,n,e){var r=v.exec(n.slice(e));return r?(t.m=g[r[0].toLowerCase()],e+r[0].length):-1},c:function(t,e,r){return E(t,n,e,r)},d:Ol,e:Ol,f:Rl,H:jl,I:jl,j:Cl,L:Ll,m:Al,M:Il,p:function(t,n,e){var r=f.exec(n.slice(e));return r?(t.p=s[r[0].toLowerCase()],e+r[0].length):-1},Q:Dl,s:Vl,S:Pl,u:wl,U:Ml,V:El,w:bl,W:Tl,x:function(t,n,r){return E(t,e,n,r)},X:function(t,n,e){return E(t,r,n,e)},y:Nl,Y:kl,Z:Sl,"%":zl};function w(t,n){return function(e){var r,i,o,u=[],a=-1,c=0,f=t.length;for(e instanceof Date||(e=new Date(+e));++a<f;)37===t.charCodeAt(a)&&(u.push(t.slice(c,a)),null!=(i=dl[r=t.charAt(++a)])?r=t.charAt(++a):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),u.push(r),c=a+1);return u.push(t.slice(c,a)),u.join("")}}function M(t,n){return function(e){var r,i,o=ul(1900);if(E(o,t,e+="",0)!=e.length)return null;if("Q"in o)return new Date(o.Q);if("p"in o&&(o.H=o.H%12+12*o.p),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=ol(ul(o.y))).getUTCDay(),r=i>4||0===i?Vs.ceil(r):Vs(r),r=Ls.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=n(ul(o.y))).getDay(),r=i>4||0===i?fs.ceil(r):fs(r),r=os.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?ol(ul(o.y)).getUTCDay():n(ul(o.y)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,ol(o)):n(o)}}function E(t,n,e,r){for(var i,o,u=0,a=n.length,c=e.length;u<a;){if(r>=c)return-1;if(37===(i=n.charCodeAt(u++))){if(i=n.charAt(u++),!(o=b[i in dl?n.charAt(u++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}return m.x=w(e,m),m.X=w(r,m),m.c=w(n,m),x.x=w(e,x),x.X=w(r,x),x.c=w(n,x),{format:function(t){var n=w(t+="",m);return n.toString=function(){return t},n},parse:function(t){var n=M(t+="",il);return n.toString=function(){return t},n},utcFormat:function(t){var n=w(t+="",x);return n.toString=function(){return t},n},utcParse:function(t){var n=M(t,ol);return n.toString=function(){return t},n}}}var cl,fl,sl,ll,hl,dl={"-":"",_:" ",0:"0"},pl=/^\s*\d+/,vl=/^%/,gl=/[\\^$*+?|[\]().{}]/g;function yl(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function _l(t){return t.replace(gl,"\\$&")}function ml(t){return new RegExp("^(?:"+t.map(_l).join("|")+")","i")}function xl(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function bl(t,n,e){var r=pl.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function wl(t,n,e){var r=pl.exec(n.slice(e,e+1));return r?(t.u=+r[0],e+r[0].length):-1}function Ml(t,n,e){var r=pl.exec(n.slice(e,e+2));return r?(t.U=+r[0],e+r[0].length):-1}function El(t,n,e){var r=pl.exec(n.slice(e,e+2));return r?(t.V=+r[0],e+r[0].length):-1}function Tl(t,n,e){var r=pl.exec(n.slice(e,e+2));return r?(t.W=+r[0],e+r[0].length):-1}function kl(t,n,e){var r=pl.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Nl(t,n,e){var r=pl.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Sl(t,n,e){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Al(t,n,e){var r=pl.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Ol(t,n,e){var r=pl.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Cl(t,n,e){var r=pl.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function jl(t,n,e){var r=pl.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function Il(t,n,e){var r=pl.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function Pl(t,n,e){var r=pl.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function Ll(t,n,e){var r=pl.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function Rl(t,n,e){var r=pl.exec(n.slice(e,e+6));return r?(t.L=Math.floor(r[0]/1e3),e+r[0].length):-1}function zl(t,n,e){var r=vl.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function Dl(t,n,e){var r=pl.exec(n.slice(e));return r?(t.Q=+r[0],e+r[0].length):-1}function Vl(t,n,e){var r=pl.exec(n.slice(e));return r?(t.Q=1e3*+r[0],e+r[0].length):-1}function Ul(t,n){return yl(t.getDate(),n,2)}function Fl(t,n){return yl(t.getHours(),n,2)}function ql(t,n){return yl(t.getHours()%12||12,n,2)}function Bl(t,n){return yl(1+os.count(ks(t),t),n,3)}function Yl(t,n){return yl(t.getMilliseconds(),n,3)}function Hl(t,n){return Yl(t,n)+"000"}function Xl(t,n){return yl(t.getMonth()+1,n,2)}function Wl(t,n){return yl(t.getMinutes(),n,2)}function Gl(t,n){return yl(t.getSeconds(),n,2)}function $l(t){var n=t.getDay();return 0===n?7:n}function Zl(t,n){return yl(cs.count(ks(t),t),n,2)}function Ql(t,n){var e=t.getDay();return t=e>=4||0===e?hs(t):hs.ceil(t),yl(hs.count(ks(t),t)+(4===ks(t).getDay()),n,2)}function Kl(t){return t.getDay()}function Jl(t,n){return yl(fs.count(ks(t),t),n,2)}function th(t,n){return yl(t.getFullYear()%100,n,2)}function nh(t,n){return yl(t.getFullYear()%1e4,n,4)}function eh(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+yl(n/60|0,"0",2)+yl(n%60,"0",2)}function rh(t,n){return yl(t.getUTCDate(),n,2)}function ih(t,n){return yl(t.getUTCHours(),n,2)}function oh(t,n){return yl(t.getUTCHours()%12||12,n,2)}function uh(t,n){return yl(1+Ls.count(el(t),t),n,3)}function ah(t,n){return yl(t.getUTCMilliseconds(),n,3)}function ch(t,n){return ah(t,n)+"000"}function fh(t,n){return yl(t.getUTCMonth()+1,n,2)}function sh(t,n){return yl(t.getUTCMinutes(),n,2)}function lh(t,n){return yl(t.getUTCSeconds(),n,2)}function hh(t){var n=t.getUTCDay();return 0===n?7:n}function dh(t,n){return yl(Ds.count(el(t),t),n,2)}function ph(t,n){var e=t.getUTCDay();return t=e>=4||0===e?qs(t):qs.ceil(t),yl(qs.count(el(t),t)+(4===el(t).getUTCDay()),n,2)}function vh(t){return t.getUTCDay()}function gh(t,n){return yl(Vs.count(el(t),t),n,2)}function yh(t,n){return yl(t.getUTCFullYear()%100,n,2)}function _h(t,n){return yl(t.getUTCFullYear()%1e4,n,4)}function mh(){return"+0000"}function xh(){return"%"}function bh(t){return+t}function wh(t){return Math.floor(+t/1e3)}function Mh(t){return cl=al(t),fl=cl.format,sl=cl.parse,ll=cl.utcFormat,hl=cl.utcParse,cl}Mh({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});var Eh=Date.prototype.toISOString?function(t){return t.toISOString()}:ll("%Y-%m-%dT%H:%M:%S.%LZ");var Th=+new Date("2000-01-01T00:00:00.000Z")?function(t){var n=new Date(t);return isNaN(n)?null:n}:hl("%Y-%m-%dT%H:%M:%S.%LZ"),kh=1e3,Nh=60*kh,Sh=60*Nh,Ah=24*Sh,Oh=7*Ah,Ch=30*Ah,jh=365*Ah;function Ih(t){return new Date(t)}function Ph(t){return t instanceof Date?+t:+new Date(+t)}function Lh(t,n,e,r,o,u,a,c,f){var s=wf(_f,ft.m),l=s.invert,h=s.domain,d=f(".%L"),p=f(":%S"),v=f("%I:%M"),g=f("%I %p"),y=f("%a %d"),_=f("%b %d"),m=f("%B"),x=f("%Y"),b=[[a,1,kh],[a,5,5*kh],[a,15,15*kh],[a,30,30*kh],[u,1,Nh],[u,5,5*Nh],[u,15,15*Nh],[u,30,30*Nh],[o,1,Sh],[o,3,3*Sh],[o,6,6*Sh],[o,12,12*Sh],[r,1,Ah],[r,2,2*Ah],[e,1,Oh],[n,1,Ch],[n,3,3*Ch],[t,1,jh]];function w(i){return(a(i)<i?d:u(i)<i?p:o(i)<i?v:r(i)<i?g:n(i)<i?e(i)<i?y:_:t(i)<i?m:x)(i)}function M(n,e,r,o){if(null==n&&(n=10),"number"==typeof n){var u=Math.abs(r-e)/n,a=i(function(t){return t[2]}).right(b,u);a===b.length?(o=S(e/jh,r/jh,n),n=t):a?(o=(a=b[u/b[a-1][2]<b[a][2]/u?a-1:a])[1],n=a[0]):(o=Math.max(S(e,r,n),1),n=c)}return null==o?n:n.every(o)}return s.invert=function(t){return new Date(l(t))},s.domain=function(t){return arguments.length?h(ff.call(t,Ph)):h().map(Ih)},s.ticks=function(t,n){var e,r=h(),i=r[0],o=r[r.length-1],u=o<i;return u&&(e=i,i=o,o=e),e=(e=M(t,i,o,n))?e.range(i,o+1):[],u?e.reverse():e},s.tickFormat=function(t,n){return null==n?w:f(n)},s.nice=function(t,n){var e=h();return(t=M(t,e[0],e[e.length-1],n))?h(Nf(e,t)):s},s.copy=function(){return bf(s,Lh(t,n,e,r,o,u,a,c,f))},s}var Rh=function(){return Lh(ks,Ms,cs,os,es,Jf,Zf,Hf,fl).domain([new Date(2e3,0,1),new Date(2e3,0,2)])},zh=function(){return Lh(el,Js,Ds,Ls,js,As,Zf,Hf,ll).domain([Date.UTC(2e3,0,1),Date.UTC(2e3,0,2)])},Dh=function(t){return t.match(/.{6}/g).map(function(t){return"#"+t})},Vh=Dh("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Uh=Dh("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),Fh=Dh("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),qh=Dh("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),Bh=Object(ft.f)(Object(wn.b)(300,.5,0),Object(wn.b)(-240,.5,1)),Yh=Object(ft.f)(Object(wn.b)(-100,.75,.35),Object(wn.b)(80,1.5,.8)),Hh=Object(ft.f)(Object(wn.b)(260,.75,.35),Object(wn.b)(80,1.5,.8)),Xh=Object(wn.b)(),Wh=function(t){(t<0||t>1)&&(t-=Math.floor(t));var n=Math.abs(t-.5);return Xh.h=360*t-100,Xh.s=1.5-1.5*n,Xh.l=.8-.9*n,Xh+""};function Gh(t){var n=t.length;return function(e){return t[Math.max(0,Math.min(n-1,Math.floor(e*n)))]}}var $h=Gh(Dh("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),Zh=Gh(Dh("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Qh=Gh(Dh("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Kh=Gh(Dh("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921"));function Jh(t){var n=0,e=1,r=!1;function i(i){var o=(i-n)/(e-n);return t(r?Math.max(0,Math.min(1,o)):o)}return i.domain=function(t){return arguments.length?(n=+t[0],e=+t[1],i):[n,e]},i.clamp=function(t){return arguments.length?(r=!!t,i):r},i.interpolator=function(n){return arguments.length?(t=n,i):t},i.copy=function(){return Jh(t).domain([n,e]).clamp(r)},Ef(i)}var td=function(t){return function(){return t}},nd=Math.abs,ed=Math.atan2,rd=Math.cos,id=Math.max,od=Math.min,ud=Math.sin,ad=Math.sqrt,cd=1e-12,fd=Math.PI,sd=fd/2,ld=2*fd;function hd(t){return t>=1?sd:t<=-1?-sd:Math.asin(t)}function dd(t){return t.innerRadius}function pd(t){return t.outerRadius}function vd(t){return t.startAngle}function gd(t){return t.endAngle}function yd(t){return t&&t.padAngle}function _d(t,n,e,r,i,o,u){var a=t-e,c=n-r,f=(u?o:-o)/ad(a*a+c*c),s=f*c,l=-f*a,h=t+s,d=n+l,p=e+s,v=r+l,g=(h+p)/2,y=(d+v)/2,_=p-h,m=v-d,x=_*_+m*m,b=i-o,w=h*v-p*d,M=(m<0?-1:1)*ad(id(0,b*b*x-w*w)),E=(w*m-_*M)/x,T=(-w*_-m*M)/x,k=(w*m+_*M)/x,N=(-w*_+m*M)/x,S=E-g,A=T-y,O=k-g,C=N-y;return S*S+A*A>O*O+C*C&&(E=k,T=N),{cx:E,cy:T,x01:-s,y01:-l,x11:E*(i/b-1),y11:T*(i/b-1)}}var md=function(){var t=dd,n=pd,e=td(0),r=null,i=vd,o=gd,u=yd,a=null;function c(){var c,f,s,l=+t.apply(this,arguments),h=+n.apply(this,arguments),d=i.apply(this,arguments)-sd,p=o.apply(this,arguments)-sd,v=nd(p-d),g=p>d;if(a||(a=c=Jt()),h<l&&(f=h,h=l,l=f),h>cd)if(v>ld-cd)a.moveTo(h*rd(d),h*ud(d)),a.arc(0,0,h,d,p,!g),l>cd&&(a.moveTo(l*rd(p),l*ud(p)),a.arc(0,0,l,p,d,g));else{var y,_,m=d,x=p,b=d,w=p,M=v,E=v,T=u.apply(this,arguments)/2,k=T>cd&&(r?+r.apply(this,arguments):ad(l*l+h*h)),N=od(nd(h-l)/2,+e.apply(this,arguments)),S=N,A=N;if(k>cd){var O=hd(k/l*ud(T)),C=hd(k/h*ud(T));(M-=2*O)>cd?(b+=O*=g?1:-1,w-=O):(M=0,b=w=(d+p)/2),(E-=2*C)>cd?(m+=C*=g?1:-1,x-=C):(E=0,m=x=(d+p)/2)}var j=h*rd(m),I=h*ud(m),P=l*rd(w),L=l*ud(w);if(N>cd){var R=h*rd(x),z=h*ud(x),D=l*rd(b),V=l*ud(b);if(v<fd){var U=M>cd?function(t,n,e,r,i,o,u,a){var c=e-t,f=r-n,s=u-i,l=a-o,h=(s*(n-o)-l*(t-i))/(l*c-s*f);return[t+h*c,n+h*f]}(j,I,D,V,R,z,P,L):[P,L],F=j-U[0],q=I-U[1],B=R-U[0],Y=z-U[1],H=1/ud(((s=(F*B+q*Y)/(ad(F*F+q*q)*ad(B*B+Y*Y)))>1?0:s<-1?fd:Math.acos(s))/2),X=ad(U[0]*U[0]+U[1]*U[1]);S=od(N,(l-X)/(H-1)),A=od(N,(h-X)/(H+1))}}E>cd?A>cd?(y=_d(D,V,j,I,h,A,g),_=_d(R,z,P,L,h,A,g),a.moveTo(y.cx+y.x01,y.cy+y.y01),A<N?a.arc(y.cx,y.cy,A,ed(y.y01,y.x01),ed(_.y01,_.x01),!g):(a.arc(y.cx,y.cy,A,ed(y.y01,y.x01),ed(y.y11,y.x11),!g),a.arc(0,0,h,ed(y.cy+y.y11,y.cx+y.x11),ed(_.cy+_.y11,_.cx+_.x11),!g),a.arc(_.cx,_.cy,A,ed(_.y11,_.x11),ed(_.y01,_.x01),!g))):(a.moveTo(j,I),a.arc(0,0,h,m,x,!g)):a.moveTo(j,I),l>cd&&M>cd?S>cd?(y=_d(P,L,R,z,l,-S,g),_=_d(j,I,D,V,l,-S,g),a.lineTo(y.cx+y.x01,y.cy+y.y01),S<N?a.arc(y.cx,y.cy,S,ed(y.y01,y.x01),ed(_.y01,_.x01),!g):(a.arc(y.cx,y.cy,S,ed(y.y01,y.x01),ed(y.y11,y.x11),!g),a.arc(0,0,l,ed(y.cy+y.y11,y.cx+y.x11),ed(_.cy+_.y11,_.cx+_.x11),g),a.arc(_.cx,_.cy,S,ed(_.y11,_.x11),ed(_.y01,_.x01),!g))):a.arc(0,0,l,w,b,g):a.lineTo(P,L)}else a.moveTo(0,0);if(a.closePath(),c)return a=null,c+""||null}return c.centroid=function(){var e=(+t.apply(this,arguments)+ +n.apply(this,arguments))/2,r=(+i.apply(this,arguments)+ +o.apply(this,arguments))/2-fd/2;return[rd(r)*e,ud(r)*e]},c.innerRadius=function(n){return arguments.length?(t="function"==typeof n?n:td(+n),c):t},c.outerRadius=function(t){return arguments.length?(n="function"==typeof t?t:td(+t),c):n},c.cornerRadius=function(t){return arguments.length?(e="function"==typeof t?t:td(+t),c):e},c.padRadius=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:td(+t),c):r},c.startAngle=function(t){return arguments.length?(i="function"==typeof t?t:td(+t),c):i},c.endAngle=function(t){return arguments.length?(o="function"==typeof t?t:td(+t),c):o},c.padAngle=function(t){return arguments.length?(u="function"==typeof t?t:td(+t),c):u},c.context=function(t){return arguments.length?(a=null==t?null:t,c):a},c};function xd(t){this._context=t}xd.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var bd=function(t){return new xd(t)};function wd(t){return t[0]}function Md(t){return t[1]}var Ed=function(){var t=wd,n=Md,e=td(!0),r=null,i=bd,o=null;function u(u){var a,c,f,s=u.length,l=!1;for(null==r&&(o=i(f=Jt())),a=0;a<=s;++a)!(a<s&&e(c=u[a],a,u))===l&&((l=!l)?o.lineStart():o.lineEnd()),l&&o.point(+t(c,a,u),+n(c,a,u));if(f)return o=null,f+""||null}return u.x=function(n){return arguments.length?(t="function"==typeof n?n:td(+n),u):t},u.y=function(t){return arguments.length?(n="function"==typeof t?t:td(+t),u):n},u.defined=function(t){return arguments.length?(e="function"==typeof t?t:td(!!t),u):e},u.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),u):i},u.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),u):r},u},Td=function(){var t=wd,n=null,e=td(0),r=Md,i=td(!0),o=null,u=bd,a=null;function c(c){var f,s,l,h,d,p=c.length,v=!1,g=new Array(p),y=new Array(p);for(null==o&&(a=u(d=Jt())),f=0;f<=p;++f){if(!(f<p&&i(h=c[f],f,c))===v)if(v=!v)s=f,a.areaStart(),a.lineStart();else{for(a.lineEnd(),a.lineStart(),l=f-1;l>=s;--l)a.point(g[l],y[l]);a.lineEnd(),a.areaEnd()}v&&(g[f]=+t(h,f,c),y[f]=+e(h,f,c),a.point(n?+n(h,f,c):g[f],r?+r(h,f,c):y[f]))}if(d)return a=null,d+""||null}function f(){return Ed().defined(i).curve(u).context(o)}return c.x=function(e){return arguments.length?(t="function"==typeof e?e:td(+e),n=null,c):t},c.x0=function(n){return arguments.length?(t="function"==typeof n?n:td(+n),c):t},c.x1=function(t){return arguments.length?(n=null==t?null:"function"==typeof t?t:td(+t),c):n},c.y=function(t){return arguments.length?(e="function"==typeof t?t:td(+t),r=null,c):e},c.y0=function(t){return arguments.length?(e="function"==typeof t?t:td(+t),c):e},c.y1=function(t){return arguments.length?(r=null==t?null:"function"==typeof t?t:td(+t),c):r},c.lineX0=c.lineY0=function(){return f().x(t).y(e)},c.lineY1=function(){return f().x(t).y(r)},c.lineX1=function(){return f().x(n).y(e)},c.defined=function(t){return arguments.length?(i="function"==typeof t?t:td(!!t),c):i},c.curve=function(t){return arguments.length?(u=t,null!=o&&(a=u(o)),c):u},c.context=function(t){return arguments.length?(null==t?o=a=null:a=u(o=t),c):o},c},kd=function(t,n){return n<t?-1:n>t?1:n>=t?0:NaN},Nd=function(t){return t},Sd=function(){var t=Nd,n=kd,e=null,r=td(0),i=td(ld),o=td(0);function u(u){var a,c,f,s,l,h=u.length,d=0,p=new Array(h),v=new Array(h),g=+r.apply(this,arguments),y=Math.min(ld,Math.max(-ld,i.apply(this,arguments)-g)),_=Math.min(Math.abs(y)/h,o.apply(this,arguments)),m=_*(y<0?-1:1);for(a=0;a<h;++a)(l=v[p[a]=a]=+t(u[a],a,u))>0&&(d+=l);for(null!=n?p.sort(function(t,e){return n(v[t],v[e])}):null!=e&&p.sort(function(t,n){return e(u[t],u[n])}),a=0,f=d?(y-h*m)/d:0;a<h;++a,g=s)c=p[a],s=g+((l=v[c])>0?l*f:0)+m,v[c]={data:u[c],index:a,value:l,startAngle:g,endAngle:s,padAngle:_};return v}return u.value=function(n){return arguments.length?(t="function"==typeof n?n:td(+n),u):t},u.sortValues=function(t){return arguments.length?(n=t,e=null,u):n},u.sort=function(t){return arguments.length?(e=t,n=null,u):e},u.startAngle=function(t){return arguments.length?(r="function"==typeof t?t:td(+t),u):r},u.endAngle=function(t){return arguments.length?(i="function"==typeof t?t:td(+t),u):i},u.padAngle=function(t){return arguments.length?(o="function"==typeof t?t:td(+t),u):o},u},Ad=Cd(bd);function Od(t){this._curve=t}function Cd(t){function n(n){return new Od(t(n))}return n._curve=t,n}function jd(t){var n=t.curve;return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t.curve=function(t){return arguments.length?n(Cd(t)):n()._curve},t}Od.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(t,n){this._curve.point(n*Math.sin(t),n*-Math.cos(t))}};var Id=function(){return jd(Ed().curve(Ad))},Pd=function(){var t=Td().curve(Ad),n=t.curve,e=t.lineX0,r=t.lineX1,i=t.lineY0,o=t.lineY1;return t.angle=t.x,delete t.x,t.startAngle=t.x0,delete t.x0,t.endAngle=t.x1,delete t.x1,t.radius=t.y,delete t.y,t.innerRadius=t.y0,delete t.y0,t.outerRadius=t.y1,delete t.y1,t.lineStartAngle=function(){return jd(e())},delete t.lineX0,t.lineEndAngle=function(){return jd(r())},delete t.lineX1,t.lineInnerRadius=function(){return jd(i())},delete t.lineY0,t.lineOuterRadius=function(){return jd(o())},delete t.lineY1,t.curve=function(t){return arguments.length?n(Cd(t)):n()._curve},t},Ld=function(t,n){return[(n=+n)*Math.cos(t-=Math.PI/2),n*Math.sin(t)]},Rd=Array.prototype.slice;function zd(t){return t.source}function Dd(t){return t.target}function Vd(t){var n=zd,e=Dd,r=wd,i=Md,o=null;function u(){var u,a=Rd.call(arguments),c=n.apply(this,a),f=e.apply(this,a);if(o||(o=u=Jt()),t(o,+r.apply(this,(a[0]=c,a)),+i.apply(this,a),+r.apply(this,(a[0]=f,a)),+i.apply(this,a)),u)return o=null,u+""||null}return u.source=function(t){return arguments.length?(n=t,u):n},u.target=function(t){return arguments.length?(e=t,u):e},u.x=function(t){return arguments.length?(r="function"==typeof t?t:td(+t),u):r},u.y=function(t){return arguments.length?(i="function"==typeof t?t:td(+t),u):i},u.context=function(t){return arguments.length?(o=null==t?null:t,u):o},u}function Ud(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n=(n+r)/2,e,n,i,r,i)}function Fd(t,n,e,r,i){t.moveTo(n,e),t.bezierCurveTo(n,e=(e+i)/2,r,e,r,i)}function qd(t,n,e,r,i){var o=Ld(n,e),u=Ld(n,e=(e+i)/2),a=Ld(r,e),c=Ld(r,i);t.moveTo(o[0],o[1]),t.bezierCurveTo(u[0],u[1],a[0],a[1],c[0],c[1])}function Bd(){return Vd(Ud)}function Yd(){return Vd(Fd)}function Hd(){var t=Vd(qd);return t.angle=t.x,delete t.x,t.radius=t.y,delete t.y,t}var Xd={draw:function(t,n){var e=Math.sqrt(n/fd);t.moveTo(e,0),t.arc(0,0,e,0,ld)}},Wd={draw:function(t,n){var e=Math.sqrt(n/5)/2;t.moveTo(-3*e,-e),t.lineTo(-e,-e),t.lineTo(-e,-3*e),t.lineTo(e,-3*e),t.lineTo(e,-e),t.lineTo(3*e,-e),t.lineTo(3*e,e),t.lineTo(e,e),t.lineTo(e,3*e),t.lineTo(-e,3*e),t.lineTo(-e,e),t.lineTo(-3*e,e),t.closePath()}},Gd=Math.sqrt(1/3),$d=2*Gd,Zd={draw:function(t,n){var e=Math.sqrt(n/$d),r=e*Gd;t.moveTo(0,-e),t.lineTo(r,0),t.lineTo(0,e),t.lineTo(-r,0),t.closePath()}},Qd=Math.sin(fd/10)/Math.sin(7*fd/10),Kd=Math.sin(ld/10)*Qd,Jd=-Math.cos(ld/10)*Qd,tp={draw:function(t,n){var e=Math.sqrt(.8908130915292852*n),r=Kd*e,i=Jd*e;t.moveTo(0,-e),t.lineTo(r,i);for(var o=1;o<5;++o){var u=ld*o/5,a=Math.cos(u),c=Math.sin(u);t.lineTo(c*e,-a*e),t.lineTo(a*r-c*i,c*r+a*i)}t.closePath()}},np={draw:function(t,n){var e=Math.sqrt(n),r=-e/2;t.rect(r,r,e,e)}},ep=Math.sqrt(3),rp={draw:function(t,n){var e=-Math.sqrt(n/(3*ep));t.moveTo(0,2*e),t.lineTo(-ep*e,-e),t.lineTo(ep*e,-e),t.closePath()}},ip=Math.sqrt(3)/2,op=1/Math.sqrt(12),up=3*(op/2+1),ap={draw:function(t,n){var e=Math.sqrt(n/up),r=e/2,i=e*op,o=r,u=e*op+e,a=-o,c=u;t.moveTo(r,i),t.lineTo(o,u),t.lineTo(a,c),t.lineTo(-.5*r-ip*i,ip*r+-.5*i),t.lineTo(-.5*o-ip*u,ip*o+-.5*u),t.lineTo(-.5*a-ip*c,ip*a+-.5*c),t.lineTo(-.5*r+ip*i,-.5*i-ip*r),t.lineTo(-.5*o+ip*u,-.5*u-ip*o),t.lineTo(-.5*a+ip*c,-.5*c-ip*a),t.closePath()}},cp=[Xd,Wd,Zd,np,tp,rp,ap],fp=function(){var t=td(Xd),n=td(64),e=null;function r(){var r;if(e||(e=r=Jt()),t.apply(this,arguments).draw(e,+n.apply(this,arguments)),r)return e=null,r+""||null}return r.type=function(n){return arguments.length?(t="function"==typeof n?n:td(n),r):t},r.size=function(t){return arguments.length?(n="function"==typeof t?t:td(+t),r):n},r.context=function(t){return arguments.length?(e=null==t?null:t,r):e},r},sp=function(){};function lp(t,n,e){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+n)/6,(t._y0+4*t._y1+e)/6)}function hp(t){this._context=t}hp.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:lp(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:lp(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var dp=function(t){return new hp(t)};function pp(t){this._context=t}pp.prototype={areaStart:sp,areaEnd:sp,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x2=t,this._y2=n;break;case 1:this._point=2,this._x3=t,this._y3=n;break;case 2:this._point=3,this._x4=t,this._y4=n,this._context.moveTo((this._x0+4*this._x1+t)/6,(this._y0+4*this._y1+n)/6);break;default:lp(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var vp=function(t){return new pp(t)};function gp(t){this._context=t}gp.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var e=(this._x0+4*this._x1+t)/6,r=(this._y0+4*this._y1+n)/6;this._line?this._context.lineTo(e,r):this._context.moveTo(e,r);break;case 3:this._point=4;default:lp(this,t,n)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n}};var yp=function(t){return new gp(t)};function _p(t,n){this._basis=new hp(t),this._beta=n}_p.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var t=this._x,n=this._y,e=t.length-1;if(e>0)for(var r,i=t[0],o=n[0],u=t[e]-i,a=n[e]-o,c=-1;++c<=e;)r=c/e,this._basis.point(this._beta*t[c]+(1-this._beta)*(i+r*u),this._beta*n[c]+(1-this._beta)*(o+r*a));this._x=this._y=null,this._basis.lineEnd()},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var mp=function t(n){function e(t){return 1===n?new hp(t):new _p(t,n)}return e.beta=function(n){return t(+n)},e}(.85);function xp(t,n,e){t._context.bezierCurveTo(t._x1+t._k*(t._x2-t._x0),t._y1+t._k*(t._y2-t._y0),t._x2+t._k*(t._x1-n),t._y2+t._k*(t._y1-e),t._x2,t._y2)}function bp(t,n){this._context=t,this._k=(1-n)/6}bp.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:xp(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2,this._x1=t,this._y1=n;break;case 2:this._point=3;default:xp(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var wp=function t(n){function e(t){return new bp(t,n)}return e.tension=function(n){return t(+n)},e}(0);function Mp(t,n){this._context=t,this._k=(1-n)/6}Mp.prototype={areaStart:sp,areaEnd:sp,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:xp(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Ep=function t(n){function e(t){return new Mp(t,n)}return e.tension=function(n){return t(+n)},e}(0);function Tp(t,n){this._context=t,this._k=(1-n)/6}Tp.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:xp(this,t,n)}this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var kp=function t(n){function e(t){return new Tp(t,n)}return e.tension=function(n){return t(+n)},e}(0);function Np(t,n,e){var r=t._x1,i=t._y1,o=t._x2,u=t._y2;if(t._l01_a>cd){var a=2*t._l01_2a+3*t._l01_a*t._l12_a+t._l12_2a,c=3*t._l01_a*(t._l01_a+t._l12_a);r=(r*a-t._x0*t._l12_2a+t._x2*t._l01_2a)/c,i=(i*a-t._y0*t._l12_2a+t._y2*t._l01_2a)/c}if(t._l23_a>cd){var f=2*t._l23_2a+3*t._l23_a*t._l12_a+t._l12_2a,s=3*t._l23_a*(t._l23_a+t._l12_a);o=(o*f+t._x1*t._l23_2a-n*t._l12_2a)/s,u=(u*f+t._y1*t._l23_2a-e*t._l12_2a)/s}t._context.bezierCurveTo(r,i,o,u,t._x2,t._y2)}function Sp(t,n){this._context=t,this._alpha=n}Sp.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3;default:Np(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Ap=function t(n){function e(t){return n?new Sp(t,n):new bp(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function Op(t,n){this._context=t,this._alpha=n}Op.prototype={areaStart:sp,areaEnd:sp,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=t,this._y3=n;break;case 1:this._point=2,this._context.moveTo(this._x4=t,this._y4=n);break;case 2:this._point=3,this._x5=t,this._y5=n;break;default:Np(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Cp=function t(n){function e(t){return n?new Op(t,n):new Mp(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function jp(t,n){this._context=t,this._alpha=n}jp.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){if(t=+t,n=+n,this._point){var e=this._x2-t,r=this._y2-n;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(e*e+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Np(this,t,n)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=t,this._y0=this._y1,this._y1=this._y2,this._y2=n}};var Ip=function t(n){function e(t){return n?new jp(t,n):new Tp(t,0)}return e.alpha=function(n){return t(+n)},e}(.5);function Pp(t){this._context=t}Pp.prototype={areaStart:sp,areaEnd:sp,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(t,n){t=+t,n=+n,this._point?this._context.lineTo(t,n):(this._point=1,this._context.moveTo(t,n))}};var Lp=function(t){return new Pp(t)};function Rp(t){return t<0?-1:1}function zp(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),u=(e-t._y1)/(i||r<0&&-0),a=(o*i+u*r)/(r+i);return(Rp(o)+Rp(u))*Math.min(Math.abs(o),Math.abs(u),.5*Math.abs(a))||0}function Dp(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Vp(t,n,e){var r=t._x0,i=t._y0,o=t._x1,u=t._y1,a=(o-r)/3;t._context.bezierCurveTo(r+a,i+a*n,o-a,u-a*e,o,u)}function Up(t){this._context=t}function Fp(t){this._context=new qp(t)}function qp(t){this._context=t}function Bp(t){return new Up(t)}function Yp(t){return new Fp(t)}function Hp(t){this._context=t}function Xp(t){var n,e,r=t.length-1,i=new Array(r),o=new Array(r),u=new Array(r);for(i[0]=0,o[0]=2,u[0]=t[0]+2*t[1],n=1;n<r-1;++n)i[n]=1,o[n]=4,u[n]=4*t[n]+2*t[n+1];for(i[r-1]=2,o[r-1]=7,u[r-1]=8*t[r-1]+t[r],n=1;n<r;++n)e=i[n]/o[n-1],o[n]-=e,u[n]-=e*u[n-1];for(i[r-1]=u[r-1]/o[r-1],n=r-2;n>=0;--n)i[n]=(u[n]-i[n+1])/o[n];for(o[r-1]=(t[r]+i[r-1])/2,n=0;n<r-1;++n)o[n]=2*t[n+1]-i[n+1];return[i,o]}Up.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Vp(this,this._t0,Dp(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(n=+n,(t=+t)!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Vp(this,Dp(this,e=zp(this,t,n)),e);break;default:Vp(this,this._t0,e=zp(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(Fp.prototype=Object.create(Up.prototype)).point=function(t,n){Up.prototype.point.call(this,n,t)},qp.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}},Hp.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var t=this._x,n=this._y,e=t.length;if(e)if(this._line?this._context.lineTo(t[0],n[0]):this._context.moveTo(t[0],n[0]),2===e)this._context.lineTo(t[1],n[1]);else for(var r=Xp(t),i=Xp(n),o=0,u=1;u<e;++o,++u)this._context.bezierCurveTo(r[0][o],i[0][o],r[1][o],i[1][o],t[u],n[u]);(this._line||0!==this._line&&1===e)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(t,n){this._x.push(+t),this._y.push(+n)}};var Wp=function(t){return new Hp(t)};function Gp(t,n){this._context=t,this._t=n}Gp.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,n),this._context.lineTo(t,n);else{var e=this._x*(1-this._t)+t*this._t;this._context.lineTo(e,this._y),this._context.lineTo(e,n)}}this._x=t,this._y=n}};var $p=function(t){return new Gp(t,.5)};function Zp(t){return new Gp(t,0)}function Qp(t){return new Gp(t,1)}var Kp=function(t,n){if((i=t.length)>1)for(var e,r,i,o=1,u=t[n[0]],a=u.length;o<i;++o)for(r=u,u=t[n[o]],e=0;e<a;++e)u[e][1]+=u[e][0]=isNaN(r[e][1])?r[e][0]:r[e][1]},Jp=function(t){for(var n=t.length,e=new Array(n);--n>=0;)e[n]=n;return e};function tv(t,n){return t[n]}var nv=function(){var t=td([]),n=Jp,e=Kp,r=tv;function i(i){var o,u,a=t.apply(this,arguments),c=i.length,f=a.length,s=new Array(f);for(o=0;o<f;++o){for(var l,h=a[o],d=s[o]=new Array(c),p=0;p<c;++p)d[p]=l=[0,+r(i[p],h,p,i)],l.data=i[p];d.key=h}for(o=0,u=n(s);o<f;++o)s[u[o]].index=o;return e(s,u),s}return i.keys=function(n){return arguments.length?(t="function"==typeof n?n:td(Rd.call(n)),i):t},i.value=function(t){return arguments.length?(r="function"==typeof t?t:td(+t),i):r},i.order=function(t){return arguments.length?(n=null==t?Jp:"function"==typeof t?t:td(Rd.call(t)),i):n},i.offset=function(t){return arguments.length?(e=null==t?Kp:t,i):e},i},ev=function(t,n){if((r=t.length)>0){for(var e,r,i,o=0,u=t[0].length;o<u;++o){for(i=e=0;e<r;++e)i+=t[e][o][1]||0;if(i)for(e=0;e<r;++e)t[e][o][1]/=i}Kp(t,n)}},rv=function(t,n){if((a=t.length)>1)for(var e,r,i,o,u,a,c=0,f=t[n[0]].length;c<f;++c)for(o=u=0,e=0;e<a;++e)(i=(r=t[n[e]][c])[1]-r[0])>=0?(r[0]=o,r[1]=o+=i):i<0?(r[1]=u,r[0]=u+=i):r[0]=o},iv=function(t,n){if((e=t.length)>0){for(var e,r=0,i=t[n[0]],o=i.length;r<o;++r){for(var u=0,a=0;u<e;++u)a+=t[u][r][1]||0;i[r][1]+=i[r][0]=-a/2}Kp(t,n)}},ov=function(t,n){if((i=t.length)>0&&(r=(e=t[n[0]]).length)>0){for(var e,r,i,o=0,u=1;u<r;++u){for(var a=0,c=0,f=0;a<i;++a){for(var s=t[n[a]],l=s[u][1]||0,h=(l-(s[u-1][1]||0))/2,d=0;d<a;++d){var p=t[n[d]];h+=(p[u][1]||0)-(p[u-1][1]||0)}c+=l,f+=h*l}e[u-1][1]+=e[u-1][0]=o,c&&(o-=f/c)}e[u-1][1]+=e[u-1][0]=o,Kp(t,n)}},uv=function(t){var n=t.map(av);return Jp(t).sort(function(t,e){return n[t]-n[e]})};function av(t){for(var n,e=0,r=-1,i=t.length;++r<i;)(n=+t[r][1])&&(e+=n);return e}var cv=function(t){return uv(t).reverse()},fv=function(t){var n,e,r=t.length,i=t.map(av),o=Jp(t).sort(function(t,n){return i[n]-i[t]}),u=0,a=0,c=[],f=[];for(n=0;n<r;++n)e=o[n],u<a?(u+=i[e],c.push(e)):(a+=i[e],f.push(e));return f.reverse().concat(c)},sv=function(t){return Jp(t).reverse()},lv=function(t){return function(){return t}};function hv(t){return t[0]}function dv(t){return t[1]}function pv(){this._=null}function vv(t){t.U=t.C=t.L=t.R=t.P=t.N=null}function gv(t,n){var e=n,r=n.R,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function yv(t,n){var e=n,r=n.L,i=e.U;i?i.L===e?i.L=r:i.R=r:t._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function _v(t){for(;t.L;)t=t.L;return t}pv.prototype={constructor:pv,insert:function(t,n){var e,r,i;if(t){if(n.P=t,n.N=t.N,t.N&&(t.N.P=n),t.N=n,t.R){for(t=t.R;t.L;)t=t.L;t.L=n}else t.R=n;e=t}else this._?(t=_v(this._),n.P=null,n.N=t,t.P=t.L=n,e=t):(n.P=n.N=null,this._=n,e=null);for(n.L=n.R=null,n.U=e,n.C=!0,t=n;e&&e.C;)e===(r=e.U).L?(i=r.R)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.R&&(gv(this,e),e=(t=e).U),e.C=!1,r.C=!0,yv(this,r)):(i=r.L)&&i.C?(e.C=i.C=!1,r.C=!0,t=r):(t===e.L&&(yv(this,e),e=(t=e).U),e.C=!1,r.C=!0,gv(this,r)),e=t.U;this._.C=!1},remove:function(t){t.N&&(t.N.P=t.P),t.P&&(t.P.N=t.N),t.N=t.P=null;var n,e,r,i=t.U,o=t.L,u=t.R;if(e=o?u?_v(u):o:u,i?i.L===t?i.L=e:i.R=e:this._=e,o&&u?(r=e.C,e.C=t.C,e.L=o,o.U=e,e!==u?(i=e.U,e.U=t.U,t=e.R,i.L=t,e.R=u,u.U=e):(e.U=i,i=e,t=e.R)):(r=t.C,t=e),t&&(t.U=i),!r)if(t&&t.C)t.C=!1;else{do{if(t===this._)break;if(t===i.L){if((n=i.R).C&&(n.C=!1,i.C=!0,gv(this,i),n=i.R),n.L&&n.L.C||n.R&&n.R.C){n.R&&n.R.C||(n.L.C=!1,n.C=!0,yv(this,n),n=i.R),n.C=i.C,i.C=n.R.C=!1,gv(this,i),t=this._;break}}else if((n=i.L).C&&(n.C=!1,i.C=!0,yv(this,i),n=i.L),n.L&&n.L.C||n.R&&n.R.C){n.L&&n.L.C||(n.R.C=!1,n.C=!0,gv(this,n),n=i.L),n.C=i.C,i.C=n.L.C=!1,yv(this,i),t=this._;break}n.C=!0,t=i,i=i.U}while(!t.C);t&&(t.C=!1)}}};var mv=pv;function xv(t,n,e,r){var i=[null,null],o=Yv.push(i)-1;return i.left=t,i.right=n,e&&wv(i,t,n,e),r&&wv(i,n,t,r),qv[t.index].halfedges.push(o),qv[n.index].halfedges.push(o),i}function bv(t,n,e){var r=[n,e];return r.left=t,r}function wv(t,n,e,r){t[0]||t[1]?t.left===e?t[1]=r:t[0]=r:(t[0]=r,t.left=n,t.right=e)}function Mv(t,n,e,r,i){var o,u=t[0],a=t[1],c=u[0],f=u[1],s=0,l=1,h=a[0]-c,d=a[1]-f;if(o=n-c,h||!(o>0)){if(o/=h,h<0){if(o<s)return;o<l&&(l=o)}else if(h>0){if(o>l)return;o>s&&(s=o)}if(o=r-c,h||!(o<0)){if(o/=h,h<0){if(o>l)return;o>s&&(s=o)}else if(h>0){if(o<s)return;o<l&&(l=o)}if(o=e-f,d||!(o>0)){if(o/=d,d<0){if(o<s)return;o<l&&(l=o)}else if(d>0){if(o>l)return;o>s&&(s=o)}if(o=i-f,d||!(o<0)){if(o/=d,d<0){if(o>l)return;o>s&&(s=o)}else if(d>0){if(o<s)return;o<l&&(l=o)}return!(s>0||l<1)||(s>0&&(t[0]=[c+s*h,f+s*d]),l<1&&(t[1]=[c+l*h,f+l*d]),!0)}}}}}function Ev(t,n,e,r,i){var o=t[1];if(o)return!0;var u,a,c=t[0],f=t.left,s=t.right,l=f[0],h=f[1],d=s[0],p=s[1],v=(l+d)/2,g=(h+p)/2;if(p===h){if(v<n||v>=r)return;if(l>d){if(c){if(c[1]>=i)return}else c=[v,e];o=[v,i]}else{if(c){if(c[1]<e)return}else c=[v,i];o=[v,e]}}else if(a=g-(u=(l-d)/(p-h))*v,u<-1||u>1)if(l>d){if(c){if(c[1]>=i)return}else c=[(e-a)/u,e];o=[(i-a)/u,i]}else{if(c){if(c[1]<e)return}else c=[(i-a)/u,i];o=[(e-a)/u,e]}else if(h<p){if(c){if(c[0]>=r)return}else c=[n,u*n+a];o=[r,u*r+a]}else{if(c){if(c[0]<n)return}else c=[r,u*r+a];o=[n,u*n+a]}return t[0]=c,t[1]=o,!0}function Tv(t,n){var e=t.site,r=n.left,i=n.right;return e===i&&(i=r,r=e),i?Math.atan2(i[1]-r[1],i[0]-r[0]):(e===r?(r=n[1],i=n[0]):(r=n[0],i=n[1]),Math.atan2(r[0]-i[0],i[1]-r[1]))}function kv(t,n){return n[+(n.left!==t.site)]}function Nv(t,n){return n[+(n.left===t.site)]}var Sv,Av=[];function Ov(){vv(this),this.x=this.y=this.arc=this.site=this.cy=null}function Cv(t){var n=t.P,e=t.N;if(n&&e){var r=n.site,i=t.site,o=e.site;if(r!==o){var u=i[0],a=i[1],c=r[0]-u,f=r[1]-a,s=o[0]-u,l=o[1]-a,h=2*(c*l-f*s);if(!(h>=-Xv)){var d=c*c+f*f,p=s*s+l*l,v=(l*d-f*p)/h,g=(c*p-s*d)/h,y=Av.pop()||new Ov;y.arc=t,y.site=i,y.x=v+u,y.y=(y.cy=g+a)+Math.sqrt(v*v+g*g),t.circle=y;for(var _=null,m=Bv._;m;)if(y.y<m.y||y.y===m.y&&y.x<=m.x){if(!m.L){_=m.P;break}m=m.L}else{if(!m.R){_=m;break}m=m.R}Bv.insert(_,y),_||(Sv=y)}}}}function jv(t){var n=t.circle;n&&(n.P||(Sv=n.N),Bv.remove(n),Av.push(n),vv(n),t.circle=null)}var Iv=[];function Pv(){vv(this),this.edge=this.site=this.circle=null}function Lv(t){var n=Iv.pop()||new Pv;return n.site=t,n}function Rv(t){jv(t),Fv.remove(t),Iv.push(t),vv(t)}function zv(t){var n=t.circle,e=n.x,r=n.cy,i=[e,r],o=t.P,u=t.N,a=[t];Rv(t);for(var c=o;c.circle&&Math.abs(e-c.circle.x)<Hv&&Math.abs(r-c.circle.cy)<Hv;)o=c.P,a.unshift(c),Rv(c),c=o;a.unshift(c),jv(c);for(var f=u;f.circle&&Math.abs(e-f.circle.x)<Hv&&Math.abs(r-f.circle.cy)<Hv;)u=f.N,a.push(f),Rv(f),f=u;a.push(f),jv(f);var s,l=a.length;for(s=1;s<l;++s)f=a[s],c=a[s-1],wv(f.edge,c.site,f.site,i);c=a[0],(f=a[l-1]).edge=xv(c.site,f.site,null,i),Cv(c),Cv(f)}function Dv(t){for(var n,e,r,i,o=t[0],u=t[1],a=Fv._;a;)if((r=Vv(a,u)-o)>Hv)a=a.L;else{if(!((i=o-Uv(a,u))>Hv)){r>-Hv?(n=a.P,e=a):i>-Hv?(n=a,e=a.N):n=e=a;break}if(!a.R){n=a;break}a=a.R}!function(t){qv[t.index]={site:t,halfedges:[]}}(t);var c=Lv(t);if(Fv.insert(n,c),n||e){if(n===e)return jv(n),e=Lv(n.site),Fv.insert(c,e),c.edge=e.edge=xv(n.site,c.site),Cv(n),void Cv(e);if(e){jv(n),jv(e);var f=n.site,s=f[0],l=f[1],h=t[0]-s,d=t[1]-l,p=e.site,v=p[0]-s,g=p[1]-l,y=2*(h*g-d*v),_=h*h+d*d,m=v*v+g*g,x=[(g*_-d*m)/y+s,(h*m-v*_)/y+l];wv(e.edge,f,p,x),c.edge=xv(f,t,null,x),e.edge=xv(t,p,null,x),Cv(n),Cv(e)}else c.edge=xv(n.site,c.site)}}function Vv(t,n){var e=t.site,r=e[0],i=e[1],o=i-n;if(!o)return r;var u=t.P;if(!u)return-1/0;var a=(e=u.site)[0],c=e[1],f=c-n;if(!f)return a;var s=a-r,l=1/o-1/f,h=s/f;return l?(-h+Math.sqrt(h*h-2*l*(s*s/(-2*f)-c+f/2+i-o/2)))/l+r:(r+a)/2}function Uv(t,n){var e=t.N;if(e)return Vv(e,n);var r=t.site;return r[1]===n?r[0]:1/0}var Fv,qv,Bv,Yv,Hv=1e-6,Xv=1e-12;function Wv(t,n){return n[1]-t[1]||n[0]-t[0]}function Gv(t,n){var e,r,i,o=t.sort(Wv).pop();for(Yv=[],qv=new Array(t.length),Fv=new mv,Bv=new mv;;)if(i=Sv,o&&(!i||o[1]<i.y||o[1]===i.y&&o[0]<i.x))o[0]===e&&o[1]===r||(Dv(o),e=o[0],r=o[1]),o=t.pop();else{if(!i)break;zv(i.arc)}if(function(){for(var t,n,e,r,i=0,o=qv.length;i<o;++i)if((t=qv[i])&&(r=(n=t.halfedges).length)){var u=new Array(r),a=new Array(r);for(e=0;e<r;++e)u[e]=e,a[e]=Tv(t,Yv[n[e]]);for(u.sort(function(t,n){return a[n]-a[t]}),e=0;e<r;++e)a[e]=n[u[e]];for(e=0;e<r;++e)n[e]=a[e]}}(),n){var u=+n[0][0],a=+n[0][1],c=+n[1][0],f=+n[1][1];!function(t,n,e,r){for(var i,o=Yv.length;o--;)Ev(i=Yv[o],t,n,e,r)&&Mv(i,t,n,e,r)&&(Math.abs(i[0][0]-i[1][0])>Hv||Math.abs(i[0][1]-i[1][1])>Hv)||delete Yv[o]}(u,a,c,f),function(t,n,e,r){var i,o,u,a,c,f,s,l,h,d,p,v,g=qv.length,y=!0;for(i=0;i<g;++i)if(o=qv[i]){for(u=o.site,a=(c=o.halfedges).length;a--;)Yv[c[a]]||c.splice(a,1);for(a=0,f=c.length;a<f;)p=(d=Nv(o,Yv[c[a]]))[0],v=d[1],l=(s=kv(o,Yv[c[++a%f]]))[0],h=s[1],(Math.abs(p-l)>Hv||Math.abs(v-h)>Hv)&&(c.splice(a,0,Yv.push(bv(u,d,Math.abs(p-t)<Hv&&r-v>Hv?[t,Math.abs(l-t)<Hv?h:r]:Math.abs(v-r)<Hv&&e-p>Hv?[Math.abs(h-r)<Hv?l:e,r]:Math.abs(p-e)<Hv&&v-n>Hv?[e,Math.abs(l-e)<Hv?h:n]:Math.abs(v-n)<Hv&&p-t>Hv?[Math.abs(h-n)<Hv?l:t,n]:null))-1),++f);f&&(y=!1)}if(y){var _,m,x,b=1/0;for(i=0,y=null;i<g;++i)(o=qv[i])&&(x=(_=(u=o.site)[0]-t)*_+(m=u[1]-n)*m)<b&&(b=x,y=o);if(y){var w=[t,n],M=[t,r],E=[e,r],T=[e,n];y.halfedges.push(Yv.push(bv(u=y.site,w,M))-1,Yv.push(bv(u,M,E))-1,Yv.push(bv(u,E,T))-1,Yv.push(bv(u,T,w))-1)}}for(i=0;i<g;++i)(o=qv[i])&&(o.halfedges.length||delete qv[i])}(u,a,c,f)}this.edges=Yv,this.cells=qv,Fv=Bv=Yv=qv=null}Gv.prototype={constructor:Gv,polygons:function(){var t=this.edges;return this.cells.map(function(n){var e=n.halfedges.map(function(e){return kv(n,t[e])});return e.data=n.site.data,e})},triangles:function(){var t=[],n=this.edges;return this.cells.forEach(function(e,r){if(o=(i=e.halfedges).length)for(var i,o,u,a,c,f,s=e.site,l=-1,h=n[i[o-1]],d=h.left===s?h.right:h.left;++l<o;)u=d,d=(h=n[i[l]]).left===s?h.right:h.left,u&&d&&r<u.index&&r<d.index&&(c=u,f=d,((a=s)[0]-f[0])*(c[1]-a[1])-(a[0]-c[0])*(f[1]-a[1])<0)&&t.push([s.data,u.data,d.data])}),t},links:function(){return this.edges.filter(function(t){return t.right}).map(function(t){return{source:t.left.data,target:t.right.data}})},find:function(t,n,e){for(var r,i,o=this,u=o._found||0,a=o.cells.length;!(i=o.cells[u]);)if(++u>=a)return null;var c=t-i.site[0],f=n-i.site[1],s=c*c+f*f;do{i=o.cells[r=u],u=null,i.halfedges.forEach(function(e){var r=o.edges[e],a=r.left;if(a!==i.site&&a||(a=r.right)){var c=t-a[0],f=n-a[1],l=c*c+f*f;l<s&&(s=l,u=a.index)}})}while(null!==u);return o._found=r,null==e||s<=e*e?i.site:null}};var $v=function(){var t=hv,n=dv,e=null;function r(r){return new Gv(r.map(function(e,i){var o=[Math.round(t(e,i,r)/Hv)*Hv,Math.round(n(e,i,r)/Hv)*Hv];return o.index=i,o.data=e,o}),e)}return r.polygons=function(t){return r(t).polygons()},r.links=function(t){return r(t).links()},r.triangles=function(t){return r(t).triangles()},r.x=function(n){return arguments.length?(t="function"==typeof n?n:lv(+n),r):t},r.y=function(t){return arguments.length?(n="function"==typeof t?t:lv(+t),r):n},r.extent=function(t){return arguments.length?(e=null==t?null:[[+t[0][0],+t[0][1]],[+t[1][0],+t[1][1]]],r):e&&[[e[0][0],e[0][1]],[e[1][0],e[1][1]]]},r.size=function(t){return arguments.length?(e=null==t?null:[[0,0],[+t[0],+t[1]]],r):e&&[e[1][0]-e[0][0],e[1][1]-e[0][1]]},r},Zv=e(81);e.d(n,"version",function(){return"4.13.0"}),e.d(n,"bisect",function(){return c}),e.d(n,"bisectRight",function(){return u}),e.d(n,"bisectLeft",function(){return a}),e.d(n,"ascending",function(){return r}),e.d(n,"bisector",function(){return i}),e.d(n,"cross",function(){return l}),e.d(n,"descending",function(){return h}),e.d(n,"deviation",function(){return v}),e.d(n,"extent",function(){return g}),e.d(n,"histogram",function(){return O}),e.d(n,"thresholdFreedmanDiaconis",function(){return j}),e.d(n,"thresholdScott",function(){return I}),e.d(n,"thresholdSturges",function(){return A}),e.d(n,"max",function(){return P}),e.d(n,"mean",function(){return L}),e.d(n,"median",function(){return R}),e.d(n,"merge",function(){return z}),e.d(n,"min",function(){return D}),e.d(n,"pairs",function(){return f}),e.d(n,"permute",function(){return V}),e.d(n,"quantile",function(){return C}),e.d(n,"range",function(){return w}),e.d(n,"scan",function(){return U}),e.d(n,"shuffle",function(){return F}),e.d(n,"sum",function(){return q}),e.d(n,"ticks",function(){return k}),e.d(n,"tickIncrement",function(){return N}),e.d(n,"tickStep",function(){return S}),e.d(n,"transpose",function(){return B}),e.d(n,"variance",function(){return p}),e.d(n,"zip",function(){return H}),e.d(n,"axisTop",function(){return rt}),e.d(n,"axisRight",function(){return it}),e.d(n,"axisBottom",function(){return ot}),e.d(n,"axisLeft",function(){return ut}),e.d(n,"brush",function(){return Rt}),e.d(n,"brushX",function(){return Pt}),e.d(n,"brushY",function(){return Lt}),e.d(n,"brushSelection",function(){return It}),e.d(n,"chord",function(){return Ht}),e.d(n,"ribbon",function(){return un}),e.d(n,"nest",function(){return sn}),e.d(n,"set",function(){return _n}),e.d(n,"map",function(){return fn}),e.d(n,"keys",function(){return mn}),e.d(n,"values",function(){return xn}),e.d(n,"entries",function(){return bn}),e.d(n,"color",function(){return wn.a}),e.d(n,"rgb",function(){return wn.f}),e.d(n,"hsl",function(){return wn.d}),e.d(n,"lab",function(){return wn.e}),e.d(n,"hcl",function(){return wn.c}),e.d(n,"cubehelix",function(){return wn.b}),e.d(n,"dispatch",function(){return at.a}),e.d(n,"drag",function(){return ct.a}),e.d(n,"dragDisable",function(){return ct.b}),e.d(n,"dragEnable",function(){return ct.c}),e.d(n,"dsvFormat",function(){return An}),e.d(n,"csvParse",function(){return Cn}),e.d(n,"csvParseRows",function(){return jn}),e.d(n,"csvFormat",function(){return In}),e.d(n,"csvFormatRows",function(){return Pn}),e.d(n,"tsvParse",function(){return Rn}),e.d(n,"tsvParseRows",function(){return zn}),e.d(n,"tsvFormat",function(){return Dn}),e.d(n,"tsvFormatRows",function(){return Vn}),e.d(n,"easeLinear",function(){return Un.y}),e.d(n,"easeQuad",function(){return Un.D}),e.d(n,"easeQuadIn",function(){return Un.E}),e.d(n,"easeQuadOut",function(){return Un.G}),e.d(n,"easeQuadInOut",function(){return Un.F}),e.d(n,"easeCubic",function(){return Un.m}),e.d(n,"easeCubicIn",function(){return Un.n}),e.d(n,"easeCubicOut",function(){return Un.p}),e.d(n,"easeCubicInOut",function(){return Un.o}),e.d(n,"easePoly",function(){return Un.z}),e.d(n,"easePolyIn",function(){return Un.A}),e.d(n,"easePolyOut",function(){return Un.C}),e.d(n,"easePolyInOut",function(){return Un.B}),e.d(n,"easeSin",function(){return Un.H}),e.d(n,"easeSinIn",function(){return Un.I}),e.d(n,"easeSinOut",function(){return Un.K}),e.d(n,"easeSinInOut",function(){return Un.J}),e.d(n,"easeExp",function(){return Un.u}),e.d(n,"easeExpIn",function(){return Un.v}),e.d(n,"easeExpOut",function(){return Un.x}),e.d(n,"easeExpInOut",function(){return Un.w}),e.d(n,"easeCircle",function(){return Un.i}),e.d(n,"easeCircleIn",function(){return Un.j}),e.d(n,"easeCircleOut",function(){return Un.l}),e.d(n,"easeCircleInOut",function(){return Un.k}),e.d(n,"easeBounce",function(){return Un.e}),e.d(n,"easeBounceIn",function(){return Un.f}),e.d(n,"easeBounceOut",function(){return Un.h}),e.d(n,"easeBounceInOut",function(){return Un.g}),e.d(n,"easeBack",function(){return Un.a}),e.d(n,"easeBackIn",function(){return Un.b}),e.d(n,"easeBackOut",function(){return Un.d}),e.d(n,"easeBackInOut",function(){return Un.c}),e.d(n,"easeElastic",function(){return Un.q}),e.d(n,"easeElasticIn",function(){return Un.r}),e.d(n,"easeElasticOut",function(){return Un.t}),e.d(n,"easeElasticInOut",function(){return Un.s}),e.d(n,"forceCenter",function(){return Fn}),e.d(n,"forceCollide",function(){return te}),e.d(n,"forceLink",function(){return re}),e.d(n,"forceManyBody",function(){return le}),e.d(n,"forceRadial",function(){return he}),e.d(n,"forceSimulation",function(){return se}),e.d(n,"forceX",function(){return de}),e.d(n,"forceY",function(){return pe}),e.d(n,"formatDefaultLocale",function(){return Se}),e.d(n,"format",function(){return Me}),e.d(n,"formatPrefix",function(){return Ee}),e.d(n,"formatLocale",function(){return Ne}),e.d(n,"formatSpecifier",function(){return xe}),e.d(n,"precisionFixed",function(){return Ae}),e.d(n,"precisionPrefix",function(){return Oe}),e.d(n,"precisionRound",function(){return Ce}),e.d(n,"geoArea",function(){return Mr}),e.d(n,"geoBounds",function(){return vi}),e.d(n,"geoCentroid",function(){return Ni}),e.d(n,"geoCircle",function(){return Di}),e.d(n,"geoClipAntimeridian",function(){return $i}),e.d(n,"geoClipCircle",function(){return Zi}),e.d(n,"geoClipExtent",function(){return io}),e.d(n,"geoClipRectangle",function(){return to}),e.d(n,"geoContains",function(){return Mo}),e.d(n,"geoDistance",function(){return po}),e.d(n,"geoGraticule",function(){return ko}),e.d(n,"geoGraticule10",function(){return No}),e.d(n,"geoInterpolate",function(){return jo}),e.d(n,"geoLength",function(){return so}),e.d(n,"geoPath",function(){return Ou}),e.d(n,"geoAlbers",function(){return Gu}),e.d(n,"geoAlbersUsa",function(){return $u}),e.d(n,"geoAzimuthalEqualArea",function(){return Ju}),e.d(n,"geoAzimuthalEqualAreaRaw",function(){return Ku}),e.d(n,"geoAzimuthalEquidistant",function(){return na}),e.d(n,"geoAzimuthalEquidistantRaw",function(){return ta}),e.d(n,"geoConicConformal",function(){return aa}),e.d(n,"geoConicConformalRaw",function(){return ua}),e.d(n,"geoConicEqualArea",function(){return Wu}),e.d(n,"geoConicEqualAreaRaw",function(){return Xu}),e.d(n,"geoConicEquidistant",function(){return la}),e.d(n,"geoConicEquidistantRaw",function(){return sa}),e.d(n,"geoEquirectangular",function(){return fa}),e.d(n,"geoEquirectangularRaw",function(){return ca}),e.d(n,"geoGnomonic",function(){return da}),e.d(n,"geoGnomonicRaw",function(){return ha}),e.d(n,"geoIdentity",function(){return va}),e.d(n,"geoProjection",function(){return Bu}),e.d(n,"geoProjectionMutator",function(){return Yu}),e.d(n,"geoMercator",function(){return ra}),e.d(n,"geoMercatorRaw",function(){return ea}),e.d(n,"geoNaturalEarth1",function(){return ya}),e.d(n,"geoNaturalEarth1Raw",function(){return ga}),e.d(n,"geoOrthographic",function(){return ma}),e.d(n,"geoOrthographicRaw",function(){return _a}),e.d(n,"geoStereographic",function(){return ba}),e.d(n,"geoStereographicRaw",function(){return xa}),e.d(n,"geoTransverseMercator",function(){return Ma}),e.d(n,"geoTransverseMercatorRaw",function(){return wa}),e.d(n,"geoRotation",function(){return Li}),e.d(n,"geoStream",function(){return vr}),e.d(n,"geoTransform",function(){return Cu}),e.d(n,"cluster",function(){return Na}),e.d(n,"hierarchy",function(){return Aa}),e.d(n,"pack",function(){return tc}),e.d(n,"packSiblings",function(){return Ga}),e.d(n,"packEnclose",function(){return La}),e.d(n,"partition",function(){return uc}),e.d(n,"stratify",function(){return hc}),e.d(n,"tree",function(){return mc}),e.d(n,"treemap",function(){return Ec}),e.d(n,"treemapBinary",function(){return Tc}),e.d(n,"treemapDice",function(){return oc}),e.d(n,"treemapSlice",function(){return xc}),e.d(n,"treemapSliceDice",function(){return kc}),e.d(n,"treemapSquarify",function(){return Mc}),e.d(n,"treemapResquarify",function(){return Nc}),e.d(n,"interpolate",function(){return ft.a}),e.d(n,"interpolateArray",function(){return ft.b}),e.d(n,"interpolateBasis",function(){return ft.c}),e.d(n,"interpolateBasisClosed",function(){return ft.d}),e.d(n,"interpolateDate",function(){return ft.g}),e.d(n,"interpolateNumber",function(){return ft.m}),e.d(n,"interpolateObject",function(){return ft.n}),e.d(n,"interpolateRound",function(){return ft.r}),e.d(n,"interpolateString",function(){return ft.s}),e.d(n,"interpolateTransformCss",function(){return ft.t}),e.d(n,"interpolateTransformSvg",function(){return ft.u}),e.d(n,"interpolateZoom",function(){return ft.v}),e.d(n,"interpolateRgb",function(){return ft.o}),e.d(n,"interpolateRgbBasis",function(){return ft.p}),e.d(n,"interpolateRgbBasisClosed",function(){return ft.q}),e.d(n,"interpolateHsl",function(){return ft.j}),e.d(n,"interpolateHslLong",function(){return ft.k}),e.d(n,"interpolateLab",function(){return ft.l}),e.d(n,"interpolateHcl",function(){return ft.h}),e.d(n,"interpolateHclLong",function(){return ft.i}),e.d(n,"interpolateCubehelix",function(){return ft.e}),e.d(n,"interpolateCubehelixLong",function(){return ft.f}),e.d(n,"quantize",function(){return ft.w}),e.d(n,"path",function(){return Jt}),e.d(n,"polygonArea",function(){return Sc}),e.d(n,"polygonCentroid",function(){return Ac}),e.d(n,"polygonHull",function(){return Ic}),e.d(n,"polygonContains",function(){return Pc}),e.d(n,"polygonLength",function(){return Lc}),e.d(n,"quadtree",function(){return Gn}),e.d(n,"queue",function(){return Bc}),e.d(n,"randomUniform",function(){return Hc}),e.d(n,"randomNormal",function(){return Xc}),e.d(n,"randomLogNormal",function(){return Wc}),e.d(n,"randomBates",function(){return $c}),e.d(n,"randomIrwinHall",function(){return Gc}),e.d(n,"randomExponential",function(){return Zc}),e.d(n,"request",function(){return Qc}),e.d(n,"html",function(){return Jc}),e.d(n,"json",function(){return tf}),e.d(n,"text",function(){return nf}),e.d(n,"xml",function(){return ef}),e.d(n,"csv",function(){return uf}),e.d(n,"tsv",function(){return af}),e.d(n,"scaleBand",function(){return df}),e.d(n,"scalePoint",function(){return pf}),e.d(n,"scaleIdentity",function(){return kf}),e.d(n,"scaleLinear",function(){return Tf}),e.d(n,"scaleLog",function(){return Pf}),e.d(n,"scaleOrdinal",function(){return hf}),e.d(n,"scaleImplicit",function(){return lf}),e.d(n,"scalePow",function(){return Rf}),e.d(n,"scaleSqrt",function(){return zf}),e.d(n,"scaleQuantile",function(){return Df}),e.d(n,"scaleQuantize",function(){return Vf}),e.d(n,"scaleThreshold",function(){return Uf}),e.d(n,"scaleTime",function(){return Rh}),e.d(n,"scaleUtc",function(){return zh}),e.d(n,"schemeCategory10",function(){return Vh}),e.d(n,"schemeCategory20b",function(){return Uh}),e.d(n,"schemeCategory20c",function(){return Fh}),e.d(n,"schemeCategory20",function(){return qh}),e.d(n,"interpolateCubehelixDefault",function(){return Bh}),e.d(n,"interpolateRainbow",function(){return Wh}),e.d(n,"interpolateWarm",function(){return Yh}),e.d(n,"interpolateCool",function(){return Hh}),e.d(n,"interpolateViridis",function(){return $h}),e.d(n,"interpolateMagma",function(){return Zh}),e.d(n,"interpolateInferno",function(){return Qh}),e.d(n,"interpolatePlasma",function(){return Kh}),e.d(n,"scaleSequential",function(){return Jh}),e.d(n,"create",function(){return st.create}),e.d(n,"creator",function(){return st.creator}),e.d(n,"local",function(){return st.local}),e.d(n,"matcher",function(){return st.matcher}),e.d(n,"mouse",function(){return st.mouse}),e.d(n,"namespace",function(){return st.namespace}),e.d(n,"namespaces",function(){return st.namespaces}),e.d(n,"clientPoint",function(){return st.clientPoint}),e.d(n,"select",function(){return st.select}),e.d(n,"selectAll",function(){return st.selectAll}),e.d(n,"selection",function(){return st.selection}),e.d(n,"selector",function(){return st.selector}),e.d(n,"selectorAll",function(){return st.selectorAll}),e.d(n,"style",function(){return st.style}),e.d(n,"touch",function(){return st.touch}),e.d(n,"touches",function(){return st.touches}),e.d(n,"window",function(){return st.window}),e.d(n,"event",function(){return st.event}),e.d(n,"customEvent",function(){return st.customEvent}),e.d(n,"arc",function(){return md}),e.d(n,"area",function(){return Td}),e.d(n,"line",function(){return Ed}),e.d(n,"pie",function(){return Sd}),e.d(n,"areaRadial",function(){return Pd}),e.d(n,"radialArea",function(){return Pd}),e.d(n,"lineRadial",function(){return Id}),e.d(n,"radialLine",function(){return Id}),e.d(n,"pointRadial",function(){return Ld}),e.d(n,"linkHorizontal",function(){return Bd}),e.d(n,"linkVertical",function(){return Yd}),e.d(n,"linkRadial",function(){return Hd}),e.d(n,"symbol",function(){return fp}),e.d(n,"symbols",function(){return cp}),e.d(n,"symbolCircle",function(){return Xd}),e.d(n,"symbolCross",function(){return Wd}),e.d(n,"symbolDiamond",function(){return Zd}),e.d(n,"symbolSquare",function(){return np}),e.d(n,"symbolStar",function(){return tp}),e.d(n,"symbolTriangle",function(){return rp}),e.d(n,"symbolWye",function(){return ap}),e.d(n,"curveBasisClosed",function(){return vp}),e.d(n,"curveBasisOpen",function(){return yp}),e.d(n,"curveBasis",function(){return dp}),e.d(n,"curveBundle",function(){return mp}),e.d(n,"curveCardinalClosed",function(){return Ep}),e.d(n,"curveCardinalOpen",function(){return kp}),e.d(n,"curveCardinal",function(){return wp}),e.d(n,"curveCatmullRomClosed",function(){return Cp}),e.d(n,"curveCatmullRomOpen",function(){return Ip}),e.d(n,"curveCatmullRom",function(){return Ap}),e.d(n,"curveLinearClosed",function(){return Lp}),e.d(n,"curveLinear",function(){return bd}),e.d(n,"curveMonotoneX",function(){return Bp}),e.d(n,"curveMonotoneY",function(){return Yp}),e.d(n,"curveNatural",function(){return Wp}),e.d(n,"curveStep",function(){return $p}),e.d(n,"curveStepAfter",function(){return Qp}),e.d(n,"curveStepBefore",function(){return Zp}),e.d(n,"stack",function(){return nv}),e.d(n,"stackOffsetExpand",function(){return ev}),e.d(n,"stackOffsetDiverging",function(){return rv}),e.d(n,"stackOffsetNone",function(){return Kp}),e.d(n,"stackOffsetSilhouette",function(){return iv}),e.d(n,"stackOffsetWiggle",function(){return ov}),e.d(n,"stackOrderAscending",function(){return uv}),e.d(n,"stackOrderDescending",function(){return cv}),e.d(n,"stackOrderInsideOut",function(){return fv}),e.d(n,"stackOrderNone",function(){return Jp}),e.d(n,"stackOrderReverse",function(){return sv}),e.d(n,"timeInterval",function(){return Bf}),e.d(n,"timeMillisecond",function(){return Hf}),e.d(n,"timeMilliseconds",function(){return Xf}),e.d(n,"utcMillisecond",function(){return Hf}),e.d(n,"utcMilliseconds",function(){return Xf}),e.d(n,"timeSecond",function(){return Zf}),e.d(n,"timeSeconds",function(){return Qf}),e.d(n,"utcSecond",function(){return Zf}),e.d(n,"utcSeconds",function(){return Qf}),e.d(n,"timeMinute",function(){return Jf}),e.d(n,"timeMinutes",function(){return ts}),e.d(n,"timeHour",function(){return es}),e.d(n,"timeHours",function(){return rs}),e.d(n,"timeDay",function(){return os}),e.d(n,"timeDays",function(){return us}),e.d(n,"timeWeek",function(){return cs}),e.d(n,"timeWeeks",function(){return vs}),e.d(n,"timeSunday",function(){return cs}),e.d(n,"timeSundays",function(){return vs}),e.d(n,"timeMonday",function(){return fs}),e.d(n,"timeMondays",function(){return gs}),e.d(n,"timeTuesday",function(){return ss}),e.d(n,"timeTuesdays",function(){return ys}),e.d(n,"timeWednesday",function(){return ls}),e.d(n,"timeWednesdays",function(){return _s}),e.d(n,"timeThursday",function(){return hs}),e.d(n,"timeThursdays",function(){return ms}),e.d(n,"timeFriday",function(){return ds}),e.d(n,"timeFridays",function(){return xs}),e.d(n,"timeSaturday",function(){return ps}),e.d(n,"timeSaturdays",function(){return bs}),e.d(n,"timeMonth",function(){return Ms}),e.d(n,"timeMonths",function(){return Es}),e.d(n,"timeYear",function(){return ks}),e.d(n,"timeYears",function(){return Ns}),e.d(n,"utcMinute",function(){return As}),e.d(n,"utcMinutes",function(){return Os}),e.d(n,"utcHour",function(){return js}),e.d(n,"utcHours",function(){return Is}),e.d(n,"utcDay",function(){return Ls}),e.d(n,"utcDays",function(){return Rs}),e.d(n,"utcWeek",function(){return Ds}),e.d(n,"utcWeeks",function(){return Hs}),e.d(n,"utcSunday",function(){return Ds}),e.d(n,"utcSundays",function(){return Hs}),e.d(n,"utcMonday",function(){return Vs}),e.d(n,"utcMondays",function(){return Xs}),e.d(n,"utcTuesday",function(){return Us}),e.d(n,"utcTuesdays",function(){return Ws}),e.d(n,"utcWednesday",function(){return Fs}),e.d(n,"utcWednesdays",function(){return Gs}),e.d(n,"utcThursday",function(){return qs}),e.d(n,"utcThursdays",function(){return $s}),e.d(n,"utcFriday",function(){return Bs}),e.d(n,"utcFridays",function(){return Zs}),e.d(n,"utcSaturday",function(){return Ys}),e.d(n,"utcSaturdays",function(){return Qs}),e.d(n,"utcMonth",function(){return Js}),e.d(n,"utcMonths",function(){return tl}),e.d(n,"utcYear",function(){return el}),e.d(n,"utcYears",function(){return rl}),e.d(n,"timeFormatDefaultLocale",function(){return Mh}),e.d(n,"timeFormat",function(){return fl}),e.d(n,"timeParse",function(){return sl}),e.d(n,"utcFormat",function(){return ll}),e.d(n,"utcParse",function(){return hl}),e.d(n,"timeFormatLocale",function(){return al}),e.d(n,"isoFormat",function(){return Eh}),e.d(n,"isoParse",function(){return Th}),e.d(n,"now",function(){return ie.b}),e.d(n,"timer",function(){return ie.d}),e.d(n,"timerFlush",function(){return ie.e}),e.d(n,"timeout",function(){return ie.c}),e.d(n,"interval",function(){return ie.a}),e.d(n,"transition",function(){return lt.c}),e.d(n,"active",function(){return lt.a}),e.d(n,"interrupt",function(){return lt.b}),e.d(n,"voronoi",function(){return $v}),e.d(n,"zoom",function(){return Zv.zoom}),e.d(n,"zoomTransform",function(){return Zv.zoomTransform}),e.d(n,"zoomIdentity",function(){return Zv.zoomIdentity})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,