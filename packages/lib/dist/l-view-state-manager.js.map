{"version":3,"file":"l-view-state-manager.js","sourceRoot":"","sources":["../src/l-view-state-manager.ts"],"names":[],"mappings":"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","sourcesContent":["import { HOST, LContainer, LView, TVIEW } from './types/angular_core';\nimport { shouldLViewBeChecked } from './util';\nimport { getRealParent, loopDynamicEmbeddedViews } from './tree-traversal';\nimport {\n\tcreateInitialTreeViewState,\n\tTreeViewBuilder,\n\tTreeViewItem\n} from './tree-view-builder';\nimport * as uuid from 'uuid';\n\n/**\n * This class encapsulates the same logic used by the Angular Ivy renderer to determine what the next view is to be checked.\n *\n * Internally, Angular manages a property 'lView' which points to the current view to be checked. Unfortunately, it's impossible\n * to reference this property by using a runtime dependency. We do need this know which view is currently being checked to link\n * the correct lView with the correct template function execution. By linking this info we can figure out which component is checked\n * and which one is not.\n *\n * The class exposes the predictedNextLView property which is the predicted lView to be checked. By calling the getNextLView function\n * the pointer is set to the next predicted one. This is done by mimicking the tree traversal that Angular does internally. Every time this\n * traversal is updated, this file will need to be as well!\n *\n * Call the resetState function to reset the initial state between different loops.\n */\nexport class LViewStateManager {\n\t// The currently predicted lView that's gonna be checked\n\tpredictedNextLView: LView;\n\n\t// TreeViewBuilder that will be filled with all predictedLViews\n\tprivate treeViewBuilder: TreeViewBuilder;\n\n\t/**\n\t * Function will change the pointer to the predictedNextLView parameter to the one Angular called the template function for.\n\t *\n\t * EVERY call will change the pointer to the next lView. Meaning, every call will traverse the tree from where it left of and will\n\t * try to find the next one\n\t *\n\t * @param treeViewItem\n\t * @param rootLView\n\t */\n\tgetNextLView(treeViewItem?: TreeViewItem, rootLView?: LView): TreeViewItem {\n\t\t// If there is no current predictedLView it MUST be the current iteration\n\t\tif (!this.predictedNextLView) {\n\t\t\tconst rootTreeViewItem = createInitialTreeViewState(rootLView, true);\n\t\t\tthis.treeViewBuilder = new TreeViewBuilder();\n\t\t\tthis.treeViewBuilder.addTreeViewItem(rootTreeViewItem);\n\t\t\tthis.predictedNextLView = rootLView;\n\t\t\treturn;\n\t\t}\n\n\t\t// If no treeViewItem was passed, take the last one we were working with\n\t\tif (!treeViewItem) {\n\t\t\ttreeViewItem = this.treeViewBuilder.currentTreeViewItem;\n\t\t}\n\n\t\t// Loop over all the dynamicEmbeddedViews\n\t\tif (!treeViewItem.dynamicEmbeddedViewsChecked) {\n\t\t\t// When a dynamic embedded view is found\n\t\t\tconst whenDynamicEmbeddedViewFound = (\n\t\t\t\tdynamicLView: LView,\n\t\t\t\tlastViewRef: boolean,\n\t\t\t\tcurrentViewRefIndex: number,\n\t\t\t\tnextLContainer: LContainer\n\t\t\t) => {\n\t\t\t\t// if it was the last viewRef for that LContainer, we need to update the pointer so the next loop doesn't revisit it\n\t\t\t\tif (lastViewRef) {\n\t\t\t\t\ttreeViewItem.nextCurrent = nextLContainer;\n\t\t\t\t} else {\n\t\t\t\t\t// If not, we need to update the index of the current viewRef so we don't revisit that one again\n\t\t\t\t\ttreeViewItem.currentViewRefIndex = currentViewRefIndex + 1;\n\t\t\t\t}\n\t\t\t\t// We go deeper into the dynamicEmbeddedView found to find components\n\t\t\t\tthis.getNextLView(\n\t\t\t\t\tcreateInitialTreeViewState(dynamicLView, false, treeViewItem)\n\t\t\t\t);\n\t\t\t};\n\n\t\t\t// Call the tree traversal for dynamicEmbeddedViews, exit the loop whenever we hit something. We only want to visit the\n\t\t\t// first node and continue to the next on the next traversal.\n\t\t\tconst foundADynamicEmbeddedView = loopDynamicEmbeddedViews({\n\t\t\t\tlView: treeViewItem.lView,\n\t\t\t\twork: whenDynamicEmbeddedViewFound,\n\t\t\t\tnextCurrentLContainer: treeViewItem.nextCurrent,\n\t\t\t\tnextViewRefIndex: treeViewItem.currentViewRefIndex,\n\t\t\t\texitLoopPrematurely: true\n\t\t\t});\n\t\t\t// If a dynamic view was found, we need to stop looping, if not, we need to check the current lView's child components\n\t\t\tif (foundADynamicEmbeddedView) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t// Label this so we don't accidentally loop over all the dynamic embedded views again\n\t\t\ttreeViewItem.dynamicEmbeddedViewsChecked = true;\n\t\t}\n\n\t\t// Check the child components\n\t\tconst components: any[] = treeViewItem.lView[TVIEW].components;\n\n\t\tif (!components || treeViewItem.currentIndex >= components.length) {\n\t\t\tif (!treeViewItem.isRoot) {\n\t\t\t\tthis.getNextLView(treeViewItem.parent);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\n\t\t// Pick the one based on the index\n\t\tconst potentialLView =\n\t\t\ttreeViewItem.lView[components[treeViewItem.currentIndex]];\n\n\t\t// Check if it is not the root and if the component will be checked during this CD cycle, find the next\n\t\tif (!treeViewItem.isRoot && shouldLViewBeChecked(potentialLView)) {\n\t\t\ttreeViewItem.currentIndex++;\n\t\t\tthis.getNextLView(treeViewItem);\n\t\t\treturn;\n\t\t}\n\n\t\t// Found the component that will be checked next\n\t\tthis.predictedNextLView =\n\t\t\ttreeViewItem.lView[components[treeViewItem.currentIndex]] ||\n\t\t\ttreeViewItem.lView;\n\n\t\t// Up the index so we don't go over it again\n\t\ttreeViewItem.currentIndex++;\n\n\t\t// Create a new treeViewItem entry and add it as a child to the current one\n\t\tconst childTreeViewItem = createInitialTreeViewState(\n\t\t\tthis.predictedNextLView,\n\t\t\tfalse,\n\t\t\ttreeViewItem\n\t\t);\n\n\t\tthis.treeViewBuilder.addTreeViewItem(\n\t\t\tchildTreeViewItem,\n\t\t\tgetRealParent(treeViewItem)\n\t\t);\n\t}\n\n\tresetState() {\n\t\tthis.predictedNextLView = null;\n\t}\n\n\tgetTree() {\n\t\treturn this.treeViewBuilder.rootTreeViewItem;\n\t}\n}\n"]}