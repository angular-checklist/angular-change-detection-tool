{"version":3,"file":"util.js","sourceRoot":"","sources":["../src/util.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n\tFLAGS,\n\tHOST,\n\tLContainer,\n\tLContext,\n\tLView,\n\tLViewFlags,\n\tMONKEY_PATCH_KEY_NAME,\n\tTYPE\n} from './types/angular_core';\n\nexport function monkeyPatchFunction(obj, property, monkeyPatchFn) {\n\tobj[property] = monkeyPatchFn;\n}\n\nexport function getComponentViewByIndex(\n\tnodeIndex: number,\n\thostView: LView\n): LView {\n\t// Could be an LView or an LContainer. If LContainer, unwrap to find LView.\n\tconst slotValue = hostView[nodeIndex];\n\tconst lView = isLView(slotValue) ? slotValue : slotValue[HOST];\n\treturn lView;\n}\n\nexport function isLView(\n\tvalue: any | LView | LContainer | any | {} | null\n): value is LView {\n\treturn Array.isArray(value) && typeof value[TYPE] === 'object';\n}\n\nexport function isLContainer(value: LContainer | {} | null): value is LContainer {\n\treturn Array.isArray(value) && value[TYPE] === true;\n}\n\nexport function readPatchedData(target: any): LView | LContext | null {\n\treturn target[MONKEY_PATCH_KEY_NAME];\n}\n\nexport function readPatchedLView(target: any): LView | null {\n\tconst value = readPatchedData(target);\n\tif (value) {\n\t\treturn Array.isArray(value) ? value : (value as LContext).lView;\n\t}\n\treturn null;\n}\n\nexport function isCreationMode(view: LView): boolean {\n\treturn (view[FLAGS] & LViewFlags.CreationMode) === LViewFlags.CreationMode;\n}\n\nfunction viewAttachedToChangeDetector(view): boolean {\n\treturn (view[FLAGS] & LViewFlags.Attached) === LViewFlags.Attached;\n}\n\nexport function shouldLViewBeChecked(lView: LView): boolean {\n\treturn (\n\t\t(viewAttachedToChangeDetector(lView) || isCreationMode(lView)) &&\n\t\t(lView[FLAGS] & (LViewFlags.CheckAlways | LViewFlags.Dirty)) === 0\n\t);\n}\n\nexport function findAngularRootNode(node): LView {\n\tif (!node || !node.childNodes) {\n\t\treturn;\n\t}\n\tconst childNodes = node.childNodes;\n\tfor (let i = 0; i < childNodes.length; i++) {\n\t\tconst childNode = childNodes[i];\n\t\tif (childNode[MONKEY_PATCH_KEY_NAME]) {\n\t\t\treturn childNode[MONKEY_PATCH_KEY_NAME];\n\t\t} else {\n\t\t\tconst potentialRootNode = findAngularRootNode(childNode);\n\t\t\tif (potentialRootNode) {\n\t\t\t\treturn potentialRootNode;\n\t\t\t}\n\t\t}\n\t}\n}\n\nexport function mapToObject(map: Map<any, any>) {\n\tconst obj = {};\n\tfor (let [key, value] of map) {\n\t\tobj[key] = value;\n\t}\n\treturn obj;\n}\n"]}