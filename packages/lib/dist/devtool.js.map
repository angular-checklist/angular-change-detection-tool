{"version":3,"file":"devtool.js","sourceRoot":"","sources":["../src/devtool.ts"],"names":[],"mappings":"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","sourcesContent":["import { HOST, LView, RootContext, TView, TVIEW } from './types/angular_core';\nimport { createMeasurement, Tracer } from './visualisation/tracing';\nimport { LViewStateManager } from './l-view-state-manager';\nimport { mapToObject, readPatchedLView } from './util';\nimport {\n\tloopChildComponents,\n\tloopDynamicEmbeddedViews,\n\ttransformTreeToInstructions,\n\ttraverseTreeAndCreateTreeStructure\n} from './tree-traversal';\nimport { scheduleOutsideOfZone } from './zone-handler';\nimport { GraphRender, renderTree } from './visualisation/graph';\nimport * as uuid from 'uuid';\nimport { DEVTOOLS_IDENTIFIER } from './constants';\nimport { serialiseTreeViewItem } from './tree-view-builder';\nimport { sendMessage } from './messaging';\n\nconst tracer = new Tracer();\nconst treeGraph = new GraphRender('liveTree');\nconst lViewStateManager = new LViewStateManager();\n\nlet patchedTemplateFns: Array<{tView: TView, origTemplate: Function}> = [];\n\nconst monkeyPatchTemplate = (tView: TView, rootLView?: LView) => {\n\tif ((tView.template as any).__template_patched__) {\n\t\treturn;\n\t}\n\tconst origTemplate = tView.template;\n\ttView.template = function(...args) {\n\t\t// Mode will be 1 for creation and 2 for update\n\t\tconst mode = args[0];\n\t\t// Don't get the next lView if we are in creation mode as it will be called immediately in update mode\n\t\tif (mode === 1) {\n\t\t\torigTemplate(...args);\n\t\t\treturn;\n\t\t}\n\t\tif (rootLView) {\n\t\t\t// If we have the rootLView, it means that we have started a new cycle\n\t\t\tlViewStateManager.resetState();\n\t\t\tscheduleOutsideOfZone(() => {\n\t\t\t\tconst updatedTree = serialiseTreeViewItem(lViewStateManager.getTree());\n\t\t\t\tconst entireTree = serialiseTreeViewItem(\n\t\t\t\t\ttraverseTreeAndCreateTreeStructure(rootLView, true)\n\t\t\t\t);\n\t\t\t\tconst updatedTreeAsInstructions = transformTreeToInstructions(\n\t\t\t\t\tupdatedTree\n\t\t\t\t);\n\t\t\t\ttreeGraph.setUpdates(entireTree, updatedTreeAsInstructions);\n\t\t\t\trenderTree('lastUpdatedTree', entireTree, updatedTreeAsInstructions);\n\t\t\t\tsendMessage({\n\t\t\t\t\ttype: 'ENTIRE_TREE',\n\t\t\t\t\tpayload: {entireTree, instructions: mapToObject(updatedTreeAsInstructions)}\n\t\t\t\t});\n\t\t\t\tsendMessage({\n\t\t\t\t\ttype: 'UPDATED_TREE',\n\t\t\t\t\tpayload: {updatedTree}\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\t\t// Set the pointer to the next lView\n\t\tlViewStateManager.getNextLView(null, rootLView);\n\t\tconst currentLView = lViewStateManager.predictedNextLView;\n\t\tif (!currentLView[HOST][DEVTOOLS_IDENTIFIER]) {\n\t\t\tcurrentLView[HOST][DEVTOOLS_IDENTIFIER] = uuid();\n\t\t}\n\t\torigTemplate(...args);\n\n\t\t// After executing the template, we need to check if components were added\n\t\t// TODO: check if we need to check child components again (prolly dynamicEmbeddedViews are enough)\n\t\tmonkeyPatchDirectChildren(currentLView);\n\n\t\t// Lastly, we need to update the Tracer to show a box. This has to be done in a timeout as the view dimensions have not\n\t\t// been updated at this point yet.\n\t\tscheduleOutsideOfZone(() =>\n\t\t\ttracer.present(\n\t\t\t\tcurrentLView[HOST][DEVTOOLS_IDENTIFIER],\n\t\t\t\tcurrentLView[HOST].tagName,\n\t\t\t\tcreateMeasurement(currentLView[0].getBoundingClientRect())\n\t\t\t)\n\t\t);\n\t};\n\t(tView.template as any).__template_patched__ = true;\n\n\tpatchedTemplateFns.push({origTemplate: origTemplate, tView});\n};\n\nexport function monkeyPatchDirectChildren(lView: LView, isRoot = false) {\n\t// Patch direct child components\n\tlet whenChildComponentFound;\n\tif (isRoot) {\n\t\twhenChildComponentFound = (childLView: LView) =>\n\t\t\tmonkeyPatchTemplate(childLView[TVIEW], childLView);\n\t} else {\n\t\twhenChildComponentFound = (childLView: LView) =>\n\t\t\tmonkeyPatchTemplate(childLView[TVIEW]);\n\t}\n\tloopChildComponents({ lView, work: whenChildComponentFound });\n\t// Find components in the dynamicEmbeddedViews to patch\n\tconst whenDynamicEmbeddedViewFound = (dynamicLView: LView) => {\n\t\tif (dynamicLView[HOST]) {\n\t\t\tmonkeyPatchTemplate(dynamicLView[TVIEW]);\n\t\t}\n\t\tmonkeyPatchDirectChildren(dynamicLView);\n\t};\n\tloopDynamicEmbeddedViews({ lView, work: whenDynamicEmbeddedViewFound });\n}\n\nexport function monkeyPatchRootNode(rootContext: RootContext) {\n\tfor (let i = 0; i < rootContext.components.length; i++) {\n\t\tconst rootComponent = rootContext.components[i];\n\t\tconst rootComponentLView = readPatchedLView(rootComponent);\n\t\tmonkeyPatchDirectChildren(rootComponentLView, true);\n\t}\n}\n\nexport function undoMonkeyPatch() {\n\tpatchedTemplateFns.forEach(data => {\n\t\tdata.tView.template = data.origTemplate;\n\t});\n\tpatchedTemplateFns = [];\n}\n"]}