{"version":3,"file":"graph.js","sourceRoot":"","sources":["../../src/visualisation/graph.ts"],"names":[],"mappings":"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","sourcesContent":["import { SerializedTreeViewItem } from '../tree-view-builder';\nimport * as dagreD3 from 'dagre-d3';\nimport { graphlib } from 'dagre-d3';\nimport { event as d3Event, select as d3Select } from 'd3-selection';\nimport { zoom as d3Zoom, zoomIdentity as d3ZoomIdentity } from 'd3-zoom';\nimport { COLORS_CLASSES, NOT_UPDATED_NODE_CLASS_NAME } from '../constants';\nimport { PoolData, UpdatePoolManager } from './update-pool-manager';\nimport Graph = graphlib.Graph;\n\n/**\n * Renders a tree\n *\n * @param id - selector of the id in the html\n * @param treeViewItem - the item to visualise\n * @param updates - Map of all items that need to be highlighted\n */\nexport function renderTree(\n\tid: string,\n\ttreeViewItem: SerializedTreeViewItem,\n\tupdates?: Map<\n\t\tstring,\n\t\tPoolData<SerializedTreeViewItem> | SerializedTreeViewItem\n\t>\n) {\n\t// Create the input graph\n\tconst g: Graph = new dagreD3.graphlib.Graph()\n\t\t.setGraph({})\n\t\t.setDefaultEdgeLabel(function() {\n\t\t\treturn {};\n\t\t});\n\n\twalkTreeAndAddNodes(g, treeViewItem, updates);\n\n\tconst svg = d3Select(`svg#${id}`),\n\t\tinner = svg.select('g');\n\tconst firstRender = (inner.node() as any).children.length === 0;\n\n\tconst zoom = d3Zoom().on('zoom', function() {\n\t\tinner.attr('transform', d3Event.transform);\n\t});\n\tsvg.call(zoom as any);\n\n\tconst render = new dagreD3.render();\n\trender(inner as any, g);\n\n\tif (firstRender) {\n\t\tzoomFit(svg, inner, zoom);\n\t}\n}\n\nfunction zoomFit(root, inner, zoom) {\n\tvar bounds = root.node().getBBox();\n\tvar parent = root.node().parentElement;\n\tvar fullWidth = parent.clientWidth,\n\t\tfullHeight = parent.clientHeight;\n\tvar width = bounds.width,\n\t\theight = bounds.height;\n\tvar midX = bounds.x + width / 2,\n\t\tmidY = bounds.y + height / 2;\n\tif (width === 0 || height === 0) return; // nothing to fit\n\tvar scale = 0.75 / Math.max(width / fullWidth, height / fullHeight);\n\tvar translate = [fullWidth / 2 - scale * midX, fullHeight / 2 - scale * midY];\n\tconst transform = d3ZoomIdentity\n\t\t.translate(translate[0], translate[1])\n\t\t.scale(scale);\n\troot\n\t\t.transition()\n\t\t.duration(0) // milliseconds\n\t\t.call(zoom.transform, transform);\n}\n\n// FIXME graph should be unaware of host and stuff\nexport function walkTreeAndAddNodes(\n\tg: Graph,\n\ttreeViewItem: SerializedTreeViewItem,\n\tupdates?: Map<\n\t\tstring,\n\t\tPoolData<SerializedTreeViewItem> | SerializedTreeViewItem\n\t>\n) {\n\tconst parentIdentifier = treeViewItem.uuid;\n\tif (updates && updates.has(parentIdentifier)) {\n\t\tconst data = updates.get(parentIdentifier);\n\t\tg.setNode(parentIdentifier, {\n\t\t\tlabel: treeViewItem.tagName,\n\t\t\tclass: (data as PoolData<SerializedTreeViewItem>).hit\n\t\t\t\t? COLORS_CLASSES[(data as PoolData<SerializedTreeViewItem>).hit - 1]\n\t\t\t\t: COLORS_CLASSES[0]\n\t\t});\n\t} else {\n\t\tg.setNode(parentIdentifier, {\n\t\t\tlabel: treeViewItem.tagName,\n\t\t\tclass: NOT_UPDATED_NODE_CLASS_NAME\n\t\t});\n\t}\n\ttreeViewItem.children.forEach(childTreeViewItem => {\n\t\tconst childIdentifier = childTreeViewItem.uuid;\n\t\twalkTreeAndAddNodes(g, childTreeViewItem, updates);\n\t\tg.setEdge(parentIdentifier, childIdentifier);\n\t});\n}\n\nexport class GraphRender extends UpdatePoolManager<SerializedTreeViewItem> {\n\tprivate serializedTreeViewItem: SerializedTreeViewItem;\n\n\tconstructor(private id: string) {\n\t\tsuper();\n\t}\n\n\tsetUpdates(\n\t\tserializedTreeViewItem: SerializedTreeViewItem,\n\t\tupdates?: Map<string, SerializedTreeViewItem> | Object\n\t) {\n\t\tthis.serializedTreeViewItem = serializedTreeViewItem;\n\t\tthis.addAll(updates);\n\t}\n\n\tdrawImpl(pool: Map<string, PoolData<SerializedTreeViewItem>>) {\n\t\trenderTree(this.id, this.serializedTreeViewItem, this.pool);\n\t}\n}\n"]}